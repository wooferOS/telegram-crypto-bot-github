import os
import json
import logging
import threading
from datetime import datetime
from dotenv import load_dotenv
from flask import Flask
from telebot import TeleBot, types
from binance.client import Client
from daily_analysis import run_daily_analysis
from daily_analysis import run_daily_analysis, get_usdt_to_uah_rate
from flask import request, jsonify

load_dotenv(".env")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

bot = TeleBot(TELEGRAM_TOKEN)
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)

app = Flask(__name__)

@app.route("/health")
def health():
    return "‚úÖ OK", 200

budget = {"USDT": 100}

WHITELIST = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT", "ADAUSDT",
    "DOGEUSDT", "AVAXUSDT", "DOTUSDT", "TRXUSDT", "LINKUSDT", "MATICUSDT",
    "LTCUSDT", "BCHUSDT", "ATOMUSDT", "NEARUSDT", "FILUSDT", "ICPUSDT",
    "ETCUSDT", "HBARUSDT", "VETUSDT", "RUNEUSDT", "INJUSDT", "OPUSDT",
    "ARBUSDT", "SUIUSDT", "STXUSDT", "TIAUSDT", "SEIUSDT", "1000PEPEUSDT"
]

def load_signal():
    try:
        with open("signal.json", "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_signal(signal):
    with open("signal.json", "w") as f:
        json.dump(signal, f)

signal = load_signal()

def get_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìä –ë–∞–ª–∞–Ω—Å", "üìà –ó–≤—ñ—Ç")
    kb.row("üïò –Ü—Å—Ç–æ—Ä—ñ—è", "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é")
    kb.row("‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂", "üîÑ –û–Ω–æ–≤–∏—Ç–∏")
    kb.row("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏")
    return kb

@bot.message_handler(commands=["start", "menu"])
def send_welcome(message):
    text = (
        "üëã –í—ñ—Ç–∞—é! –Ø *GPT-–∫—Ä–∏–ø—Ç–æ–±–æ—Ç* –¥–ª—è Binance.\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏:\n"
        "`/balance`, `/report`, `/confirm_buy`, `/confirm_sell`, `/set_budget`"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=get_main_keyboard())

@bot.message_handler(commands=["id"])
def show_id(message):
    bot.reply_to(message, f"–í–∞—à chat ID: `{message.chat.id}`", parse_mode="Markdown")

def send_balance(message):
    try:
        balances = client.get_account()["balances"]
        response = "üìä *–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:*\n\n"
        total_usdt = 0
        for asset in balances:
            amount = float(asset["free"])
            if amount < 0.01:
                continue
            symbol = asset["asset"]
            try:
                price = float(client.get_symbol_ticker(symbol=f"{symbol}USDT")["price"])
            except:
                continue
            value = amount * price
            total_usdt += value
            response += f"‚ñ´Ô∏è {symbol}: {amount:.4f} ‚âà {value:.2f} USDT\n"
        response += f"\nüí∞ *–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* {total_usdt:.2f} USDT"
        prices = {item["symbol"]: float(item["price"]) for item in client.get_all_tickers()}
        rate_uah = get_usdt_to_uah_rate()
        total_usdt = 0
        response = "üìä *–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:*\n\n"
        for asset in balances:
            free = float(asset["free"])
            locked = float(asset["locked"])
            amount = free + locked
            if amount < 0.0001:
                continue
            symbol = asset["asset"]
            if symbol in ["BNB", "BUSD", "USDC"]:  # –î–æ–¥–∞–π –∞–±–æ –∑–º—ñ–Ω–∏ —Å–ø–∏—Å–æ–∫ –≤–∏–∫–ª—é—á–µ–Ω—å
                continue
            if symbol == "USDT":
                value = amount
            else:
                price_key = f"{symbol}USDT"
                price = prices.get(price_key)
                if not price:
                    continue
                value = round(amount * price, 2)
            total_usdt += value
            response += f"‚ñ´Ô∏è {symbol}: {amount:.6f} ‚âà {value:.2f} USDT\n"
        response += f"\nüí∞ *–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* {total_usdt:.2f} USDT ‚âà {round(total_usdt * rate_uah)}‚Ç¥"
        bot.send_message(message.chat.id, response, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

def send_report(message):
    try:
        bot.send_message(message.chat.id, "‚è≥ –§–æ—Ä–º—É—î—Ç—å—Å—è GPT-–∑–≤—ñ—Ç, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
        report = run_daily_analysis()
        if report:
            bot.send_message(message.chat.id, report, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤—ñ—Ç—É:\n{e}")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.data.startswith("confirmbuy_"):
            pair = call.data.split("_")[1]
            bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∫—É–ø—ñ–≤–ª—é {pair}")
            signal["last_action"] = {
                "type": "buy",
                "pair": pair,
                "time": datetime.utcnow().isoformat()
            }
            save_signal(signal)
        elif call.data.startswith("confirmsell_"):
            pair = call.data.split("_")[1]
            bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–æ–¥–∞–∂ {pair}")
            signal["last_action"] = {
                "type": "sell",
                "pair": pair,
                "time": datetime.utcnow().isoformat()
            }
            save_signal(signal)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

@bot.message_handler(commands=["set_budget"])
def set_budget(message):
    try:
        parts = message.text.strip().split()
        if len(parts) == 2:
            amount = float(parts[1])
            budget["USDT"] = amount
            with open("budget.json", "w") as f:
                json.dump(budget, f)
            bot.reply_to(message, f"‚úÖ –ë—é–¥–∂–µ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: {amount} USDT")
        else:
            bot.reply_to(message, "‚ùóÔ∏è –ü—Ä–∏–∫–ª–∞–¥: `/set_budget 150`", parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

@bot.message_handler(func=lambda m: True)
def handle_buttons(message):
    text = message.text
    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        send_balance(message)
    elif text == "üìà –ó–≤—ñ—Ç":
        send_report(message)
    elif text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é":
        bot.send_message(message.chat.id, "‚úã –û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ...")
    elif text == "‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂":
        bot.send_message(message.chat.id, "‚úã –û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É...")
    elif text == "üîÑ –û–Ω–æ–≤–∏—Ç–∏":
        send_report(message)
    elif text == "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(message.chat.id, "‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à—ñ—Ç—å /help –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.")
        
@bot.message_handler(commands=["zarobyty"])
def handle_zarobyty(message):
    try:
        result = run_daily_analysis()
        buy_list = result.get("buy", [])
        sell_list = result.get("sell", [])
        
        if not buy_list and not sell_list:
            bot.send_message(message.chat.id, "üìâ –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ –∞–±–æ –ø—Ä–æ–¥–∞–∂—É.")
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        for symbol in sell_list:
            markup.add(types.InlineKeyboardButton(f"–ó–∞—Ä–æ–±–ª—è—î–º–æ: –ø—Ä–æ–¥–∞—Ç–∏ {symbol}", callback_data=f"confirmsell_{symbol}"))
        for symbol in buy_list:
            markup.add(types.InlineKeyboardButton(f"–ó–∞—Ä–æ–±–ª—è—î–º–æ: –∫—É–ø–∏—Ç–∏ {symbol}", callback_data=f"confirmbuy_{symbol}"))

        bot.send_message(
            message.chat.id,
            "üí° *–©–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î GPT —Å—å–æ–≥–æ–¥–Ω—ñ:*\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó.",
            parse_mode="Markdown",
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó /zarobyty:\n{str(e)}")

def run_polling():
    print("ü§ñ Telegram polling –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.polling(none_stop=True)

def run_flask():
    print("üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è /health –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 10000")
    app.run(host="0.0.0.0", port=10000)
@app.route("/daily", methods=["POST"])

def trigger_daily_analysis():
    try:
        run_daily_analysis()
        return jsonify({"status": "ok", "message": "–ê–Ω–∞–ª—ñ–∑ –∑–∞–ø—É—â–µ–Ω–æ"}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == "__main__":
    threading.Thread(target=run_polling).start()
    run_flask()
