import os
import json
import logging
import threading
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
from dotenv import load_dotenv
from flask import Flask
from telebot import TeleBot, types
from binance.client import Client
from daily_analysis import run_daily_analysis
from daily_analysis import run_daily_analysis, get_usdt_to_uah_rate
from flask import request, jsonify

load_dotenv(".env")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

bot = TeleBot(TELEGRAM_TOKEN)
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)

app = Flask(__name__)

@app.route("/health")
def health():
    return "‚úÖ OK", 200

budget = {"USDT": 100}

WHITELIST = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT", "ADAUSDT",
    "DOGEUSDT", "AVAXUSDT", "DOTUSDT", "TRXUSDT", "LINKUSDT", "MATICUSDT",
    "LTCUSDT", "BCHUSDT", "ATOMUSDT", "NEARUSDT", "FILUSDT", "ICPUSDT",
    "ETCUSDT", "HBARUSDT", "VETUSDT", "RUNEUSDT", "INJUSDT", "OPUSDT",
    "ARBUSDT", "SUIUSDT", "STXUSDT", "TIAUSDT", "SEIUSDT", "1000PEPEUSDT"
]

def load_signal():
    try:
        with open("signal.json", "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_signal(signal):
    with open("signal.json", "w") as f:
        json.dump(signal, f)

signal = load_signal()

def get_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìä –ë–∞–ª–∞–Ω—Å", "üìà –ó–≤—ñ—Ç")
    kb.row("üïò –Ü—Å—Ç–æ—Ä—ñ—è", "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é")
    kb.row("‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂", "üîÑ –û–Ω–æ–≤–∏—Ç–∏")
    kb.row("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏")
    return kb

def send_daily_forecast():
    try:
        result = run_daily_analysis()
        report = result.get("report", "")
        if report:
            bot.send_message(ADMIN_CHAT_ID, report, parse_mode="Markdown")
            print("‚úÖ –©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            bot.send_message(ADMIN_CHAT_ID, "‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    except Exception as e:
        bot.send_message(ADMIN_CHAT_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:\n{e}")

@bot.message_handler(commands=["start", "menu"])
def send_welcome(message):
    text = (
        "üëã –í—ñ—Ç–∞—é! –Ø *GPT-–∫—Ä–∏–ø—Ç–æ–±–æ—Ç* –¥–ª—è Binance.\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏:\n"
        "`/balance`, `/report`, `/confirm_buy`, `/confirm_sell`, `/set_budget`"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=get_main_keyboard())

@bot.message_handler(commands=["id"])
def show_id(message):
    bot.reply_to(message, f"–í–∞—à chat ID: `{message.chat.id}`", parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.data.startswith("confirmbuy_") or call.data.startswith("confirmsell_"):
            parts = call.data.split("_", 1)
            if len(parts) != 2:
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.")
                return

            action, symbol = parts[0], parts[1]
            action_type = "buy" if action == "confirmbuy" else "sell"
            verb = "–∫—É–ø—ñ–≤–ª—é" if action_type == "buy" else "–ø—Ä–æ–¥–∞–∂"

            bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ {verb} {symbol}")

            # üß† –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
            timestamp = datetime.utcnow().isoformat()
            signal["last_action"] = {
                "type": action_type,
                "pair": symbol,
                "time": timestamp
            }
            history = signal.get("history", [])
            history.append({
                "type": action_type,
                "pair": symbol,
                "time": timestamp
            })
            signal["history"] = history
            save_signal(signal)

            # üõ° –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–ø—ñ–≤
            success = place_safety_orders(symbol, action_type)
            if success:
                bot.send_message(call.message.chat.id, f"üõ° –°—Ç–æ–ø-–ª–æ—Å/—Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {symbol}.")
            else:
                bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ–ø–∏ –¥–ª—è {symbol}.")
        else:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏: {str(e)}")

def place_safety_orders(symbol: str, action_type: str):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–∏–Ω–∫–æ–≤—É —Ü—ñ–Ω—É
        price_data = client.get_symbol_ticker(symbol=f"{symbol}USDT")
        current_price = float(price_data["price"])

        quantity = 10 / current_price  # üîÅ –¢–∏–º—á–∞—Å–æ–≤–æ ‚Äî $10 –Ω–∞ –æ–¥–Ω—É —É–≥–æ–¥—É

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–ª–µ–π
        if action_type == "buy":
            tp_price = round(current_price * 1.06, 4)
            sl_price = round(current_price * 0.97, 4)
            side = "SELL"
        else:
            tp_price = round(current_price * 0.94, 4)
            sl_price = round(current_price * 1.03, 4)
            side = "BUY"

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è OCO –æ—Ä–¥–µ—Ä–∞
        order = client.create_oco_order(
            symbol=f"{symbol}USDT",
            side=side,
            quantity=round(quantity, 3),
            price=str(tp_price),
            stopPrice=str(sl_price),
            stopLimitPrice=str(sl_price),
            stopLimitTimeInForce='GTC'
        )

        print(f"‚úÖ –°—Ç–æ–ø–∏ –¥–ª—è {symbol} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ.")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–ø—ñ–≤ –¥–ª—è {symbol}: {e}")
        return False


@bot.message_handler(commands=["set_budget"])
def set_budget(message):
    try:
        parts = message.text.strip().split()
        if len(parts) == 2:
            amount = float(parts[1])
            budget["USDT"] = amount
            with open("budget.json", "w") as f:
                json.dump(budget, f)
            bot.reply_to(message, f"‚úÖ –ë—é–¥–∂–µ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: {amount} USDT")
        else:
            bot.reply_to(message, "‚ùóÔ∏è –ü—Ä–∏–∫–ª–∞–¥: `/set_budget 150`", parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
def send_report(message):
    try:
        bot.send_message(message.chat.id, "‚è≥ –§–æ—Ä–º—É—î—Ç—å—Å—è GPT-–∑–≤—ñ—Ç, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
        result = run_daily_analysis()
        report = result.get("report", "")
        if report:
            bot.send_message(message.chat.id, report, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ó–≤—ñ—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤—ñ—Ç—É:\n{str(e)}")

@bot.message_handler(func=lambda m: True)
def handle_buttons(message):
    text = message.text
    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        send_balance(message)
    elif text == "üìà –ó–≤—ñ—Ç":
        send_report(message)
    elif text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é":
        bot.send_message(message.chat.id, "‚úã –û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ...")
    elif text == "‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂":
        bot.send_message(message.chat.id, "‚úã –û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É...")
    elif text == "üîÑ –û–Ω–æ–≤–∏—Ç–∏":
        send_report(message)
    elif text == "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(message.chat.id, "‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à—ñ—Ç—å /help –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.")
        

@bot.message_handler(commands=["zarobyty"])
def handle_zarobyty(message):
    try:
        result = run_daily_analysis()
        buy_list = result.get("buy", [])
        sell_list = result.get("sell", [])
        report_text = result.get("report", "")

        if not buy_list and not sell_list:
            bot.send_message(
                message.chat.id,
                "üìâ –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ –∞–±–æ –ø—Ä–æ–¥–∞–∂—É."
            )
            return

        # üß† –ï–º–æ–¥–∂—ñ –¥–ª—è —Ç–æ–∫–µ–Ω—ñ–≤
        emoji_map = {
            "BTC": "‚Çø", "ETH": "üåê", "BNB": "üî•", "SOL": "‚òÄÔ∏è", "XRP": "üíß",
            "ADA": "üî∑", "DOGE": "üê∂", "AVAX": "üóª", "DOT": "üéØ", "TRX": "üí°",
            "LINK": "üîó", "MATIC": "üõ°", "LTC": "üåï", "BCH": "üçÄ", "NEAR": "üì°",
            "FIL": "üìÅ", "ICP": "üß†", "ETC": "‚ö°", "HBAR": "üåÄ", "INJ": "üíâ",
            "VET": "‚úÖ", "RUNE": "‚öì", "OP": "üìà", "ARB": "üèπ", "SUI": "üíß",
            "STX": "üì¶", "TIA": "ü™ô", "SEI": "üåä", "ATOM": "üåå", "1000PEPE": "üê∏"
        }

        def add_emoji(sym):
            for key in emoji_map:
                if sym.startswith(key):
                    return f"{emoji_map[key]} {sym}"
            return sym

        # üßæ –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
        summary = "üí° *GPT-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å:*\n\n"
        if sell_list:
            summary += "üîª *–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –ø—Ä–æ–¥–∞—Ç–∏:*\n"
            summary += ", ".join(f"`{add_emoji(s)}`" for s in sell_list) + "\n\n"
        if buy_list:
            summary += "üü¢ *–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –∫—É–ø–∏—Ç–∏:*\n"
            summary += ", ".join(f"`{add_emoji(s)}`" for s in buy_list) + "\n\n"
        summary += "üì• –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó."

        # üîò –ö–Ω–æ–ø–∫–∏
        markup = types.InlineKeyboardMarkup(row_width=1)
        for symbol in sell_list:
            markup.add(types.InlineKeyboardButton(f"üîª –ü—Ä–æ–¥–∞—Ç–∏ {symbol}", callback_data=f"confirmsell_{symbol}"))
        for symbol in buy_list:
            markup.add(types.InlineKeyboardButton(f"üü¢ –ö—É–ø–∏—Ç–∏ {symbol}", callback_data=f"confirmbuy_{symbol}"))

        # üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É
        bot.send_message(
            message.chat.id,
            summary,
            parse_mode="Markdown",
            reply_markup=markup
        )

        # üß† –î–æ–¥–∞—Ç–∫–æ–≤–æ ‚Äî –ø–æ–≤–Ω–∏–π GPT-–∑–≤—ñ—Ç
        if report_text:
            bot.send_message(message.chat.id, report_text, parse_mode="Markdown")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó /zarobyty:\n{str(e)}")

@bot.message_handler(commands=["stats"])
def handle_stats(message):
    try:
        history = signal.get("history", [])
        if not history:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è. –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è.")
            return

        stats = {"buy": {}, "sell": {}}
        for action in history:
            symbol = action.get("pair")
            action_type = action.get("type")
            time_str = action.get("time")
            if not symbol or not time_str:
                continue
            stats[action_type].setdefault(symbol, 0)
            stats[action_type][symbol] += 1

        text = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—ñ–π:*\n\n"
        if stats["buy"]:
            text += "üü¢ *–ö—É–ø–ª–µ–Ω–æ:*\n"
            for sym, count in stats["buy"].items():
                text += f"‚Ä¢ {sym}: `{count}` —Ä–∞–∑—ñ–≤\n"
        if stats["sell"]:
            text += "\nüîª *–ü—Ä–æ–¥–∞–Ω–æ:*\n"
            for sym, count in stats["sell"].items():
                text += f"‚Ä¢ {sym}: `{count}` —Ä–∞–∑—ñ–≤\n"

        total = sum(stats["buy"].values()) + sum(stats["sell"].values())
        text += f"\nüìà *–ó–∞–≥–∞–ª–æ–º –æ–ø–µ—Ä–∞—Ü—ñ–π:* `{total}`"

        bot.send_message(message.chat.id, text, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É /stats: {e}")


def run_polling():
    print("ü§ñ Telegram polling –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.polling(none_stop=True)
    
# üïí –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
scheduler = BackgroundScheduler()
scheduler.add_job(send_daily_forecast, trigger='cron', hour=9, minute=0)
scheduler.start()
print("‚è∞ APScheduler –∑–∞–ø—É—â–µ–Ω–æ ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—å —â–æ–¥–Ω—è –æ 09:00")
def run_flask():
    print("üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è /health –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 10000")
    app.run(host="0.0.0.0", port=10000)
@app.route("/daily", methods=["POST"])

def trigger_daily_analysis():
    try:
        run_daily_analysis()
        return jsonify({"status": "ok", "message": "–ê–Ω–∞–ª—ñ–∑ –∑–∞–ø—É—â–µ–Ω–æ"}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == "__main__":
    threading.Thread(target=run_polling).start()
    run_flask()
