import os
import json
import logging
from datetime import datetime
from binance.client import Client
from binance.exceptions import BinanceAPIException
from openai import OpenAI
import requests
from telegram import Bot, ParseMode
import traceback

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
client = Client(api_key=os.getenv("BINANCE_API_KEY"), api_secret=os.getenv("BINANCE_SECRET_KEY"))
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
bot = Bot(token=TELEGRAM_TOKEN)

# –®–ª—è—Ö –¥–æ whitelist
WHITELIST_PATH = "whitelist.json"
REPORTS_DIR = "reports"
LOG_FILE = "daily.log"
UAH_RATE = 43.0
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format="%(asctime)s %(levelname)s:%(message)s")

def log_message(message):
    print(message)
    logging.info("üîÅ –ó–∞–ø—É—Å–∫ daily_analysis.py")

def send_telegram(message):
    telegram_token = os.getenv("TELEGRAM_TOKEN")
    chat_id = os.getenv("ADMIN_CHAT_ID")
    url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
    data = {"chat_id": chat_id, "text": message, "parse_mode": "Markdown"}
    try:
        requests.post(url, data=data)
    except Exception as e:
        logging.error(f"‚ùå Telegram Error: {str(e)}")
def save_to_file(data, filename):
    with open(filename, "w") as f:
        json.dump(data, f, indent=2)

def load_from_file(filename):
    if os.path.exists(filename):
        with open(filename, "r") as f:
            return json.load(f)
    return {}

def save_report(content, date_str, hour_min):
    folder = f"reports/{date_str}"
    os.makedirs(folder, exist_ok=True)
    path = f"{folder}/daily_report_{hour_min}.md"
    with open(path, "w") as f:
        f.write(content)
    return path
def analyze_balance(client):
    balances = get_binance_balances(client)
    result = []
    for asset in balances:
        symbol = asset["asset"]
        free = float(asset["free"])
        if free == 0 or symbol == "USDT":
            continue
        pair = symbol + "USDT"
        try:
            price = float(client.get_symbol_ticker(symbol=pair)["price"])
            value = round(price * free, 2)
            result.append({
                "symbol": symbol,
                "amount": free,
                "value_usdt": value,
                "pair": pair
            })
        except Exception as e:
            log.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {pair}: {str(e)}")
    return sorted(result, key=lambda x: x["value_usdt"], reverse=True)

def get_whitelist():
    return [
        "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "AVAXUSDT",
        "XRPUSDT", "DOGEUSDT", "LINKUSDT", "MATICUSDT", "TRXUSDT",
        "ADAUSDT", "DOTUSDT", "LTCUSDT", "UNIUSDT", "ATOMUSDT",
        "NEARUSDT", "XLMUSDT", "INJUSDT", "OPUSDT", "ARBUSDT",
        "TIAUSDT", "SUIUSDT", "PEPEUSDT", "FETUSDT", "RNDRUSDT",
        "SEIUSDT", "ORDIUSDT", "1000SATSUSDT", "JASMYUSDT", "ENJUSDT"
    ]
def get_market_data(client, whitelist):
    tickers = client.get_ticker()
    market_data = {}
    for t in tickers:
        symbol = t["symbol"]
        if symbol in whitelist:
            try:
                change = float(t["priceChangePercent"])
                volume = float(t["quoteVolume"])
                last_price = float(t["lastPrice"])
                market_data[symbol] = {
                    "change": change,
                    "volume": volume,
                    "last_price": last_price
                }
            except:
                continue
    return market_data

def prepare_analysis(balance_data, market_data):
    to_sell = []
    to_buy = []
    for asset in balance_data:
        pair = asset["pair"]
        if pair in market_data:
            perf = market_data[pair]["change"]
            if perf < -2:  # —É–º–æ–≤–Ω–æ —Å–ª–∞–±–∫–∞ –º–æ–Ω–µ—Ç–∞
                to_sell.append({**asset, "change": perf})

    sorted_market = sorted(market_data.items(), key=lambda x: (x[1]["change"], x[1]["volume"]), reverse=True)
    for symbol, data in sorted_market[:3]:  # —Ç–æ–ø 3 –º–æ–Ω–µ—Ç–∏ –Ω–∞ –∫—É–ø—ñ–≤–ª—é
        to_buy.append({
            "pair": symbol,
            "change": data["change"],
            "volume": data["volume"],
            "price": data["last_price"]
        })

    return to_sell, to_buy
def estimate_profit(buy_entry, sell_entry):
    try:
        profit = (sell_entry["price"] - buy_entry["price"]) * (buy_entry["usdt"] / buy_entry["price"])
        return round(profit, 2)
    except:
        return 0.0

def format_trade_command(action, symbol):
    return f"/confirm{action.lower()}{symbol.replace('/', '')}"

def generate_report(balance_usdt, to_sell, to_buy, currency_rate):
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    report = f"# üìä –ó–≤—ñ—Ç GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ ({now})\n\n"
    report += f"**–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:** {balance_usdt:.2f} USDT ‚âà {balance_usdt * currency_rate:.2f} –≥—Ä–Ω\n\n"

    report += "## üîª –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –ø—Ä–æ–¥–∞—Ç–∏:\n"
    if to_sell:
        for asset in to_sell:
            report += f"- {asset['asset']} ({asset['pair']}): {asset['usdt']:.2f} USDT ‚Äî –∑–º—ñ–Ω–∞ {asset['change']}%\n"
            report += f"  üëâ {format_trade_command('sell', asset['pair'])}\n"
    else:
        report += "–ù–µ–º–∞—î —Å–ª–∞–±–∫–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É.\n"

    report += "\n## üü¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –∫—É–ø–∏—Ç–∏:\n"
    if to_buy:
        for asset in to_buy:
            report += f"- {asset['pair']}: –∑–º—ñ–Ω–∞ +{asset['change']}%, –æ–± º—î–º {asset['volume']:.2f}\n"
            report += f"  üëâ {format_trade_command('buy', asset['pair'])}\n"
    else:
        report += "–ù–µ–º–∞—î –≤–∏–≥—ñ–¥–Ω–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ.\n"

    return report
def ensure_directory(path):
    if not os.path.exists(path):
        os.makedirs(path)

def save_report(text, report_dir):
    now = datetime.now().strftime("%H-%M")
    filename = f"daily_report_{now}.md"
    path = os.path.join(report_dir, filename)
    with open(path, "w") as f:
        f.write(text)
    return path

def send_telegram_report(text, path=None):
    try:
        bot.send_message(chat_id=ADMIN_CHAT_ID, text="üì§ –ù–æ–≤–∏–π –∑–≤—ñ—Ç GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:", parse_mode=ParseMode.MARKDOWN)
        if path and os.path.exists(path):
            with open(path, "rb") as f:
                bot.send_document(chat_id=ADMIN_CHAT_ID, document=f)
        else:
            bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ Telegram: {e}")
        
def get_binance_balances(client):
    try:
        account_info = client.get_account()
        balances = account_info.get("balances", [])
        result = {}
        for asset in balances:
            asset_name = asset["asset"]
            free = float(asset["free"])
            locked = float(asset["locked"])
            total = free + locked
            if total > 0:
                result[asset_name] = total
        return result
    except Exception as e:
        logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å Binance: {str(e)}")
        return {}
        
def build_gpt_prompt(balances, market_data):
    prompt = "–û—Ü—ñ–Ω–∏ –º—ñ–π –∫—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª—å —ñ –ø–æ—Ä–∞–¥—å, —â–æ –ø—Ä–æ–¥–∞—Ç–∏, —â–æ –∫—É–ø–∏—Ç–∏:\n\n"
    prompt += "–ü–æ—Ç–æ—á–Ω—ñ –∞–∫—Ç–∏–≤–∏:\n"
    for asset, amount in balances.items():
        prompt += f"- {asset}: {amount}\n"
    prompt += "\n–ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ä–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ:\n"
    for symbol, data in market_data.items():
        prompt += f"- {symbol}: {data['change']}% –∑–º—ñ–Ω, –æ–± º—î–º {data['volume']}, —Ü—ñ–Ω–∞ {data['last_price']}\n"
    prompt += "\n–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∞–π —É –≤–∏–≥–ª—è–¥—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –∑ –æ–±“ë—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è–º."
    return prompt
    
def ask_gpt(prompt):
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫ –∫—Ä–∏–ø—Ç–æ—Ä–∏–Ω–∫—É."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"‚ùå GPT-–ø–æ–º–∏–ª–∫–∞: {e}")
        return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT."

def main():
    try:
        log_message("üîÅ –ó–∞–ø—É—Å–∫ daily_analysis.py")
        
        # 1. –û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å
        balances = get_binance_balances(client)

        # 2. –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ
        whitelist = get_whitelist()
        market_data = get_market_data(client, whitelist)

        # 3. –ü–æ–±—É–¥—É–≤–∞—Ç–∏ GPT-–∑–∞–ø–∏—Ç
        prompt = build_gpt_prompt(balances, market_data)

        # 4. –ó–∞–ø–∏—Ç –¥–æ GPT
        analysis = ask_gpt(prompt)

        # 5. –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç
        date_str = datetime.now().strftime("%Y-%m-%d")
        report_dir = os.path.join("reports", date_str)
        ensure_directory(report_dir)
        report_path = save_report(analysis, report_dir)

        # 6. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤ Telegram
        send_telegram_report(analysis, report_path)

    except Exception as err:
        logging.error("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∞:")
        logging.error(traceback.format_exc())
        try:
            send_telegram(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ: {str(err)}")
        except:
            pass
if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞–Ω–∞–ª—ñ–∑—ñ: {str(err)}"
        logging.error(error_message)
        try:
            if TELEGRAM_TOKEN and ADMIN_CHAT_ID:
                send_telegram(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∞:\n{error_message}")
        except Exception as send_err:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram: {str(send_err)}")

