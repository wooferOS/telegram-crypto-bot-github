import os
import json
import logging
from datetime import datetime
from binance.client import Client
from openai import OpenAI
import requests

# –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
def log_message(message: str):
    import logging
    logging.basicConfig(filename="daily.log", level=logging.INFO, format="%(asctime)s %(levelname)s:%(message)s")
    logging.info(message)

# –§—É–Ω–∫—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram
def send_telegram(message: str):
    import requests, os
    token = os.getenv("TELEGRAM_TOKEN")
    chat_id = os.getenv("ADMIN_CHAT_ID")
    if token and chat_id:
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        requests.post(url, data={"chat_id": chat_id, "text": message})

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ö–ª—ñ—î–Ω—Ç–∏
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)
openai_client = OpenAI(api_key=OPENAI_API_KEY)
# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(filename="daily.log", level=logging.INFO, format="%(asctime)s %(levelname)s:%(message)s")

# –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤
def ensure_report_dir():
    today = datetime.now().strftime("%Y-%m-%d")
    path = os.path.join("reports", today)
    os.makedirs(path, exist_ok=True)
    return path

# –°–ø–∏—Å–æ–∫ whitelist –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
WHITELIST = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "ADAUSDT", "XRPUSDT", "DOGEUSDT",
    "DOTUSDT", "MATICUSDT", "AVAXUSDT", "SHIBUSDT", "LINKUSDT", "TRXUSDT", "LTCUSDT",
    "BCHUSDT", "ATOMUSDT", "XLMUSDT", "APTUSDT", "ARBUSDT", "OPUSDT", "IMXUSDT", "PEPEUSDT",
    "RNDRUSDT", "1000SATSUSDT", "TIAUSDT", "WIFUSDT", "JASMYUSDT", "NOTUSDT", "STRKUSDT", "TRUMPUSDT"
]
# –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∑ Binance
def get_current_balance():
    try:
        balances = client.get_account()["balances"]
        result = []
        for asset in balances:
            asset_name = asset["asset"]
            free = float(asset["free"])
            if free > 0:
                symbol = asset_name + "USDT"
                try:
                    price = float(client.get_symbol_ticker(symbol=symbol)["price"])
                    result.append({
                        "symbol": symbol,
                        "asset": asset_name,
                        "amount": free,
                        "price": price,
                        "value": round(free * price, 2)
                    })
                except:
                    continue
        return result
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É: {str(e)}")
        return []
# –û—Ç—Ä–∏–º–∞—Ç–∏ whitelist –º–æ–Ω–µ—Ç –∑ —Ä–∏–Ω–∫—É Binance
def get_market_whitelist_data():
    try:
        tickers = client.ticker_24hr()
        filtered = []
        for t in tickers:
            symbol = t["symbol"]
            if symbol in WHITELIST and symbol.endswith("USDT"):
                try:
                    price_change_percent = float(t["priceChangePercent"])
                    volume = float(t["quoteVolume"])
                    filtered.append({
                        "symbol": symbol,
                        "price_change_percent": price_change_percent,
                        "volume": volume
                    })
                except:
                    continue
        return sorted(filtered, key=lambda x: x["price_change_percent"], reverse=True)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —Ä–∏–Ω–∫—É: {str(e)}")
        return []
# –ü–æ–±—É–¥—É–≤–∞—Ç–∏ GPT-–∑–≤—ñ—Ç
def build_gpt_report(balance_summary, market_whitelist):
    try:
        total_usdt = sum([coin["usdt_value"] for coin in balance_summary])
        sorted_market = market_whitelist[:5]
        sorted_balance = sorted(balance_summary, key=lambda x: x["usdt_value"], reverse=True)

        prompt = f"""
–¢–≤–æ—è —Ä–æ–ª—å ‚Äî GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –°—Ñ–æ—Ä–º—É–π –∫–æ—Ä–æ—Ç–∫–∏–π, —á—ñ—Ç–∫–∏–π –∑–≤—ñ—Ç –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º:

1. –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:
{json.dumps(balance_summary, indent=2, ensure_ascii=False)}

2. –¢–æ–ø –º–æ–Ω–µ—Ç–∏ –∑ whitelist –∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª–æ–º:
{json.dumps(sorted_market, indent=2, ensure_ascii=False)}

–ó–∞–≤–¥–∞–Ω–Ω—è:
- –Ø–∫—ñ –º–æ–Ω–µ—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å—É –≤–∞—Ä—Ç–æ –ø—Ä–æ–¥–∞—Ç–∏, —á–æ–º—É?
- –Ø–∫—ñ –º–æ–Ω–µ—Ç–∏ –∑ whitelist –∫—É–ø–∏—Ç–∏, —á–æ–º—É?
- –Ø–∫–∏–π –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ —É % —ñ USDT —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏?
- –î–æ–¥–∞–π –∫–æ–º–∞–Ω–¥–∏ —Ç–∏–ø—É /confirmsellXRP /confirmbuyBTC
- –û–±–æ–≤ º—è–∑–∫–æ–≤–æ –¥–æ–¥–∞–π Stop Loss —ñ Take Profit –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫—É–ø—ñ–≤–ª—ñ
- –¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –ª–∞–∫–æ–Ω—ñ—á–Ω–æ

–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}
"""

        chat_completion = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª—ñ—Ç–∏–∫ Binance."},
                {"role": "user", "content": prompt}
            ]
        )
        return chat_completion.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó GPT-–∑–≤—ñ—Ç—É: {str(e)}")
        return "‚ùå GPT-–∑–≤—ñ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."
# –°—Ç–≤–æ—Ä–∏—Ç–∏ .md —Ñ–∞–π–ª –∑–≤—ñ—Ç—É
def save_report_to_file(gpt_text, prefix="daily_report"):
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        time_str = datetime.now().strftime("%H-%M")
        report_dir = os.path.join("reports", today)
        os.makedirs(report_dir, exist_ok=True)
        filename = os.path.join(report_dir, f"{prefix}_{time_str}.md")
        with open(filename, "w", encoding="utf-8") as f:
            f.write(gpt_text)
        return filename
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è GPT-–∑–≤—ñ—Ç—É: {str(e)}")
        return None


# –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç —É Telegram
def send_report_to_telegram(report_text, report_file):
    try:
        if TELEGRAM_TOKEN and ADMIN_CHAT_ID:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            requests.post(url, data={"chat_id": ADMIN_CHAT_ID, "text": report_text, "parse_mode": "Markdown"})
            if os.path.exists(report_file):
                files = {"document": open(report_file, "rb")}
                doc_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendDocument"
                requests.post(doc_url, data={"chat_id": ADMIN_CHAT_ID}, files=files)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –≤ Telegram: {str(e)}")
# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
def main():
    try:
        log_message("üîÅ –ó–∞–ø—É—Å–∫ daily_analysis.py")

        # –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
        balances = get_binance_balances()

        # –ö—Ä–æ–∫ 2: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        market_data = get_market_data()

        # –ö—Ä–æ–∫ 3: –ü–æ–±—É–¥–æ–≤–∞ –∑–≤—ñ—Ç—É GPT
        report_text = generate_gpt_report(balances, market_data)

        # –ö—Ä–æ–∫ 4: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É
        report_file = save_report_to_file(report_text)
        if report_file:
            send_report_to_telegram(report_text, report_file)
            log_message(f"‚úÖ –ó–≤—ñ—Ç —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ: {report_file}")
        else:
            log_message("‚ö†Ô∏è –ó–≤—ñ—Ç –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    except Exception as err:
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞–Ω–∞–ª—ñ–∑—ñ: {str(err)}"
        logging.error(error_message)
        send_telegram(error_message)
if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logging.exception("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∞:")
        try:
            send_telegram(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ: {str(e)}")
        except:
            pass
