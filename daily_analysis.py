import os
from dotenv import load_dotenv
from binance.client import Client
import openai
import requests

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö ---
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ ---
client = openai.OpenAI(api_key=OPENAI_API_KEY)
binance_client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)

# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è GPT-–∑–≤—ñ—Ç—É ---
def generate_report():
    account = binance_client.get_account()
    balances = {a['asset']: float(a['free']) for a in account['balances'] if float(a['free']) > 0.0}
    print("üìä BALANCES:", balances)

    sorted_balances = dict(sorted(balances.items(), key=lambda x: x[1], reverse=True))
    total = sum(sorted_balances.values())

    prompt = f"""
üß† –¢–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫ —ñ —Ç—Ä–µ–π–¥–µ—Ä.

–ê–Ω–∞–ª—ñ–∑—É–π –º—ñ–π Binance-–ø–æ—Ä—Ç—Ñ–µ–ª—å: {sorted_balances}

üî¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤—ñ–≤ (–Ω–µ –≤ USD): {total:.2f}

–ó–∞–≤–¥–∞–Ω–Ω—è:
1. –í–∏–∑–Ω–∞—á–∏ **—Ç–æ–ø-3 –º–æ–Ω–µ—Ç–∏** –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ç–∞ –≤—ñ–¥—Å–æ—Ç–∫–æ–º –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—ñ.
2. –û—Ü—ñ–Ω–∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—é (—á–∏ –Ω–µ–º–∞—î –ø–µ—Ä–µ–≤–∞–≥–∏ –æ–¥–Ω—ñ—î—ó –º–æ–Ω–µ—Ç–∏).
3. –°—Ç–≤–æ—Ä–∏ —Ç–∞–±–ª–∏—Ü—é –∑ –∫–æ–∂–Ω–æ—ó –º–æ–Ω–µ—Ç–∏:
   | –ú–æ–Ω–µ—Ç–∞ | –ö—ñ–ª—å–∫—ñ—Å—Ç—å | –°—Ç—Ä–∞—Ç–µ–≥—ñ—è (Buy/Sell/Hold) | Stop-loss (%) |
4. –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:
   - –Ø–∫—ñ 2 –º–æ–Ω–µ—Ç–∏ –ø—Ä–æ–¥–∞—Ç–∏ ‚Äî –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
   - –Ø–∫—ñ 2 –¥–æ–∫—É–ø–∏—Ç–∏ ‚Äî –∑ CoinMarketCap Top 50.
5. –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –¥—ñ–π (–¥–æ 5 –ø—É–Ω–∫—Ç—ñ–≤), —á—ñ—Ç–∫–æ, –ª–∞–∫–æ–Ω—ñ—á–Ω–æ.

üîê –í—Ä–∞—Ö—É–π –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å, –æ–±—Å—è–≥–∏, —Ä–∏–∑–∏–∫–∏, —Ä–µ–ø—É—Ç–∞—Ü—ñ—é –º–æ–Ω–µ—Ç.

üìã –§–æ—Ä–º–∞—Ç—É–π –∫—Ä–∞—Å–∏–≤–æ. Markdown, —Ç–∞–±–ª–∏—Ü—ñ, –±—É–ª—ñ—Ç–∏.
"""
    print("üì® PROMPT GPT:", prompt)

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()

# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É ---
def save_report(text):
    with open("daily_report.txt", "w") as f:
        f.write(text)
    with open("daily.log", "a") as log:
        log.write(text + "\n\n")

# --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram ---
def send_to_telegram(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    requests.post(url, data=data)

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ---
if __name__ == "__main__":
    try:
        report = generate_report()
        print(report)
        save_report(report)
        send_to_telegram(report)
        send_to_telegram("‚úÖ *Daily analysis completed*. Check `daily_report.txt` or `daily.log`.")
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        send_to_telegram(f"‚ùå *GPT-–∑–≤—ñ—Ç –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:* `{e}`")
