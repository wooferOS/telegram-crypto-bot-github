import os
import datetime
import json
import requests
from openai import OpenAI
from binance.client import Client
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
openai_client = OpenAI(api_key=OPENAI_API_KEY)
binance_client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)

def get_binance_balances():
    balances = binance_client.get_account()["balances"]
    wallet = {}
    for b in balances:
        asset = b["asset"]
        free = float(b["free"])
        if free > 0:
            wallet[asset] = free
    return wallet

def generate_wallet_report(wallet):
    lines = [f"{asset}: {amount}" for asset, amount in wallet.items()]
    return "\n".join(lines)
def calculate_profit_percentage(today_wallet, yesterday_wallet):
    changes = []
    for asset, amount in today_wallet.items():
        y_amount = yesterday_wallet.get(asset, 0)
        if y_amount > 0:
            change = ((amount - y_amount) / y_amount) * 100
            changes.append(f"{asset}: {change:.2f}%")
    return "\n".join(changes) if changes else "üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è."

def generate_gpt_report(wallet_report):
    today_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")

    # –ó—á–∏—Ç—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    history_file = "trade_history.json"
    if os.path.exists(history_file):
        with open(history_file, "r") as f:
            trade_history = json.load(f)
    else:
        trade_history = []

    history_summary = "\n".join([f"{item['date']}: {item['action']} {item['asset']} {item['amount']}" for item in trade_history[-5:]]) or "–Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è"

    prompt = f"""
–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª—ñ—Ç–∏–∫. –¢–∏ –∞–Ω–∞–ª—ñ–∑—É—î—à —É–≤–µ—Å—å –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ä–∏–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–Ω–µ –ª–∏—à–µ Binance) —Ç–∞ –¥–∞—î—à –∫–æ—Ä–æ—Ç–∫–∏–π —ñ –≤–ø–µ–≤–Ω–µ–Ω–∏–π –∑–≤—ñ—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—ó. –ù–µ –ø–∏—à–∏ —Ñ—Ä–∞–∑ —Ç–∏–ø—É ¬´—è –ª–∏—à–µ –ø—Ä–∏–ø—É—Å–∫–∞—é¬ª. –§–æ—Ä–º—É–π —á—ñ—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑.

–î–∞—Ç–∞: {today_str}

–ü–û–†–¢–§–ï–õ–¨:
{wallet_report}

–û–°–¢–ê–ù–ù–Ü –û–ü–ï–†–ê–¶–Ü–á:
{history_summary}

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü:
üìä –ó–í–Ü–¢ –ù–ê {today_str}

üîª –ü–†–û–î–ê–ñ:
1. <–º–æ–Ω–µ—Ç–∞> ‚Äî <—Å—É–º–∞> ‚âà $<—Ü—ñ–Ω–∞>  
–ü—Ä–∏—á–∏–Ω–∞: <–∫–æ—Ä–æ—Ç–∫–æ>.  
/confirm_sell_<–º–æ–Ω–µ—Ç–∞>

üîº –ö–£–ü–Ü–í–õ–Ø:
1. <–º–æ–Ω–µ—Ç–∞> ‚Äî <—Å—É–º–∞> ‚âà $<—Ü—ñ–Ω–∞>  
–°—Ç–æ–ø-–ª–æ—Å—Å: -X%, –¢–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç: +Y%  
/confirm_buy_<–º–æ–Ω–µ—Ç–∞>

üìà –û–ß–Ü–ö–£–í–ê–ù–ò–ô –ü–†–ò–ë–£–¢–û–ö:
- –ü—Ä–æ–¥–∞–∂ <–º–æ–Ω–µ—Ç–∞>: +$  
+ –ö—É–ø—ñ–≤–ª—è <–º–æ–Ω–µ—Ç–∞>: +$  
= –†–∞–∑–æ–º: +$ / +X%

üß† –ü—Ä–æ–≥–Ω–æ–∑: <—è–∫—ñ –º–æ–Ω–µ—Ç–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ñ, —è–∫—ñ –≤ —Ä–∏–∑–∏–∫—É>.
üíæ –£—Å—ñ –¥—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ.
"""

    response = openai_client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "–¢–∏ ‚Äî —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª—ñ—Ç–∏–∫, —â–æ —Ñ–æ—Ä–º—É—î –≤–ø–µ–≤–Ω–µ–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–∏–Ω–∫—É –π —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–µ–π–¥—ñ–≤."},
            {"role": "user", "content": prompt}
        ]
    )

    return response.choices[0].message.content.strip()



def save_report_to_file(text, folder="reports"):
    now = datetime.datetime.now()
    date_str = now.strftime("%Y-%m-%d")
    time_str = now.strftime("%H-%M")
    folder_path = os.path.join(folder, date_str)
    os.makedirs(folder_path, exist_ok=True)
    file_path = os.path.join(folder_path, f"daily_report_{time_str}.md")
    with open(file_path, "w") as f:
        f.write(text)
    return file_path
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram: {e}")

def log_event(text, logfile="daily.log"):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{timestamp}] {text}\n"
    with open(logfile, "a") as f:
        f.write(line)

def save_trade_history(assets: list, action: str):
    # assets = [{"asset": "ADA", "amount": 100}, {"asset": "ETH", "amount": 0.3}]
    history_file = "trade_history.json"
    if os.path.exists(history_file):
        with open(history_file, "r") as f:
            trade_history = json.load(f)
    else:
        trade_history = []

    for item in assets:
        trade_history.append({
            "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M"),
            "action": action,
            "asset": item["asset"],
            "amount": item["amount"]
        })

    with open(history_file, "w") as f:
        json.dump(trade_history, f, indent=2)

def main():
    log_event("üîÅ –ü–æ—á–∞—Ç–æ–∫ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É...")
    today_wallet = get_binance_balances()
    wallet_report = generate_wallet_report(today_wallet)

    gpt_text = generate_gpt_report(wallet_report)

    full_report = f"""üìä *–ó–≤—ñ—Ç –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—é*

üí∞ *–ë–∞–ª–∞–Ω—Å:*
{wallet_report}

üìà *GPT-–∑–≤—ñ—Ç:*
{gpt_text}
"""
    file_path = save_report_to_file(full_report)
    send_telegram_message(full_report)
    log_event("‚úÖ –ó–≤—ñ—Ç —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
def save_report_to_file(text):
    today = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M")
    folder = "reports"
    os.makedirs(folder, exist_ok=True)
    path = os.path.join(folder, f"daily_report_{today}.md")
    with open(path, "w") as f:
        f.write(text)
    return path

if __name__ == "__main__":
    main()
