import os
from dotenv import load_dotenv
from binance.client import Client
from openai import OpenAI
import requests

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö ---
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ ---
client = OpenAI(api_key=OPENAI_API_KEY)
binance_client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)

# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è GPT-–∑–≤—ñ—Ç—É ---
def generate_report():
    account = binance_client.get_account()
    balances = {a['asset']: float(a['free']) for a in account['balances'] if float(a['free']) > 0.0}
    print("üìä BALANCES:", balances)

    sorted_balances = dict(sorted(balances.items(), key=lambda x: x[1], reverse=True))
    total = sum(sorted_balances.values())

    prompt = f"""
üîç –¢–∏ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª—ñ—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
{sorted_balances}
–°—É–º–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤—ñ–≤: {total:.2f}

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–≤—ñ—Ç—É:
1. –¢–û–ü-3 –º–æ–Ω–µ—Ç–∏ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ç–∞ –≤—ñ–¥—Å–æ—Ç–∫–æ–º —É –ø–æ—Ä—Ç—Ñ–µ–ª—ñ.
2. –î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è: —á–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π?
3. –Ø–∫—ñ 2 –º–æ–Ω–µ—Ç–∏ –≤–∞—Ä—Ç–æ –ø—Ä–æ–¥–∞—Ç–∏? –Ø–∫—ñ 2 –∫—É–ø–∏—Ç–∏? –ß–æ–º—É?
4. –¢–∞–±–ª–∏—Ü—è Stop-Loss —É %, –ø—Ä–∏–∫–ª–∞–¥:
   | –ú–æ–Ω–µ—Ç–∞ | –ö—ñ–ª—å–∫—ñ—Å—Ç—å | Stop-Loss (%) |
5. –ü—ñ–¥—Å—É–º–∫–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó (3 –¥—ñ—ó –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ).

–§–æ—Ä–º–∞—Ç—É–π —É Markdown.
"""

    print("üì® PROMPT GPT:", prompt)

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()

# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É ---
def save_report(text):
    with open("daily_report.txt", "w") as f:
        f.write(text)
    with open("daily.log", "a") as log:
        log.write(text + "\n\n")

# --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram ---
def send_to_telegram(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    requests.post(url, data=data)

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ---
if __name__ == "__main__":
    try:
        report = generate_report()
        print(report)
        save_report(report)
        send_to_telegram(report)
        send_to_telegram("‚úÖ *Daily analysis script completed*. –ü–µ—Ä–µ–≤—ñ—Ä —Ñ–∞–π–ª `daily.log`.")
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        send_to_telegram(f"‚ùå *GPT-–ó–≤—ñ—Ç –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:* `{e}`")
