import os
import json
import logging
from datetime import datetime
from dotenv import load_dotenv
from binance.client import Client
from openai import OpenAI
from telegram import Bot
import requests

# üîê –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)
tg_bot = Bot(token=TELEGRAM_TOKEN)
openai = OpenAI(api_key=OPENAI_API_KEY)

# ‚ö™ WHITELIST –º–æ–Ω–µ—Ç
WHITELIST = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT", "ADAUSDT", "DOGEUSDT", "AVAXUSDT",
    "DOTUSDT", "TRXUSDT", "LINKUSDT", "MATICUSDT", "UNIUSDT", "LTCUSDT", "BCHUSDT", "XLMUSDT",
    "ATOMUSDT", "ETCUSDT", "FILUSDT", "HBARUSDT", "VETUSDT", "ICPUSDT", "RUNEUSDT", "SANDUSDT",
    "EGLDUSDT", "AAVEUSDT", "NEARUSDT", "FTMUSDT", "AXSUSDT", "THETAUSDT"
]

EXCLUDED_ASSETS = ["USDT", "BUSD", "TUSD", "USDC", "FDUSD"]

LOG_FILE = "daily.log"
# üìâ –ö—É—Ä—Å USDT ‚Üí UAH (–º–æ–∂–Ω–∞ –ø—ñ–¥'—î–¥–Ω–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π API)
def get_usdt_to_uah_rate():
    return 39.2  # –ü—Ä–∏–∫–ª–∞–¥: –∫—É—Ä—Å –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É –∞–±–æ MonoBank

# üìä –û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å
def get_binance_balance():
    balances = client.get_account()["balances"]
    result = {}
    for asset in balances:
        total = float(asset["free"]) + float(asset["locked"])
        if total > 0:
            result[asset["asset"]] = round(total, 6)
    return result

# üíµ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏ (–≤—Å—ñ –ø–∞—Ä–∏)
def get_current_prices():
    prices = client.get_all_tickers()
    return {p["symbol"]: float(p["price"]) for p in prices}

# üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–Ω—ñ–º–æ–∫ –±–∞–ª–∞–Ω—Å—É
def load_previous_snapshot():
    try:
        with open("balance_snapshot.json", "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∑–Ω—ñ–º–æ–∫
def save_current_snapshot(snapshot):
    with open("balance_snapshot.json", "w") as f:
        json.dump(snapshot, f, indent=2)
# üßæ –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É Markdown
def format_report(balance_info, total_usdt, sell_recommendations, buy_recommendations):
    lines = ["*üìä –ó–≤—ñ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é Binance:*", ""]

    for item in balance_info:
        lines.append(f"üîπ *{item['symbol']}*")
        lines.append(f"  - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {item['amount']}")
        lines.append(f"  - –í–∞—Ä—Ç—ñ—Å—Ç—å: {item['usdt_value']:.2f} USDT ‚âà {item['uah_value']:.0f} –≥—Ä–Ω")
        lines.append(f"  - –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: {item['avg_price']:.4f} USDT")
        lines.append(f"  - PNL: {item['pnl']:+.2f} USDT ({item['pnl_percent']:+.2f}%)")
        lines.append("")

    lines.append(f"*üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* {total_usdt:.2f} USDT\n")

    if sell_recommendations:
        lines.append("*üìâ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –ø—Ä–æ–¥–∞–∂:*")
        for rec in sell_recommendations:
            lines.append(f"üîª {rec['symbol']} ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ —Å–ª–∞–±–∫–∏–π, –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª –Ω–∏–∑—å–∫–∏–π")
        lines.append("")

    if buy_recommendations:
        lines.append("*üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –∫—É–ø—ñ–≤–ª—é:*")
        for rec in buy_recommendations:
            lines.append(f"üü¢ {rec['symbol']} ‚Äî –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å: {rec['expected_profit']:.2f}%")
            lines.append(f"    ‚ñ™ –°—Ç–æ–ø-–ª–æ—Å—Å: {rec['stop_loss']} ‚ñ™ –¢–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç: {rec['take_profit']}")
        lines.append("")

    return "\n".join(lines)

# üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç —É Telegram
def send_report_via_telegram(message):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": ADMIN_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        }
        requests.post(url, json=payload)
    except Exception as e:
        print(f"‚ùå Telegram Error: {e}")
def run_daily_analysis():
    try:
        balance_data_raw = get_binance_balance()
        if not balance_data_raw:
            send_report_via_telegram("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –∑ Binance.")
            return

        prices = get_current_prices()
        if not prices:
            send_report_via_telegram("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –∑ Binance.")
            return

        rate_uah = get_usdt_to_uah_rate()
        previous_snapshot = load_previous_snapshot()
        save_current_snapshot(balance_data_raw)

        total_usdt = 0
        balance_info = []

        for symbol, amount in balance_data_raw.items():
            if symbol in EXCLUDED_ASSETS:
                continue
            price_key = f"{symbol}USDT"
            if price_key not in prices:
                continue
            price = prices[price_key]
            usdt_value = round(amount * price, 2)
            avg_price = previous_snapshot.get(symbol, {}).get("avg_price", price)
            pnl = round((price - avg_price) * amount, 2)
            pnl_percent = round((pnl / (avg_price * amount)) * 100, 2) if avg_price else 0
            uah_value = round(usdt_value * rate_uah)

            total_usdt += usdt_value
            balance_info.append({
                "symbol": symbol,
                "amount": amount,
                "usdt_value": usdt_value,
                "avg_price": avg_price,
                "pnl": pnl,
                "pnl_percent": pnl_percent,
                "uah_value": uah_value
            })

        # üîé –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–º–æ–≤–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π (–∑–∞–≥–ª—É—à–∫–∏, –∑–∞–º—ñ–Ω–∏—Ç–∏ GPT)
        sell_recommendations = [i for i in balance_info if i["pnl_percent"] < -5]
        buy_recommendations = [{
            "symbol": sym.replace("USDT", ""),
            "expected_profit": 4.5,
            "stop_loss": "3%",
            "take_profit": "7%"
        } for sym in WHITELIST[:3]]  # —Ç–æ–ø-3

        report = format_report(balance_info, total_usdt, sell_recommendations, buy_recommendations)
        send_report_via_telegram(report)
        return report

    except Exception as e:
        send_report_via_telegram(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞–Ω–∞–ª—ñ–∑—ñ: {str(e)}")
        return None

# ‚ñ∂Ô∏è –õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    run_daily_analysis()
