import os
import json
import time
import logging
from datetime import datetime
from binance.client import Client
from openai import OpenAI
import requests


BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(filename="daily.log", level=logging.INFO, format="%(asctime)s %(levelname)s:%(message)s")

def log_message(message):
    logging.info(message)
    print(message)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI —Ç–∞ Binance –∫–ª—ñ—î–Ω—Ç—ñ–≤
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
binance_client = Client(os.getenv("BINANCE_API_KEY"), os.getenv("BINANCE_SECRET_KEY"))

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
WHITELIST = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT", "ADAUSDT", "DOGEUSDT", "AVAXUSDT",
    "DOTUSDT", "LINKUSDT", "TRXUSDT", "MATICUSDT", "SHIBUSDT", "LTCUSDT", "BCHUSDT", "TONUSDT",
    "ICPUSDT", "NEARUSDT", "APTUSDT", "HBARUSDT", "FILUSDT", "INJUSDT", "RNDRUSDT", "ARBUSDT",
    "SUIUSDT", "PEPEUSDT", "1000SATSUSDT", "NOTUSDT", "STRKUSDT", "TRUMPUSDT"
]
UAH_RATE = 43.0  # –∫—É—Ä—Å USDT –¥–æ –≥—Ä–∏–≤–Ω—ñ (–Ω–∞–ª–∞—à—Ç–æ–≤—É—î—Ç—å—Å—è –≤—Ä—É—á–Ω—É)

def send_telegram(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    requests.post(url, json={"chat_id": ADMIN_CHAT_ID, "text": text, "parse_mode": "Markdown"})
def get_balance():
    balances = binance_client.get_account()["balances"]
    result = {}
    for asset in balances:
        symbol = asset["asset"]
        free = float(asset["free"])
        if free > 0:
            if symbol == "USDT":
                result[symbol] = free
            else:
                try:
                    price = float(binance_client.get_symbol_ticker(symbol=f"{symbol}USDT")["price"])
                    result[symbol] = {"amount": free, "price": price}
                except:
                    continue
    client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
tickers = client.get_ticker_24hr()  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∏–∫–µ—Ä—ñ–≤ –∑–∞ 24h

def get_market_data():
    btc_data = client.get_ticker(symbol="BTCUSDT")
    market_data = {}
    for item in tickers:
        symbol = item["symbol"]
        if symbol in WHITELIST:
            try:
                market_data[symbol] = {
                    "price": float(item["lastPrice"]),
                    "volume": float(item["quoteVolume"]),
                    "change": float(item["priceChangePercent"])
                }
            except Exception as e:
                continue
    return market_data

def analyze_profit_opportunities(balance_data, market_data):
    sell_suggestions = []
    buy_suggestions = []
    usdt_balance = balance_data.get("USDT", 0)

    for asset, info in balance_data.items():
        if asset == "USDT":
            continue
        symbol = f"{asset}USDT"
        if symbol in market_data:
            change = market_data[symbol]["change"]
            if change < -1:
                sell_suggestions.append({
                    "symbol": asset,
                    "amount": info["amount"],
                    "price": info["price"],
                    "change": change,
                    "cmd": f"/confirmsell{asset}"
                })

    # buy_suggestions –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ market_data
    return sell_suggestions, buy_suggestions


    for symbol, info in market_data.items():
        asset = symbol.replace("USDT", "")
        if info["change"] > 0.5:
            buy_suggestions.append({
                "symbol": asset,
                "price": info["price"],
                "change": info["change"],
                "volume": info["volume"],
                "cmd": f"/confirmbuy{asset}"
            })

    return sell_suggestions, buy_suggestions, usdt_balance
def build_markdown_report(balance_data, sell_list, buy_list, usdt_balance):
    lines = [f"üìä GPT-–∑–≤—ñ—Ç (—Å—Ç–∞–Ω–æ–º –Ω–∞ {datetime.now().strftime('%Y-%m-%d %H:%M')})", ""]

    lines.append("üí∞ *–ë–∞–ª–∞–Ω—Å:*")
    for asset, info in balance_data.items():
        if asset == "USDT":
            lines.append(f"- USDT: {info:.2f} ‚âà {info * UAH_RATE:.2f}‚Ç¥")
        else:
            total = info["amount"] * info["price"]
            lines.append(f"- {asset}: {info['amount']:.4f} √ó {info['price']:.4f} = {total:.2f} USDT ‚âà {total * UAH_RATE:.2f}‚Ç¥")

    lines.append("")

    if sell_list:
        lines.append("üîª *–ü—Ä–æ–¥–∞—Ç–∏:*")
        for item in sell_list:
            lines.append(f"- {item['symbol']}: {item['amount']:.2f} √ó {item['price']:.4f} ‚âà {item['amount'] * item['price']:.2f} USDT")
            lines.append(f"  –ü—Ä–∏—á–∏–Ω–∞: –∑–º—ñ–Ω–∞ {item['change']:.2f}%, –∫–æ–º–∞–Ω–¥–∞: `{item['cmd']}`")
    else:
        lines.append("üîª –ü—Ä–æ–¥–∞—Ç–∏: –Ω–µ–º–∞—î —è–≤–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")

    lines.append("")
    if buy_list:
        lines.append("üîº *–ö—É–ø–∏—Ç–∏ (–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏):*")
        for item in buy_list:
            expected_profit = usdt_balance * item["change"] / 100
            lines.append(f"- {item['symbol']}: –∑–º—ñ–Ω–∞ {item['change']:.2f}%, –æ–± º—î–º: {int(item['volume'])}")
            lines.append(f"  –û—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ ‚âà {expected_profit:.2f} USDT, –∫–æ–º–∞–Ω–¥–∞: `{item['cmd']}`")
    else:
        lines.append("üîº –ö—É–ø–∏—Ç–∏: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤")

    lines.append("")
    expected_total_profit = sum(usdt_balance * item["change"] / 100 for item in buy_list)
    lines.append(f"üìà *–û—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –Ω–∞ –¥–æ–±—É:* ‚âà {expected_total_profit:.2f} USDT")

    return "\n".join(lines)
def save_report(report_text):
    now = datetime.now()
    date_str = now.strftime("%Y-%m-%d")
    time_str = now.strftime("%H-%M")

    folder = f"reports/{date_str}"
    os.makedirs(folder, exist_ok=True)

    filepath = f"{folder}/daily_report_{time_str}.md"
    with open(filepath, "w") as f:
        f.write(report_text)

    return filepath
def main():
    try:
        log_message("üîÅ –ó–∞–ø—É—Å–∫ daily_analysis.py")

        market_data = get_market_data()
        balance_data = get_balance()
        sell_list, buy_list, usdt_balance = analyze_profit_opportunities(balance_data, market_data)
        report_text = build_markdown_report(balance_data, sell_list, buy_list, usdt_balance)
        file_path = save_report(report_text)

        log_message("‚úÖ –ó–≤—ñ—Ç —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        send_telegram("‚úÖ *GPT-–∑–≤—ñ—Ç —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ.* –ù–∞–¥—Å–∏–ª–∞—é —Ñ–∞–π–ª...")
        with open(file_path, "rb") as f:
            requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendDocument",
                data={"chat_id": ADMIN_CHAT_ID},
                files={"document": f}
            )
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞–Ω–∞–ª—ñ–∑—ñ: {str(e)}")
        try:
            send_telegram(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ: {str(e)}")
        except:
            pass
if __name__ == "__main__":
    main()
