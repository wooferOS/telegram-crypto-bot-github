import os
import datetime
from dotenv import load_dotenv
from openai import OpenAI
from binance.client import Client

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

openai_client = OpenAI(api_key=OPENAI_API_KEY)
binance_client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)

# –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤—ñ–≤
def get_wallet_assets():
    balances = binance_client.get_account()["balances"]
    wallet = {}
    for asset in balances:
        asset_name = asset["asset"]
        free_amount = float(asset["free"])
        if free_amount > 0:
            wallet[asset_name] = free_amount
    return wallet

# –§–æ—Ä–º—É—î–º–æ Markdown-–∑–≤—ñ—Ç –±–∞–ª–∞–Ω—Å—É
def format_wallet(wallet: dict) -> str:
    lines = [f"{asset}: {amount}" for asset, amount in wallet.items()]
    return "\n".join(lines)

# –ì–µ–Ω–µ—Ä—É—î–º–æ GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫—É
def generate_gpt_analysis(wallet_report: str) -> str:
    try:
        prompt = (
            f"–û—Å—å –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç–æ–≥–∞–º–∞–Ω—Ü—è –Ω–∞ Binance:\n\n{wallet_report}\n\n"
            f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü—ñ –∞–∫—Ç–∏–≤–∏ —ñ –Ω–∞–¥–∞–π –∫–æ—Ä–æ—Ç–∫—ñ –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ —Ç–æ–≥–æ, —â–æ –¥–æ—Ü—ñ–ª—å–Ω–æ –ø—Ä–æ–¥–∞—Ç–∏, "
            f"—â–æ –∑–∞–ª–∏—à–∏—Ç–∏, –∞ —â–æ –∫—É–ø–∏—Ç–∏. –í—Ä–∞—Ö—É–π –º–æ–∂–ª–∏–≤—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å, –ø–æ—Ç–æ—á–Ω—ñ —Ç—Ä–µ–Ω–¥–∏ —Ç–∞ —Ä–∏–∑–∏–∫–∏. "
            f"–î–æ–¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å—ñ–≤ —ñ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É. "
            f"–ù–∞–ø–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ."
        )

        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª—ñ—Ç–∏–∫."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.7,
            max_tokens=800,
        )

        return response.choices[0].message.content.strip()

    except Exception as e:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ GPT: {str(e)}"

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É
def main():
    print("üìä –ì–µ–Ω–µ—Ä—É—î–º–æ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç...")

    today = datetime.date.today().isoformat()
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")

    wallet = get_wallet_assets()
    wallet_report = format_wallet(wallet)
    gpt_summary = generate_gpt_analysis(wallet_report)

    markdown = f"""# üìä –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç ({timestamp})

üíº –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å Binance:
{wallet_report}

üìà GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:
{gpt_summary}
"""

    report_filename = f"daily_report_{today}.md"
    with open(report_filename, "w", encoding="utf-8") as f:
        f.write(markdown)

    print(f"‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {report_filename}")

if __name__ == "__main__":
    main()
