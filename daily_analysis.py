import os
import json
import logging
from datetime import datetime
from binance.client import Client
from binance.exceptions import BinanceAPIException
from openai import OpenAI
import requests
from telegram import Bot
from telegram.constants import ParseMode
import traceback
import asyncio
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)
tg_bot = Bot(token=TELEGRAM_TOKEN)
openai = OpenAI(api_key=OPENAI_API_KEY)

# –°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä
WHITELIST = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT", "ADAUSDT", "DOGEUSDT", "AVAXUSDT",
    "DOTUSDT", "TRXUSDT", "LINKUSDT", "MATICUSDT", "UNIUSDT", "LTCUSDT", "BCHUSDT", "XLMUSDT",
    "ATOMUSDT", "ETCUSDT", "FILUSDT", "HBARUSDT", "VETUSDT", "ICPUSDT", "RUNEUSDT", "SANDUSDT",
    "EGLDUSDT", "AAVEUSDT", "NEARUSDT", "FTMUSDT", "AXSUSDT", "THETAUSDT"
]

# –í–∞–ª—é—Ç–∏, —è–∫—ñ –Ω–µ —Å–ª—ñ–¥ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞—Ç–∏–≤–Ω—ñ —Å—Ç–µ–π–±–ª–∫–æ—ó–Ω–∏)
EXCLUDED_ASSETS = ["USDT", "BUSD", "TUSD", "USDC", "FDUSD"]

# –®–ª—è—Ö –¥–æ –ª–æ–≥-—Ñ–∞–π–ª—É
LOG_FILE = "daily.log"

# –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å USDT –¥–æ UAH (–ø—Å–µ–≤–¥–æ-—Ä–µ–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É)
def get_usdt_to_uah_rate():
    return 39.2  # üü° –º–æ–∂–Ω–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ API –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ –∞–±–æ MonoBank
# –û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç—É
def get_binance_balance():
    balances = client.get_account()["balances"]
    result = {}
    for asset in balances:
        free = float(asset["free"])
        locked = float(asset["locked"])
        total = free + locked
        if total > 0:
            result[asset["asset"]] = round(total, 6)
    return result
# –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –ø–∞—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BTCUSDT)
def get_symbol_price(symbol):
    ticker = client.get_symbol_ticker(symbol=symbol)
    return float(ticker["price"])
# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –≤ Telegram
def format_report(balance_info, sell_recommendations, buy_recommendations):
    lines = []
    lines.append("*üìä –ó–≤—ñ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é:*")
    lines.append("")
    total_usdt = 0

    for asset in balance_info:
        amount = asset["amount"]
        usdt_value = asset["usdt_value"]
        avg_price = asset["avg_price"]
        pnl = asset["pnl"]
        pnl_percent = asset["pnl_percent"]
        ua_value = asset["uah_value"]
        total_usdt += usdt_value

        lines.append(f"üîπ {asset['symbol']}")
        lines.append(f"  - –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {amount}")
        lines.append(f"  - –í–∞—Ä—Ç—ñ—Å—Ç—å: {usdt_value:.2f} USDT ‚âà {ua_value:.0f} –≥—Ä–Ω")
        lines.append(f"  - –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: {avg_price:.4f} USDT")
        lines.append(f"  - PNL: {pnl:+.2f} USDT ({pnl_percent:+.2f}%)")
        lines.append("")

    lines.append(f"*–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* {total_usdt:.2f} USDT")
    lines.append("")

    if sell_recommendations:
        lines.append("*üìâ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –ø—Ä–æ–¥–∞–∂:*")
        for rec in sell_recommendations:
            lines.append(f"üîª {rec['symbol']} ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ —Å–ª–∞–±–∫–∏–π, –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª –Ω–∏–∑—å–∫–∏–π")
        lines.append("")

    if buy_recommendations:
        lines.append("*üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –∫—É–ø—ñ–≤–ª—é:*")
        for rec in buy_recommendations:
            lines.append(
                f"üü¢ {rec['symbol']} ‚Äî –æ—á—ñ–∫—É–≤–∞–Ω–∞ –¥–æ—Ö—ñ–¥–Ω—ñ—Å—Ç—å: {rec['expected_profit']:.2f}%"
            )
            lines.append(f"    ‚ñ™ –°—Ç–æ–ø-–ª–æ—Å—Å: {rec['stop_loss']} ‚ñ™ –¢–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç: {rec['take_profit']}")
        lines.append("")

    return "\n".join(lines)
# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –≤ Telegram
def send_report_via_telegram(message):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": ADMIN_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown",
        }
        response = requests.post(url, json=payload)
        response.raise_for_status()
    except Exception as e:
        log.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –≤ Telegram: {e}")
# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def run_daily_analysis():
    log.info("üîç –ó–∞–ø—É—Å–∫ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É...")

    balance_data = get_binance_balance()
    if not balance_data:
        send_report_via_telegram("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –∑ Binance.")
        return

    prices = get_current_prices()
    if not prices:
        send_report_via_telegram("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –∑ Binance.")
        return

    # üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª–∞–Ω—Å –¥–ª—è PNL
    previous_snapshot = load_previous_snapshot()
    save_current_snapshot(balance_data)

    # üìä –û–±—Ä–æ–±–∫–∞ –±–∞–ª–∞–Ω—Å—É
    report_lines = []
    total_usdt = 0
    total_usdt_yesterday = 0
    for asset, data in balance_data.items():
        price = prices.get(f"{asset}USDT", 0)
        value = round(data["free"] * price, 2)
        avg_price = data.get("avg_price", price)
        pnl = round((price - avg_price) * data["free"], 2)
        pnl_pct = round((price - avg_price) / avg_price * 100, 2) if avg_price else 0
        pnl_text = f"{pnl} USDT ({pnl_pct}%)"

        yesterday_value = previous_snapshot.get(asset, {}).get("value", 0)
        change_pct = round((value - yesterday_value) / yesterday_value * 100, 2) if yesterday_value else 0
        report_lines.append(f"*{asset}*: {data['free']} ‚Üí {value} USDT | –°–µ—Ä–µ–¥–Ω—è: {avg_price} | PNL: {pnl_text} | –ó–º—ñ–Ω–∞: {change_pct}%")

        total_usdt += value
        total_usdt_yesterday += yesterday_value

    # üìà –ó–∞–≥–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–∞
    total_change_pct = round((total_usdt - total_usdt_yesterday) / total_usdt_yesterday * 100, 2) if total_usdt_yesterday else 0
    report_header = f"*üìä –ó–≤—ñ—Ç Binance*\n\nüíº –ü–æ—Ç–æ—á–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_usdt} USDT\nüìâ –ó–º—ñ–Ω–∞ –∑–∞ –¥–æ–±—É: {total_change_pct}%\n\n"

    full_report = report_header + "\n".join(report_lines)
    send_report_via_telegram(full_report)

# ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–Ω—ñ–º–æ–∫ –±–∞–ª–∞–Ω—Å—É
def load_previous_snapshot():
    try:
        with open("balance_snapshot.json", "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# ‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∑–Ω—ñ–º–æ–∫ –±–∞–ª–∞–Ω—Å—É
def save_current_snapshot(snapshot):
    with open("balance_snapshot.json", "w") as f:
        json.dump(snapshot, f, indent=2)

if __name__ == "__main__":
    run_daily_analysis()
