# daily_analysis.py ‚Äî –æ–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ GPT-–∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫—É

import os
import json
from datetime import datetime
import requests
from dotenv import load_dotenv
from binance.client import Client
from openai import OpenAI
from telegram import Bot

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
UAH_RATE = 43.0  # —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π –∫—É—Ä—Å –≥—Ä–∏–≤–Ω—ñ

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)
bot = Bot(token=TELEGRAM_TOKEN)
openai = OpenAI(api_key=OPENAI_API_KEY)

# Whitelist –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
WHITELIST = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "SOLUSDT", "XRPUSDT", "DOTUSDT", "AVAXUSDT",
    "DOGEUSDT", "TRXUSDT", "LINKUSDT", "LTCUSDT", "SHIBUSDT", "UNIUSDT", "FETUSDT", "OPUSDT",
    "INJUSDT", "PEPEUSDT", "WLDUSDT", "SUIUSDT", "1000SATSUSDT", "STRKUSDT", "NOTUSDT", "TRUMPUSDT",
    "XRPTUSD", "GMTUSDT", "ARBUSDT", "HBARUSDT", "ATOMUSDT", "GMTUSDC"
]
# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω –ø–æ —Ä–∏–Ω–∫—É –¥–ª—è whitelist –º–æ–Ω–µ—Ç
def get_market_data():
    changes = {}
    tickers = client.get_ticker()
    for t in tickers:
        symbol = t['symbol']
        if symbol in WHITELIST:
            changes[symbol] = {
                "price": float(t["lastPrice"]),
                "percent_change": float(t["priceChangePercent"]),
                "volume": float(t["volume"])
            }
    return changes

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≥–∞–º–∞–Ω—Ü—è –∑ Binance
def get_balance():
    account = client.get_account()
    balances = {}
    for b in account['balances']:
        asset = b['asset']
        free = float(b['free'])
        if free > 0:
            if asset + "USDT" in WHITELIST:
                balances[asset] = free
    return balances
# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è GPT-–∑–≤—ñ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–∞–ª–∞–Ω—Å—É —Ç–∞ —Ä–∏–Ω–∫—É
def generate_gpt_report(market_data, balances):
    report_lines = []
    report_lines.append("üìä –ó–≤—ñ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—é (—â–æ–¥–µ–Ω–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞)")
    report_lines.append("")
    report_lines.append("üí∞ –ë–∞–ª–∞–Ω—Å:")

    for symbol, qty in balances.items():
        symbol_full = symbol + "USDT"
        if symbol_full in market_data:
            price = market_data[symbol_full]["price"]
            usdt_value = qty * price
            uah_value = usdt_value * UAH_RATE
            report_lines.append(f"{symbol}: {qty:.4f} √ó {price:.6f} = {usdt_value:.2f} USDT ‚âà {uah_value:.2f}‚Ç¥")

    report_lines.append("")
    report_lines.append("üîº –ö—É–ø–∏—Ç–∏ (–ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏):")

    top_to_buy = sorted(market_data.items(), key=lambda x: x[1]["percent_change"], reverse=True)[:3]
    for symbol, data in top_to_buy:
        coin = symbol.replace("USDT", "").replace("TUSD", "").replace("USDC", "")
        report_lines.append(f"- {coin}: {data['percent_change']}% –∑–∞ –¥–æ–±—É, –æ–± º—î–º: {data['volume']:.0f}")
        report_lines.append(f"  –ö–æ–º–∞–Ω–¥–∞: /confirmbuy{coin}")

    return "\n".join(report_lines)
# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –∞–Ω–∞–ª—ñ–∑ + Telegram-–∑–≤—ñ—Ç
def main():
    try:
        market_data = get_market_data()
        balances = get_balance()
        report = generate_gpt_report(market_data, balances)
        path = save_report(report)
        send_telegram(report)
        return report, path
    except Exception as e:
        send_telegram(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞–Ω–∞–ª—ñ–∑—ñ: {str(e)}")
        return None

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –≤ Telegram
def send_telegram(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": ADMIN_CHAT_ID,
        "text": text,
        "parse_mode": "Markdown"
    }
    try:
        requests.post(url, data=data)
    except Exception as e:
        print("‚ùå Telegram error:", e)
# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –≤ –ø–∞–ø–∫—É reports/YYYY-MM-DD/daily_report_HH-MM.md
def save_report(text):
    now = datetime.now()
    folder = f"reports/{now.strftime('%Y-%m-%d')}"
    os.makedirs(folder, exist_ok=True)
    path = f"{folder}/daily_report_{now.strftime('%H-%M')}.md"
    with open(path, "w") as f:
        f.write(text)
    return path

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    main()
