import os
import json
import datetime
import requests
from dotenv import load_dotenv
from binance_api import get_current_portfolio
from typing import Dict, List, Tuple, Optional

load_dotenv()

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
THRESHOLD_PNL_PERCENT = 1.0  # ¬±1%

HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {OPENAI_API_KEY}",
}

def get_usdt_to_uah_rate() -> float:
    url = "https://api.binance.com/api/v3/ticker/price?symbol=USDTUAH"
    try:
        response = requests.get(url)
        return float(response.json()["price"])
    except Exception:
        return 40.0  # fallback
        
def get_historical_data() -> Dict[str, float]:
    try:
        with open("historical_data.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}


def run_daily_analysis(current: Dict[str, float], historical: Dict[str, float]) -> Tuple[List[Dict], float]:
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å, –æ–±—á–∏—Å–ª—é—î PnL.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤—ñ–≤ –∑ –ø—Ä–∏–±—É—Ç–∫–∞–º–∏/–∑–±–∏—Ç–∫–∞–º–∏ —ñ –∑–∞–≥–∞–ª—å–Ω–∏–π % –∑–º—ñ–Ω.
    """
    analysis = []
    total_initial_value = 0.0
    total_current_value = 0.0

    for asset, current_amount in current.items():
        initial_amount = historical.get(asset, 0.0)

        if initial_amount == 0.0 and current_amount == 0.0:
            continue

        price_change = current_amount - initial_amount
        pnl_percent = (price_change / initial_amount) * 100 if initial_amount else 100.0

        if abs(pnl_percent) < THRESHOLD_PNL_PERCENT:
            continue  # üîΩ –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤—Å–µ –º–µ–Ω—à–µ ¬±1%

        analysis.append({
            'asset': asset,
            'initial': round(initial_amount, 2),
            'current': round(current_amount, 2),
            'pnl_percent': round(pnl_percent, 2)
        })

        total_initial_value += initial_amount
        total_current_value += current_amount

    total_pnl_percent = ((total_current_value - total_initial_value) / total_initial_value) * 100 if total_initial_value else 0.0
    return analysis, round(total_pnl_percent, 2)

def format_analysis_report(analysis: List[Dict], total_pnl: float, usdt_to_uah: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –∑–≤—ñ—Ç –¥–ª—è Telegram-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    if not analysis:
        return "ü§ñ –£—Å—ñ –∞–∫—Ç–∏–≤–∏ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ, –∑–º—ñ–Ω –Ω–µ–º–∞—î –ø–æ–Ω–∞–¥ ¬±1%."

    report_lines = [
        "üìä *–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é Binance*",
        "",
        f"üí∞ *–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* `{total_pnl:+.2f}%`",
        f"üá∫üá∏‚Üíüá∫üá¶ *–ö—É—Ä—Å USDT –¥–æ UAH:* `{usdt_to_uah:.2f}`",
        "",
        "*–î–µ—Ç–∞–ª—ñ –ø–æ –∞–∫—Ç–∏–≤–∞—Ö:*"
    ]

    for entry in analysis:
        asset = entry.get('asset', 'N/A')
        initial = entry.get('initial', 0)
        current = entry.get('current', 0)
        pnl = entry.get('pnl_percent', 0.0)
        status_emoji = "üü¢" if pnl > 1 else "üî¥" if pnl < -1 else "‚ö™Ô∏è"
        report_lines.append(f"{status_emoji} `{asset}` ‚Äî {pnl:+.2f}% (–∑ {initial} –¥–æ {current})")

    return "\n".join(report_lines)



if __name__ == "__main__":
    # –¶–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ª–∏—à–µ —è–∫—â–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ daily_analysis.py –Ω–∞–ø—Ä—è–º—É
    print("–¶–µ–π —Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫—É.")
