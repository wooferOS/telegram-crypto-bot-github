import os
from binance.client import Client
from datetime import datetime
from openai import OpenAI

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env
from dotenv import load_dotenv
load_dotenv()

# Binance API
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# OpenAI API
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Telegram Chat ID (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
binance_client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)
openai_client = OpenAI(api_key=OPENAI_API_KEY)

def get_wallet_report():
    balances = binance_client.get_account()["balances"]
    wallet_lines = []
    for asset in balances:
        free = float(asset["free"])
        if free > 0:
            formatted = f"{asset['asset']}: {free}"
            wallet_lines.append(formatted)
    return "\n".join(wallet_lines)

def generate_gpt_report(wallet_text: str):
    prompt = f"""
–¶–µ –º—ñ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:
{wallet_text}

–ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü—å–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è. –©–æ –≤–∏–≥–ª—è–¥–∞—î –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ –Ω–∞ –∫—É–ø—ñ–≤–ª—é –∞–±–æ –ø—Ä–æ–¥–∞–∂? –î–æ–¥–∞–π Stop Loss —ñ Take Profit –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É, —è–∫—â–æ –¥–æ—Ä–µ—á–Ω–æ.

–ù–µ –¥–∞–≤–∞–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–æ—Ä–∞–¥ ‚Äî –ª–∏—à–µ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó.
"""
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞: {e}"

def main():
    print("üìä –ì–µ–Ω–µ—Ä—É—î–º–æ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç...")

    today = datetime.today().strftime('%Y-%m-%d')
    timestamp = datetime.now().strftime('%d.%m.%Y %H:%M')

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
    wallet_report = get_wallet_report()

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è GPT –∞–Ω–∞–ª—ñ–∑—É
    gpt_summary = generate_gpt_report(wallet_report)

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É
    markdown = f"""# üìä –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç ({timestamp})

## üíº –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å Binance:
{wallet_report}

## üìà GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:
{gpt_summary}
"""

    report_filename = f"daily_report_{today}.md"
    with open(report_filename, "w", encoding="utf-8") as f:
        f.write(markdown)

    print(f"‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {report_filename}")

if __name__ == "__main__":
    main()
