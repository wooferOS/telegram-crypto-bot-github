import os
import datetime
import json
import requests
from openai import OpenAI
from binance.client import Client
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
openai_client = OpenAI(api_key=OPENAI_API_KEY)
binance_client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)

def get_binance_balances():
    balances = binance_client.get_account()["balances"]
    wallet = {}
    for b in balances:
        asset = b["asset"]
        free = float(b["free"])
        if free > 0:
            wallet[asset] = free
    return wallet

def generate_wallet_report(wallet):
    lines = [f"{asset}: {amount}" for asset, amount in wallet.items()]
    return "\n".join(lines)
def calculate_profit_percentage(today_wallet, yesterday_wallet):
    changes = []
    for asset, amount in today_wallet.items():
        y_amount = yesterday_wallet.get(asset, 0)
        if y_amount > 0:
            change = ((amount - y_amount) / y_amount) * 100
            changes.append(f"{asset}: {change:.2f}%")
    return "\n".join(changes) if changes else "üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è."

def generate_gpt_report(wallet_report):
    prompt = f"""
–¢–∏ ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫ –∫—Ä–∏–ø—Ç–æ—Ä–∏–Ω–∫—É. –ù–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ä—Ç—Ñ–µ–ª—é –Ω–∏–∂—á–µ –Ω–∞–ø–∏—à–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —Å—Ç–∏—Å–ª–∏–π, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∑–≤—ñ—Ç –±–µ–∑ –∑–∞—Å—Ç–µ—Ä–µ–∂–µ–Ω—å. –ë–µ–∑ —Ñ—Ä–∞–∑ —Ç–∏–ø—É ¬´—è –Ω–µ –µ–∫—Å–ø–µ—Ä—Ç¬ª —á–∏ ¬´–Ω–µ –º–æ–∂—É¬ª. –ü—Ä–æ—Å—Ç–æ —Å—Ñ–æ—Ä–º—É–π —Ä—ñ—à–µ–Ω–Ω—è.

–ü–æ—Ä—Ç—Ñ–µ–ª—å:
{wallet_report}

1. –Ø–∫—ñ –º–æ–Ω–µ—Ç–∏ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑ —ñ —á–æ–º—É?
2. –Ø–∫—ñ –∫—É–ø–∏—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ —ñ —á–æ–º—É?
3. –Ø–∫—ñ –æ–±'—î–º–∏ –∫—É–ø—ñ–≤–ª—ñ?
4. –°—Ç–æ–ø-–ª–æ—Å–∏ (%), —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç–∏ (%)
5. –û—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –Ω–∞ –¥–æ–±—É (% —ñ $)
6. –ü—Ä–æ–≥–Ω–æ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ (—è–∫—ñ –º–æ–Ω–µ—Ç–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ñ)

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: —Ç—ñ–ª—å–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å –∞–±–æ –∑–∞—Å—Ç–µ—Ä–µ–∂–µ–Ω—å. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, —è–∫ —Ç—Ä–µ–π–¥–µ—Ä. –î–æ–¥–∞–π –∫–æ–º–∞–Ω–¥–∏ /confirm_buy —ñ /confirm_sell –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ.
"""

    completion = openai_client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "–¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π GPT-–∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ —Ç—Ä–µ–π–¥–∏–Ω–≥—É, —è–∫–∏–π –Ω–∞–¥–∞—î —á—ñ—Ç–∫—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –±–µ–∑ –∑–∞–π–≤–∏—Ö –æ–±–µ—Ä–µ–∂–Ω–æ—Å—Ç–µ–π."},
            {"role": "user", "content": prompt}
        ]
    )
    return completion.choices[0].message.content.strip()


def save_report_to_file(text, folder="reports"):
    now = datetime.datetime.now()
    date_str = now.strftime("%Y-%m-%d")
    time_str = now.strftime("%H-%M")
    folder_path = os.path.join(folder, date_str)
    os.makedirs(folder_path, exist_ok=True)
    file_path = os.path.join(folder_path, f"daily_report_{time_str}.md")
    with open(file_path, "w") as f:
        f.write(text)
    return file_path
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram: {e}")

def log_event(text, logfile="daily.log"):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{timestamp}] {text}\n"
    with open(logfile, "a") as f:
        f.write(line)

def main():
    log_event("üîÅ –ü–æ—á–∞—Ç–æ–∫ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É...")
    today_wallet = get_binance_balances()
    wallet_report = generate_wallet_report(today_wallet)

    gpt_text = generate_gpt_report(wallet_report)

    full_report = f"""üìä *–ó–≤—ñ—Ç –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—é*

üí∞ *–ë–∞–ª–∞–Ω—Å:*
{wallet_report}

üìà *GPT-–∑–≤—ñ—Ç:*
{gpt_text}
"""
    file_path = save_report_to_file(full_report)
    send_telegram_message(full_report)
    log_event("‚úÖ –ó–≤—ñ—Ç —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
def save_report_to_file(text):
    today = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M")
    folder = "reports"
    os.makedirs(folder, exist_ok=True)
    path = os.path.join(folder, f"daily_report_{today}.md")
    with open(path, "w") as f:
        f.write(text)
    return path

if __name__ == "__main__":
    main()
