import os
from datetime import datetime
from dotenv import load_dotenv
from binance.client import Client
from openai import OpenAI

load_dotenv()

client = Client(os.environ["BINANCE_API_KEY"], os.environ["BINANCE_SECRET_KEY"])
openai_client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

def get_binance_balances():
    balances = client.get_account()["balances"]
    wallet = {}
    for b in balances:
        asset = b["asset"]
        free = float(b["free"])
        if free > 0 and asset not in ["USDT", "BUSD", "TUSD"]:
            wallet[asset] = free
    return wallet

def get_prices():
    tickers = client.get_all_tickers()
    return {t['symbol']: float(t['price']) for t in tickers}

def generate_wallet_report():
    balances = get_binance_balances()
    prices = get_prices()
    lines = []
    total_usdt = 0

    for asset, amount in balances.items():
        symbol = f"{asset}USDT"
        price = prices.get(symbol)
        if price:
            value = round(amount * price, 2)
            total_usdt += value
            lines.append(f"‚Ä¢ {asset}: {amount} ‚âà {value} USDT")

    lines.append(f"\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {round(total_usdt, 2)} USDT")
    return "\n".join(lines), total_usdt

def generate_gpt_report(wallet_report):
    messages = [
        {"role": "system", "content": "–¢–∏ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª—ñ—Ç–∏–∫. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ä—Ç—Ñ–µ–ª—è: —â–æ –ø—Ä–æ–¥–∞—Ç–∏, —â–æ –∫—É–ø–∏—Ç–∏, —è–∫—ñ —Ä–∏–∑–∏–∫–∏."},
        {"role": "user", "content": f"–û—Å—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n{wallet_report}\n\n–î–∞–π –ø–æ—Ä–∞–¥–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ—Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥—É –∑ —Ä—ñ–≤–Ω—è–º–∏ —Å—Ç–æ–ø-–ª–æ—Å—É —ñ —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç—É."}
    ]
    response = openai_client.chat.completions.create(
        model="gpt-4",
        messages=messages
    )
    return response.choices[0].message.content.strip()

def save_report(content):
    filename = f"daily_report_{datetime.now().strftime('%Y-%m-%d')}.md"
    with open(filename, "w") as f:
        f.write(content)
    print(f"‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {filename}")

def main():
    print("üìä –ì–µ–Ω–µ—Ä—É—î–º–æ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç...")
    wallet_report, total_usdt = generate_wallet_report()
    try:
        gpt_summary = generate_gpt_report(wallet_report)
    except Exception as e:
        gpt_summary = f"‚ùå –ü–æ–º–∏–ª–∫–∞ GPT: {e}"

    final_report = (
        f"# üìà –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç ({datetime.now().strftime('%Y-%m-%d %H:%M')})\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {round(total_usdt, 2)} USDT\n\n"
        f"## üìä –î–µ—Ç–∞–ª—ñ –ø–æ—Ä—Ç—Ñ–µ–ª—è:\n{wallet_report}\n\n"
        f"## üìà GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:\n{gpt_summary}\n\n"
        f"üëâ –î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ–π:\n/confirm_buy –∞–±–æ /confirm_sell"
    )

    save_report(final_report)

if __name__ == "__main__":
    main()
