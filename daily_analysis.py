import os
from openai import OpenAI
from binance.client import Client
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
binance_client = Client(os.getenv("BINANCE_API_KEY"), os.getenv("BINANCE_SECRET_KEY"))
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
balances = binance_client.get_account()["balances"]
wallet_summary = "\n".join(
    [f"{asset['asset']}: {float(asset['free'])}" for asset in balances if float(asset["free"]) > 0]
)

# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
now = datetime.now().strftime("%d.%m.%Y %H:%M")
report_text = f"üìä –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç ({now})\n\n"
report_text += f"üíº –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å Binance:\n{wallet_summary}\n\n"

# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è prompt –¥–æ GPT
prompt = f"""
–¶–µ –º—ñ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:
{wallet_summary}

–ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: —â–æ –≤–∏–≥–ª—è–¥–∞—î –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ –∞–±–æ –ø—Ä–æ–¥–∞–∂—É?
–î–æ–¥–∞–π Stop Loss —ñ Take Profit, —è–∫—â–æ –¥–æ—Ä–µ—á–Ω–æ.

–ù–µ –¥–∞–≤–∞–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—É –ø–æ—Ä–∞–¥—É ‚Äî –ª–∏—à–µ —Ç–µ—Ö–Ω—ñ—á–Ω—É –æ—Ü—ñ–Ω–∫—É.
"""

# GPT-–≤—ñ–¥–ø–æ–≤—ñ–¥—å
try:
    response = openai_client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "–¢–∏ ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."},
            {"role": "user", "content": prompt}
        ]
    )
    gpt_reply = response.choices[0].message.content.strip()
    report_text += f"üìà GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:\n{gpt_reply}\n"
except Exception as e:
    report_text += f"üìà GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:\n‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}\n"

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
filename = f"daily_report_{datetime.now().strftime('%Y-%m-%d')}.md"
with open(filename, "w") as file:
    file.write(report_text)

# –í–∏–≤—ñ–¥
print(report_text)
