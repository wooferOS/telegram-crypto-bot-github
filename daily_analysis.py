# ‚úÖ –ï—Ç–∞–ª–æ–Ω–Ω–∞ –ª–æ–≥—ñ–∫–∞ GPT-–∑–≤—ñ—Ç—É /zarobyty (v2.0) ‚Äî –ø–æ–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
# –ú–µ—Ç–∞: –º–∞–∫—Å–∏–º—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫ –∑–∞ –¥–æ–±—É, –¥—ñ—é—á–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É Binance

import datetime
import pytz
import statistics

from binance_api import (
    get_binance_balances,
    get_symbol_price,
    get_price_history_24h as get_price_history,
    get_price_history_24h as get_klines,
    get_my_trades,
    get_top_tokens,
)
from gpt import ask_gpt
from utils import convert_to_uah, calculate_rr, calculate_indicators, get_sector, analyze_btc_correlation
from keyboards import zarobyty_keyboard


def generate_zarobyty_report():
    balances = get_binance_balances()
    usdt_balance = balances.get("USDT", 0)

    token_data = []
    now = datetime.datetime.now(pytz.timezone("Europe/Kyiv"))

    for symbol, amount in balances.items():
        if symbol == "USDT" or amount == 0:
            continue

        price = get_symbol_price(symbol)
        uah_value = convert_to_uah(price * amount)
        price_history = get_price_history(symbol)
        klines = get_klines(symbol)
        trades = get_my_trades(symbol)

        indicators = calculate_indicators(klines)
        average_buy_price = sum([t['price'] * t['qty'] for t in trades]) / sum([t['qty'] for t in trades]) if trades else price
        pnl_percent = ((price - average_buy_price) / average_buy_price) * 100
        rr = calculate_rr(klines)
        volume_24h = price_history.get("quoteVolume", 0)
        sector = get_sector(symbol)
        btc_corr = analyze_btc_correlation(symbol)

        token_data.append({
            "symbol": symbol,
            "amount": amount,
            "uah_value": round(uah_value, 2),
            "price": price,
            "pnl": round(pnl_percent, 2),
            "rr": rr,
            "indicators": indicators,
            "volume": volume_24h,
            "sector": sector,
            "btc_corr": btc_corr
        })

    sell_recommendations = [t for t in token_data if t['pnl'] > 1.0]

    symbols_from_balance = set(t['symbol'].upper() for t in token_data)
    market_symbols = set(s.upper() for s in get_top_tokens(limit=50))
    symbols_to_analyze = symbols_from_balance.union(market_symbols)

    buy_candidates = []
    for symbol in symbols_to_analyze:
        price = get_symbol_price(symbol)
        klines = get_klines(symbol)
        indicators = calculate_indicators(klines)
        rr = calculate_rr(klines)
        sector = get_sector(symbol)
        price_stats = get_price_history(symbol)
        volume = price_stats.get("quoteVolume", 0)
        volumes = [float(k[5]) for k in klines]
        avg_volume = statistics.fmean(volumes[-20:]) if volumes else 0
        btc_corr = analyze_btc_correlation(symbol)

        support = indicators.get("support")
        resistance = indicators.get("resistance")
        is_near_resistance = price >= resistance * 0.98 if resistance else False

        ema_uptrend = (
            indicators.get("EMA_5", 0) > indicators.get("EMA_8", 0) > indicators.get("EMA_13", 0)
        )

        # ‚úÖ Smart Buy Filter:
        # - RSI < 30 (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å)
        # - MACD == 'bullish' (—Å–∏–≥–Ω–∞–ª –Ω–∞ —Ä–æ–∑–≤–æ—Ä–æ—Ç)
        # - RR > 2.0 (—Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –ø—Ä–∏–±—É—Ç–æ–∫/—Ä–∏–∑–∏–∫)
        # - Volume > average (–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∏–ª–∏ —Ç—Ä–µ–Ω–¥—É)
        # - EMA 5 > EMA 8 > EMA 13 (–∞–ø-—Ç—Ä–µ–Ω–¥)
        # - –ù–µ –±—ñ–ª—è resistance (–æ–ø—ñ—Ä)
        # - BTC correlation < 0.5 (–Ω–µ–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å)
        if (
            indicators["RSI"] < 30
            and indicators["MACD"] == "bullish"
            and rr > 2
            and volume > avg_volume
            and btc_corr < 0.5
            and not is_near_resistance
            and ema_uptrend
        ):
            stop_price = round(price * 0.97, 4)
            buy_candidates.append({
                "symbol": symbol,
                "price": price,
                "stop": stop_price,
                "rr": rr,
                "volume": volume,
                "sector": sector,
                "rsi": indicators["RSI"],
                "macd": indicators["MACD"],
                "btc_corr": btc_corr,
                "support": support,
                "resistance": resistance
            })

    report_lines = []
    report_lines.append(f"üïí –ó–≤—ñ—Ç —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ: {now.strftime('%Y-%m-%d %H:%M:%S')} (Kyiv)")
    report_lines.append("\nüí∞ –ë–∞–ª–∞–Ω—Å:")
    for t in token_data:
        report_lines.append(f"{t['symbol']}: {t['amount']} ‚âà ~{t['uah_value']}‚Ç¥")

    total_uah = round(sum([t['uah_value'] for t in token_data]) + convert_to_uah(usdt_balance), 2)
    report_lines.append(f"\n–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {total_uah}‚Ç¥")
    report_lines.append("‚∏ª")

    if sell_recommendations:
        report_lines.append("üí∏ –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø—Ä–æ–¥–∞—Ç–∏:")
        for t in sell_recommendations:
            report_lines.append(f"{t['symbol']}: {t['amount']} ‚âà ~{t['uah_value']}‚Ç¥ (PnL = {t['pnl']}%)")
    else:
        report_lines.append("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –ø—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É")
    report_lines.append("‚∏ª")

    if buy_candidates:
        report_lines.append("üìà –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∫—É–ø–∏—Ç–∏:")
        for b in buy_candidates:
            indicators = calculate_indicators(get_klines(b['symbol']))
            report_lines.append(
                f"{b['symbol']}: —ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏ {round(usdt_balance / len(buy_candidates), 2)} USDT (—Å—Ç–æ–ø: {b['stop']})\nRR = {b['rr']:.2f}, RSI = {b['rsi']:.1f}, MACD = {b['macd']}, –û–±—Å—è–≥ = {int(b['volume'])}, –°–µ–∫—Ç–æ—Ä = {b['sector']}, BTC Corr = {b['btc_corr']:.2f}, –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ = {int(b['support'])}, –û–ø—ñ—Ä = {int(b['resistance'])}\nEMA 5/8/13 = {indicators['EMA_5']:.4f} / {indicators['EMA_8']:.4f} / {indicators['EMA_13']:.4f}"
            )
    else:
        report_lines.append("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤—ñ–≤, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —É–º–æ–≤–∞–º Smart Buy Filter")
    report_lines.append("‚∏ª")

    expected_profit_usdt = round((sum([b['rr'] for b in buy_candidates]) / len(buy_candidates)) * (usdt_balance / 100) if buy_candidates else 0, 2)
    expected_profit_uah = convert_to_uah(expected_profit_usdt)
    report_lines.append(f"üíπ –û—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {expected_profit_usdt} USDT ‚âà ~{expected_profit_uah}‚Ç¥ –∑–∞ 24–≥")
    report_lines.append("‚∏ª")

    summary = ask_gpt("–°—Ñ–æ—Ä–º—É–π –∫–æ—Ä–æ—Ç–∫–∏–π —ñ–Ω–≤–µ—Å—Ç-–∑–≤—ñ—Ç –Ω–∞ 24–≥ –¥–ª—è –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—è", context="\n".join(report_lines))
    report_lines.append(f"üß† –ü—Ä–æ–≥–Ω–æ–∑ GPT:\n{summary}")

    return "\n".join(report_lines), zarobyty_keyboard(buy_candidates, sell_recommendations)
