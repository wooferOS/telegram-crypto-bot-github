# daily_analysis.py ‚Äî –æ–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ GPT-–∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫—É

import os
import json
from datetime import datetime
import requests
from dotenv import load_dotenv
from binance.client import Client
from openai import OpenAI
from telegram import Bot

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
UAH_RATE = 43.0  # —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π –∫—É—Ä—Å –≥—Ä–∏–≤–Ω—ñ

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)
bot = Bot(token=TELEGRAM_TOKEN)
openai = OpenAI(api_key=OPENAI_API_KEY)

# Whitelist –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
WHITELIST = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "SOLUSDT", "XRPUSDT", "DOTUSDT", "AVAXUSDT",
    "DOGEUSDT", "TRXUSDT", "LINKUSDT", "LTCUSDT", "SHIBUSDT", "UNIUSDT", "FETUSDT", "OPUSDT",
    "INJUSDT", "PEPEUSDT", "WLDUSDT", "SUIUSDT", "1000SATSUSDT", "STRKUSDT", "NOTUSDT", "TRUMPUSDT",
    "XRPTUSD", "GMTUSDT", "ARBUSDT", "HBARUSDT", "ATOMUSDT", "GMTUSDC"
]
# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω –ø–æ —Ä–∏–Ω–∫—É –¥–ª—è whitelist –º–æ–Ω–µ—Ç
def get_market_data():
    changes = {}
    tickers = client.get_ticker()
    for t in tickers:
        symbol = t['symbol']
        if symbol in WHITELIST:
            changes[symbol] = {
                "price": float(t["lastPrice"]),
                "percent_change": float(t["priceChangePercent"]),
                "volume": float(t["volume"])
            }
    return changes

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≥–∞–º–∞–Ω—Ü—è –∑ Binance
def get_balance():
    account = client.get_account()
    balances = {}
    for b in account['balances']:
        asset = b['asset']
        free = float(b['free'])
        if free > 0:
            if asset + "USDT" in WHITELIST:
                balances[asset] = free
    return balances
# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è GPT-–∑–≤—ñ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–∞–ª–∞–Ω—Å—É —Ç–∞ —Ä–∏–Ω–∫—É
def generate_gpt_report(market_data, balances):
    """
    –§–æ—Ä–º—É—î GPT-–∑–≤—ñ—Ç:
    - –ê–Ω–∞–ª—ñ–∑ –∞–∫—Ç–∏–≤—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ
    - –í–∏–∑–Ω–∞—á–∞—î, —â–æ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏
    - –í–∏–∑–Ω–∞—á–∞—î, —â–æ –∫—É–ø—É–≤–∞—Ç–∏
    - –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
    """
    from datetime import datetime

    assets_to_sell = []
    assets_to_buy = []
    expected_profit_usdt = 0

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂ –∑ –±–∞–ª–∞–Ω—Å—É
    for asset, info in balances.items():
        if asset == "USDT":
            continue
        price_change = market_data.get(asset + "/USDT", {}).get("price_change_percent", 0)
        if price_change < -1:  # –ø—Ä–æ—Å—ñ–¥–∞–Ω–Ω—è –∑–∞ –¥–æ–±—É > 1%
            assets_to_sell.append((asset, info["amount"], info["value_usdt"], price_change))

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–π–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ñ—à—ñ –∞–∫—Ç–∏–≤–∏ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ
    potential_buys = []
    for pair, data in market_data.items():
        if "/USDT" not in pair:
            continue
        symbol = pair.replace("/USDT", "")
        if symbol in balances:
            continue  # –Ω–µ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –∫—É–ø–∏—Ç–∏ —Ç–µ, —â–æ –≤–∂–µ –º–∞—î–º–æ
        if data["price_change_percent"] > 2 and data["volume"] > 100000:
            potential_buys.append((symbol, data["price_change_percent"], data["volume"]))

    potential_buys.sort(key=lambda x: -x[1])
    assets_to_buy = potential_buys[:3]  # —Ç–æ–ø-3 –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ

    # –û—Ü—ñ–Ω–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É
    if assets_to_sell and assets_to_buy:
        sell_usdt = assets_to_sell[0][2]
        buy_gain_percent = assets_to_buy[0][1]
        expected_profit_usdt = round(sell_usdt * (buy_gain_percent / 100), 2)

    # –§–æ—Ä–º—É—î–º–æ Markdown-–∑–≤—ñ—Ç
    report = "üìä GPT-–∑–≤—ñ—Ç (—Å—Ç–∞–Ω–æ–º –Ω–∞ {})\n\n".format(datetime.now().strftime("%Y-%m-%d %H:%M"))

    if assets_to_sell:
        report += "üîª –ü—Ä–æ–¥–∞—Ç–∏:\n"
        for asset, amount, value, change in assets_to_sell:
            report += f"- {asset}: {amount:.4f} ‚âà {value:.2f} USDT ({change:+.2f}%)\n"
            report += f"  –ö–æ–º–∞–Ω–¥–∞: /confirmsell{asset}\n"
    else:
        report += "üîª –ü—Ä–æ–¥–∞—Ç–∏: –Ω–µ–º–∞—î —è–≤–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤\n"

    report += "\n"

    if assets_to_buy:
        report += "üîº –ö—É–ø–∏—Ç–∏:\n"
        for symbol, change, volume in assets_to_buy:
            report += f"- {symbol}: {change:+.2f}% –∑–∞ –¥–æ–±—É, –æ–± º—î–º: {volume}\n"
            report += f"  –ö–æ–º–∞–Ω–¥–∞: /confirmbuy{symbol}\n"
    else:
        report += "üîº –ö—É–ø–∏—Ç–∏: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤\n"

    report += "\nüìà –û—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: "
    report += f"+{expected_profit_usdt:.2f} USDT –∑–∞ –¥–æ–±—É\n" if expected_profit_usdt else "–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö\n"

    return report

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –∞–Ω–∞–ª—ñ–∑ + Telegram-–∑–≤—ñ—Ç
def main():
    try:
        market_data = get_market_data()
        balances = get_balance()
        report = generate_gpt_report(market_data, balances)
        path = save_report(report)
        send_telegram(report)
        return report, path
    except Exception as e:
        send_telegram(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞–Ω–∞–ª—ñ–∑—ñ: {str(e)}")
        return None

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –≤ Telegram
def send_telegram(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": ADMIN_CHAT_ID,
        "text": text,
        "parse_mode": "Markdown"
    }
    try:
        requests.post(url, data=data)
    except Exception as e:
        print("‚ùå Telegram error:", e)
# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –≤ –ø–∞–ø–∫—É reports/YYYY-MM-DD/daily_report_HH-MM.md
def save_report(text):
    now = datetime.now()
    folder = f"reports/{now.strftime('%Y-%m-%d')}"
    os.makedirs(folder, exist_ok=True)
    path = f"{folder}/daily_report_{now.strftime('%H-%M')}.md"
    with open(path, "w") as f:
        f.write(text)
    return path

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    main()
