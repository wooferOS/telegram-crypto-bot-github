import os
import datetime
from dotenv import load_dotenv
from binance.client import Client
from openai import OpenAI

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env –∑–º—ñ–Ω–Ω–∏—Ö
load_dotenv()
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
binance_client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)
openai_client = OpenAI(api_key=OPENAI_API_KEY)

def get_wallet_summary():
    balances = binance_client.get_account()["balances"]
    non_zero_balances = [
        asset for asset in balances if float(asset["free"]) > 0
    ]
    summary_lines = [
        f"{asset['asset']}: {float(asset['free'])}" for asset in non_zero_balances
    ]
    return "\n".join(summary_lines)

def generate_gpt_report(wallet_summary: str) -> str:
    prompt = f"""
–¢–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä-–∞–Ω–∞–ª—ñ—Ç–∏–∫. –ù–∏–∂—á–µ ‚Äî –º—ñ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—å:

{wallet_summary}

–î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É:
- –æ—Ü—ñ–Ω–∏—Ç–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É (–∫—É–ø–∏—Ç–∏, —Ç—Ä–∏–º–∞—Ç–∏, –ø—Ä–æ–¥–∞—Ç–∏);
- –¥–∞—Ç–∏ Stop Loss —ñ Take Profit;
- –Ω–µ –¥–∞–≤–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–æ—Ä–∞–¥, –ª–∏—à–µ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑;
- –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—ñ—Ç–∫–æ, —è–∫ —Ç–∞–±–ª–∏—Ü—é.
"""

    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –Ω–∞–¥–∞—î—à –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Ö–∞–Ω–∞–ª—ñ–∑."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ GPT:\n\n{str(e)}"

def main():
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    timestamp = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

    print(f"üìä –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç ({timestamp})\n")

    wallet_report = get_wallet_summary()
    print("üíº –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å Binance:")
    print(wallet_report + "\n")

    gpt_summary = generate_gpt_report(wallet_report)
    print("üìà GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:")
    print(gpt_summary + "\n")

    markdown = f"""# üìä –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç ({timestamp})

## üíº –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å Binance:
