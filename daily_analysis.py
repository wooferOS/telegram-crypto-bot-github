import os
from dotenv import load_dotenv
from binance.client import Client
import openai
import requests

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö ---
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ ---
binance_client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)

# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è GPT-–∑–≤—ñ—Ç—É ---
def generate_report():
    account = binance_client.get_account()
    balances = {a['asset']: float(a['free']) for a in account['balances'] if float(a['free']) > 0.0}
    print("üìä BALANCES:", balances)

    sorted_balances = dict(sorted(balances.items(), key=lambda x: x[1], reverse=True))
    total = sum(sorted_balances.values())

    prompt = f"""
üîç –¢–≤–æ—è —Ä–æ–ª—å ‚Äî –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª—ñ—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤–∫–∞–∑–∞–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç):
{sorted_balances}

üî¢ –°—É–º–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤—ñ–≤: {total:.2f} (–≤—ñ–¥–Ω–æ—Å–Ω–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ, –Ω–µ USD).

üìå –°—Ñ–æ—Ä–º—É–π –∑–≤—ñ—Ç –∑ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é:

1. **TOP-3 –º–æ–Ω–µ—Ç–∏** –∑–∞ –æ–±—Å—è–≥–æ–º, —ó—Ö % —É –ø–æ—Ä—Ç—Ñ–µ–ª—ñ.
2. **–î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è**: —á–∏ –Ω–∞–¥—Ç–æ –ø–æ—Ä—Ç—Ñ–µ–ª—å –∑–æ—Å–µ—Ä–µ–¥–∂–µ–Ω–∏–π –Ω–∞ –∫—ñ–ª—å–∫–æ—Ö –º–æ–Ω–µ—Ç–∞—Ö?
3. **–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:**
   - –Ø–∫—ñ **2 –º–æ–Ω–µ—Ç–∏ –≤–∞—Ä—Ç–æ –ø—Ä–æ–¥–∞—Ç–∏** (–Ω–∏–∑—å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª/–≤–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫)?
   - –Ø–∫—ñ **2 –≤–∞—Ä—Ç–æ –¥–æ–∫—É–ø–∏—Ç–∏** (—Å–∏–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó, —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —Ä—ñ—Å—Ç)?
4. **Stop-loss –¢–∞–±–ª–∏—Ü—è:**
   - –î–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–Ω–µ—Ç–∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π stop-loss (%), —è–∫ –≤–∏–≥–ª—è–¥–∞–ª–∞ –±–∏ —Ç–∞–±–ª–∏—Ü—è:
     | –ú–æ–Ω–µ—Ç–∞ | –ö—ñ–ª—å–∫—ñ—Å—Ç—å | Stop-Loss (%) |
5. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:** —Å—Ñ–æ—Ä–º—É–ª—é–π —á—ñ—Ç–∫–æ 3 –¥—ñ—ó (—Ç–∏–ø—É: –ø—Ä–æ–¥–∞–π X, –∫—É–ø–∏ Y, —Å–ª—ñ–¥–∫—É–π –∑–∞ Z).

üß† –§–æ—Ä–º–∞—Ç—É–π –∫—Ä–∞—Å–∏–≤–æ, —É –≤–∏–≥–ª—è–¥—ñ —á–∏—Ç–∞—î–º–æ–≥–æ –∑–≤—ñ—Ç—É.
üìà –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–∞—Ä–∫—É–≤–∞–Ω–Ω—è Markdown.
"""
    print("üì® PROMPT GPT:", prompt)

    chat_response = openai.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "user", "content": prompt}
        ]
    )
    return chat_response.choices[0].message.content.strip()

# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É ---
def save_report(text):
    with open("daily_report.txt", "w") as f:
        f.write(text)
    with open("daily.log", "a") as log:
        log.write(text + "\n\n")

# --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram ---
def send_to_telegram(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    requests.post(url, data=data)

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ---
if __name__ == "__main__":
    try:
        report = generate_report()
        print(report)
        save_report(report)
        send_to_telegram(report)
        send_to_telegram("‚úÖ *Daily analysis script completed*. –ü–µ—Ä–µ–≤—ñ—Ä —Ñ–∞–π–ª `daily.log`.")
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        send_to_telegram(f"‚ùå *GPT-–ó–≤—ñ—Ç –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:* `{e}`")
