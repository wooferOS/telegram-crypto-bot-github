import os
import json
import openai
import requests
from datetime import datetime, timedelta
from aiogram import Bot


openai.api_key = os.getenv("OPENAI_API_KEY")

BINANCE_API_BASE = "https://api.binance.com"
THRESHOLD_PNL_PERCENT = 1.0  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–º—ñ–Ω–∏ –¥–ª—è –¥—ñ—ó

def get_price(symbol: str) -> float:
    try:
        response = requests.get(f"{BINANCE_API_BASE}/api/v3/ticker/price", params={"symbol": symbol})
        return float(response.json()["price"])
    except Exception as e:
        print(f"‚ùå Error getting price for {symbol}: {e}")
        return 0.0

def load_previous_data(file_path: str = "daily_data.json") -> dict:
    if os.path.exists(file_path):
        with open(file_path, "r") as f:
            return json.load(f)
    return {}
def save_data(data: dict, file_path: str = "daily_data.json"):
    with open(file_path, "w") as f:
        json.dump(data, f, indent=4)

def get_current_balances():
    # –¶–µ –∑–∞–≥–ª—É—à–∫–∞ ‚Äî –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ Binance
    return {
        "BTC": {"amount": 0.1, "usdt_value": 6800},
        "ETH": {"amount": 0.5, "usdt_value": 1800},
        "USDT": {"amount": 1000, "usdt_value": 1000},
    }

def analyze_portfolio():
    current_data = get_current_balances()
    previous_data = load_previous_data()
    report_lines = []
    buy = []
    sell = []
    for asset, info in current_data.items():
        current_value = info["usdt_value"]
        prev_value = previous_data.get(asset, {}).get("usdt_value", current_value)
        pnl = current_value - prev_value
        pnl_percent = (pnl / prev_value) * 100 if prev_value != 0 else 0

        line = f"{asset}: {pnl:+.2f} USDT ({pnl_percent:+.2f}%)"
        report_lines.append(line)

        if pnl_percent < -THRESHOLD_PNL_PERCENT:
            sell.append(asset)
        elif pnl_percent > THRESHOLD_PNL_PERCENT:
            buy.append(asset)
    date_str = datetime.utcnow().strftime("%Y-%m-%d")
    report_header = f"üìä –ó–≤—ñ—Ç –∑–∞ {date_str}\n\n"
    report_body = "\n".join(report_lines)

    gpt_prompt = (
        f"{report_header}{report_body}\n\n"
        f"üîç –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∑–º—ñ–Ω–∏. –Ø–∫—ñ –∞–∫—Ç–∏–≤–∏ –≤–∞—Ä—Ç–æ –ø—Ä–æ–¥–∞—Ç–∏? –Ø–∫—ñ –∫—É–ø–∏—Ç–∏? "
        f"–°—Ñ–æ—Ä–º—É–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —ñ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º."
    )

    try:
        gpt_response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª—ñ—Ç–∏–∫."},
                {"role": "user", "content": gpt_prompt}
            ],
            temperature=0.7
        )
        gpt_result = gpt_response["choices"][0]["message"]["content"]
    except Exception as e:
        gpt_result = f"‚ö†Ô∏è GPT-–∑–≤—ñ—Ç –Ω–µ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ: {e}"
    result = {
        "date": date_str,
        "report": report_header + report_body,
        "gpt_analysis": gpt_result,
        "to_buy": buy,
        "to_sell": sell,
        "raw_data": current_data
    }

    save_data(current_data)
    return result
def run_daily_analysis() -> str:
    analysis = analyze_portfolio()

    text = (
        f"{analysis['report']}\n\n"
        f"ü§ñ GPT-–ø—Ä–æ–≥–Ω–æ–∑:\n{analysis['gpt_analysis']}\n\n"
        f"üìà –ö—É–ø–∏—Ç–∏: {', '.join(analysis['to_buy']) if analysis['to_buy'] else '–Ω—ñ—á–æ–≥–æ'}\n"
        f"üìâ –ü—Ä–æ–¥–∞—Ç–∏: {', '.join(analysis['to_sell']) if analysis['to_sell'] else '–Ω—ñ—á–æ–≥–æ'}"
    )

    return text
def send_daily_forecast(bot: Bot, chat_id: int):
    try:
        text = run_daily_analysis()
        bot.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        error_text = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É: {e}"
        bot.send_message(chat_id=chat_id, text=error_text)
import os
import json
from datetime import datetime
from typing import Dict

from binance_api import get_current_portfolio
from aiogram import Bot
import openai

DATA_FILE = "daily_snapshot.json"
THRESHOLD_PNL_PERCENT = 1.0  # –ó–Ω–∏–∂–µ–Ω–∏–π –ø–æ—Ä—ñ–≥ PnL –¥–æ ¬±1%

def load_previous_data() -> Dict:
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data: Dict):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)
def format_percent(pct: float) -> str:
    sign = "+" if pct > 0 else ""
    return f"{sign}{pct:.2f}%"
    
def get_usdt_to_uah_rate() -> float:
    # –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–≥–ª—É—à–∫–∏ ‚Äî –≤—Å—Ç–∞–≤ —Å–≤–æ—é –ª–æ–≥—ñ–∫—É, –∞–±–æ –∑–∞–ª–∏—à —Ç–∏–º—á–∞—Å–æ–≤–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    return 40.0

def format_currency(value: float, currency: str = "USDT") -> str:
    if currency == "UAH":
        return f"{value:,.2f}‚Ç¥"
    elif currency == "BTC":
        return f"{value:.6f} BTC"
    else:
        return f"{value:,.2f} {currency}"
if __name__ == "__main__":
    class DummyBot:
        def send_message(self, chat_id, text):
            print(f"[Telegram] Chat ID: {chat_id}\n{text}\n")

    # –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ
    bot = DummyBot()
    test_chat_id = 123456789  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π ID –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
    send_daily_forecast(bot, test_chat_id)
