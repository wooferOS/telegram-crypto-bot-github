import atexit
from collections import defaultdict
from typing import Dict, List, Optional, Tuple

import requests
from config_dev3 import TELEGRAM_CHAT_ID, TELEGRAM_TOKEN


_current_from_token: Optional[str] = None
_pending: Dict[str, List[str]] = defaultdict(list)
fallback_triggered: Optional[Tuple[str, str]] = None


def flush_failures() -> None:
    """Send aggregated failure message for the current FROM token."""
    global _current_from_token, _pending, fallback_triggered
    if not _current_from_token or not _pending:
        fallback_triggered = None
        return
    if len(_pending) == 1:
        reason, tokens = next(iter(_pending.items()))
        tokens_str = ", ".join(tokens)
        msg = (
            f"[dev3] ‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ {_current_from_token} ‚Üí [{tokens_str}]\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
    else:
        lines = [f"[dev3] ‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ {_current_from_token}"]
        for reason, tokens in _pending.items():
            tokens_str = ", ".join(tokens)
            lines.append(f"- [{tokens_str}] ‚Üí {reason}")
        msg = "\n".join(lines)
    _send(msg)
    _current_from_token = None
    _pending = defaultdict(list)
    fallback_triggered = None


atexit.register(flush_failures)


def _send(text: str) -> None:
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        return
    try:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            json={"chat_id": TELEGRAM_CHAT_ID, "text": text},
            timeout=10,
        )
    except Exception:
        pass


def send_telegram(text: str) -> None:
    """Simple helper to send raw Telegram messages."""
    _send(text)


def notify_success(from_token: str, to_token: str, amount: float, to_amount: float, score: float, expected_profit: float) -> None:
    if _current_from_token and from_token != _current_from_token:
        flush_failures()
    msg = (
        f"[dev3] ‚úÖ Convert {from_token} ‚Üí {to_token}\n"
        f"üî∏ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {amount} {from_token}\n"
        f"üîπ –û—Ç—Ä–∏–º–∞–Ω–æ: ‚âà{to_amount} {to_token}\n"
        f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {expected_profit:+.1%} (score: {score:.3f})"
    )
    _send(msg)


def notify_failure(from_token: str, to_token: str, reason: str) -> None:
    global _current_from_token, _pending
    if _current_from_token and from_token != _current_from_token:
        flush_failures()
    _current_from_token = from_token
    _pending[reason].append(to_token)


def notify_no_trade(from_token: str, predictions: int, best_score: float) -> None:
    msg = (
        f"[dev3] ‚ùå –ù–µ–º–∞—î —Ç—Ä–µ–π–¥—É\n"
        f"FROM: {from_token}\n"
        f"–ü—Ä–æ–≥–Ω–æ–∑—ñ–≤: {predictions}\n"
        f"–ö—Ä–∞—â–∏–π score: {best_score:+.2f}"
    )
    _send(msg)


def notify_fallback_trade(from_token: str, to_token: str, score: float, balance: float) -> None:
    msg = (
        f"[dev3] ‚ö†Ô∏è Fallback-—Ç—Ä–µ–π–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ\n"
        f"{from_token} ‚Üí {to_token} | score={score:+.3f} | –±–∞–ª–∞–Ω—Å={balance} {from_token}"
    )
    _send(msg)


def notify_all_skipped(avg: float) -> None:
    msg = (
        "[dev3] ‚ùå –ñ–æ–¥–Ω–∞ –ø–∞—Ä–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ —Ñ—ñ–ª—å—Ç—Ä–∏.\n"
        f"–°–µ—Ä–µ–¥–Ω—ñ–π score: {avg}, –ø—Ä–∏—á–∏–Ω–∞: –≤—Å—ñ < threshold –∞–±–æ price_lookup_failed"
    )
    _send(msg)


def notify_fallback_model_warning() -> None:
    """Inform admin that model is trained on failed conversions only."""
    _send(
        "[dev3] ‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–∞ –ª–∏—à–µ –Ω–∞ –Ω–µ—É—Å–ø—ñ—à–Ω–∏—Ö —É–≥–æ–¥–∞—Ö. "
        "–î–ª—è –∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ ‚Äî –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 1 —É—Å–ø—ñ—à–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å—ñ—è."
    )
