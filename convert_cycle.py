def process_pair(from_token: str, available_to_tokens, amount: float, score_threshold: float):
    """Process available pairs for a single ``from_token``.

    Parameters
    ----------
    from_token: str
        Asset to convert from.
    available_to_tokens: Iterable[str]
        Tokens which are available to convert ``from_token`` to.
    amount: float
        Amount of ``from_token`` to use when requesting quotes.
    score_threshold: float
        Minimal score required for a quote to be executed.
    """

    from convert_api import get_quote, accept_quote
    from convert_logger import logger, summary_logger
    from convert_model import predict

    logger.info(f"[dev3] üîç –ê–Ω–∞–ª—ñ–∑ –¥–ª—è {from_token} ‚Üí {len(available_to_tokens)} —Ç–æ–∫–µ–Ω—ñ–≤")
    best_quotes = []
    all_quotes = []

    for to_token in available_to_tokens:
        quote = get_quote(from_token, to_token, amount)
        if not quote:
            continue

        ratio = float(quote["ratio"])
        _, _, score = predict(from_token, to_token, quote)
        all_quotes.append({"to_token": to_token, "ratio": ratio, "score": score, "quote": quote})

        if score >= score_threshold:
            best_quotes.append({"to_token": to_token, "score": score, "quote": quote})

    if not best_quotes:
        logger.warning("[dev3] ‚ö†Ô∏è Fallback: –∂–æ–¥–Ω–∞ –ø–∞—Ä–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ —Ñ—ñ–ª—å—Ç—Ä. –û–±–∏—Ä–∞—î–º–æ top 2 –∑–∞ ratio.")
        quotes_sorted_by_ratio = sorted(all_quotes, key=lambda x: x["ratio"], reverse=True)
        best_quotes = quotes_sorted_by_ratio[:2]  # –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ score == 0

    success_count = 0
    for item in best_quotes:
        to_token = item["to_token"]
        quote = item.get("quote")
        logger.info(f"[dev3] ‚úÖ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è {from_token} ‚Üí {to_token} (score={item['score']:.4f})")
        if quote and "quoteId" in quote:
            accept_quote(quote["quoteId"])
        else:
            logger.warning("[dev3] ‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–∏–π–Ω—è—Ç–∏ quote ‚Äî –≤—ñ–¥—Å—É—Ç–Ω—ñ–π quoteId –∞–±–æ quote = None")
        success_count += 1

    skipped_count = len(available_to_tokens) - success_count
    summary_logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ü–∏–∫–ª. –£—Å–ø—ñ—à–Ω–∏—Ö: {success_count}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
