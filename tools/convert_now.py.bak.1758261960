import time,hmac,hashlib,requests,sys
from urllib.parse import urlencode
from pathlib import Path

# щоб бачив config_dev3.py в корені репо
sys.path.insert(0, str(Path(__file__).resolve().parents[1]))
from config_dev3 import BINANCE_API_KEY, BINANCE_SECRET_KEY

BASE="https://api.binance.com"
def now(): return int(time.time()*1000)
def sign(q): return hmac.new(BINANCE_SECRET_KEY.encode(), q.encode(), hashlib.sha256).hexdigest()

def post(path,p):
    p=dict(p); p.setdefault("recvWindow",5000); p["timestamp"]=now()
    qs=urlencode(p); body=qs+"&signature="+sign(qs)
    return requests.post(BASE+path, data=body,
        headers={"X-MBX-APIKEY":BINANCE_API_KEY,"Content-Type":"application/x-www-form-urlencoded"},
        timeout=15)

def get(path,p):
    p=dict(p); p.setdefault("recvWindow",5000); p["timestamp"]=now()
    qs=urlencode(p)
    return requests.get(BASE+path, params=qs+"&signature="+sign(qs),
        headers={"X-MBX-APIKEY":BINANCE_API_KEY}, timeout=15)

def main():
    if len(sys.argv)<4:
        print("USAGE: python3 tools/convert_now.py FROM_ASSET TO_ASSET AMOUNT [WALLET=SPOT|FUNDING]")
        sys.exit(1)
    fr, to, amount = sys.argv[1].upper(), sys.argv[2].upper(), sys.argv[3]
    wallet = sys.argv[4].upper() if len(sys.argv)>4 else "SPOT"

    # мін/макс для пари
    ei = get("/sapi/v1/convert/exchangeInfo", {"fromAsset":fr,"toAsset":to}).json()[0]
    print("[exchangeInfo]", ei)

    # AMOUNT=ALL -> беремо увесь free баланс FROM_ASSET
    if amount.upper() == "ALL":
        acct = get("/api/v3/account", {}).json()
        bal = next((b for b in acct.get("balances",[]) if b["asset"]==fr), {"free":"0"})
        amount = bal["free"]
        print(f"[amount=ALL] {fr} free =", amount)

    # перевірка мінімуму
    try:
        from_min = float(ei.get("fromAssetMinAmount","0"))
        amt_f = float(amount)
    except Exception:
        print("[!] Bad amount")
        sys.exit(2)

    if amt_f < from_min:
        print(f"[!] Amount {amt_f} < min {from_min}. Спробуйте >= {from_min}")
        sys.exit(2)

    # нормалізуємо рядок суми
    amount = f"{amt_f:.18f}".rstrip('0').rstrip('.') if '.' in f"{amt_f:.18f}" else str(int(amt_f))

    # getQuote
    r = post("/sapi/v1/convert/getQuote", {
        "fromAsset": fr, "toAsset": to, "fromAmount": amount, "walletType": wallet
    })
    print("[getQuote]", r.status_code, r.text)
    j = r.json()
    if not (isinstance(j,dict) and "quoteId" in j):
        print("[!] No quoteId — перевір баланс/мінімум/пару/гаманець.")
        sys.exit(3)

    qid = j["quoteId"]

    # acceptQuote
    r2 = post("/sapi/v1/convert/acceptQuote", {"quoteId": qid})
    print("[acceptQuote]", r2.status_code, r2.text)
    if r2.status_code != 200:
        sys.exit(4)

    # orderStatus
    oid = r2.json().get("orderId")
    st = get("/sapi/v1/convert/orderStatus", {"orderId": oid})
    print("[orderStatus]", st.status_code, st.text)

if __name__ == "__main__":
    main()
