# üì¶ main.py ‚Äî Telegram GPT-–±o—Ç –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ Binance

import os
import json
import logging
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telebot import TeleBot, types
from binance.client import Client
from flask import Flask
from threading import Thread
from daily_analysis import generate_daily_report

# üîê –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
load_dotenv(dotenv_path)

# üîë –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# ü§ñ Telegram —Ç–∞ Binance –∫–ª—ñ—î–Ω—Ç–∏
bot = TeleBot(TELEGRAM_TOKEN)
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)

# üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±—é–¥–∂–µ—Ç (–±—É–¥–µ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—å —á–µ—Ä–µ–∑ /set_budget)
budget = {"USDT": 100}

# ‚úÖ –°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –º–æ–Ω–µ—Ç (–¥–ª—è –∫—É–ø—ñ–≤–ª—ñ/–ø—Ä–æ–¥–∞–∂—É)
WHITELIST = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT", "ADAUSDT",
    "DOGEUSDT", "AVAXUSDT", "DOTUSDT", "TRXUSDT", "LINKUSDT", "MATICUSDT",
    "LTCUSDT", "BCHUSDT", "ATOMUSDT", "NEARUSDT", "FILUSDT", "ICPUSDT",
    "ETCUSDT", "HBARUSDT", "VETUSDT", "RUNEUSDT", "INJUSDT", "OPUSDT",
    "ARBUSDT", "SUIUSDT", "STXUSDT", "TIAUSDT", "SEIUSDT", "1000PEPEUSDT"
]

# ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
def load_signal():
    try:
        with open("signal.json", "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_signal(signal):
    with open("signal.json", "w") as f:
        json.dump(signal, f)

signal = load_signal()
# üß≠ –ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
def get_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìä –ë–∞–ª–∞–Ω—Å", "üìà –ó–≤—ñ—Ç")
    kb.row("üïì –Ü—Å—Ç–æ—Ä—ñ—è", "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é", "‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂")
    kb.row("üîÑ –û–Ω–æ–≤–∏—Ç–∏", "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏")
    return kb
# üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
@bot.message_handler(commands=["start", "menu"])
def send_welcome(message):
    text = "üëã –í—ñ—Ç–∞—é! –Ø GPT-–±–∞–∑–æ–≤–∞–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–∞—Å–∏—Å—Ç–µ–Ω—Ç. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    bot.reply_to(message, text, parse_mode="Markdown", reply_markup=get_main_keyboard())
# üì≤ –û—Å–Ω–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
def get_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìä –ë–∞–ª–∞–Ω—Å", "üìà –ó–≤—ñ—Ç", "üìú –Ü—Å—Ç–æ—Ä—ñ—è")
    kb.row("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é", "‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂")
    kb.row("üîÑ –û–Ω–æ–≤–∏—Ç–∏", "‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏")
    return kb
# üöÄ –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=["start", "menu"])
def send_welcome(message):
    text = (
        "ü§ñ *Telegram GPT-–±–æ—Ç –¥–ª—è Binance*\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É:\n"
        "- /balance ‚Äî –±–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è\n"
        "- /report ‚Äî GPT-–∑–≤—ñ—Ç\n"
        "- /confirm_buy ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é\n"
        "- /confirm_sell ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂\n"
    )
    bot.reply_to(message, text, parse_mode="Markdown", reply_markup=get_main_keyboard())
# üß© –û—Å–Ω–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
def get_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìä –ë–∞–ª–∞–Ω—Å", "üß† –ó–≤—ñ—Ç")
    kb.row("üü¢ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é", "üî¥ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂")
    kb.row("‚ôªÔ∏è –û–Ω–æ–≤–∏—Ç–∏", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
    return kb

# üéØ –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
@bot.message_handler(func=lambda m: True)
def handle_buttons(message):
    text = message.text
    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        send_balance(message)
    elif text == "üß† –ó–≤—ñ—Ç":
        send_report(message)
    elif text == "üü¢ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é":
        bot.send_message(message.chat.id, "‚úã –û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ...")
    elif text == "üî¥ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂":
        bot.send_message(message.chat.id, "‚úã –û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É...")
    elif text == "‚ôªÔ∏è –û–Ω–æ–≤–∏—Ç–∏":
        send_report(message)
    elif text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(message.chat.id, "‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
# üìä –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É (—Ä—É—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–±–æ –∫–Ω–æ–ø–∫–∞)
def send_balance(message):
    balances = get_binance_balance()
    if not balances:
        bot.send_message(message.chat.id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å.")
        return

    response = "üìä *–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:*\n\n"
    total_usdt = 0
    for asset in balances:
        amount = float(asset['free'])
        if amount < 0.01:
            continue
        symbol = asset['asset']
        price = get_usdt_price(symbol)
        value = amount * price
        total_usdt += value
        response += f"‚ñ´Ô∏è {symbol}: {amount:.4f} ‚âà {value:.2f} USDT\n"

    response += f"\nüí∞ *–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* {total_usdt:.2f} USDT"
    bot.send_message(message.chat.id, response, parse_mode="Markdown")
# üìà –ö–æ–º–∞–Ω–¥–∞ /report ‚Äî GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ä–∏–Ω–∫—É + –±–∞–ª–∞–Ω—Å
@bot.message_handler(commands=['report', '–∑–≤—ñ—Ç'])
def handle_report(message):
    bot.send_message(message.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è GPT-–∑–≤—ñ—Ç, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
    try:
        run_daily_analysis(telegram_mode=True)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É: {e}")
# üì• –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫—É–ø—ñ–≤–ª—ñ / –ø—Ä–æ–¥–∞–∂—É
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data.startswith("confirmbuy_"):
            pair = call.data.split("_")[1]
            bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∫—É–ø—ñ–≤–ª—é {pair}")
            signal["last_action"] = {
                "type": "buy",
                "pair": pair,
                "time": datetime.utcnow().isoformat()
            }
            save_signal(signal)

        elif call.data.startswith("confirmsell_"):
            pair = call.data.split("_")[1]
            bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–æ–¥–∞–∂ {pair}")
            signal["last_action"] = {
                "type": "sell",
                "pair": pair,
                "time": datetime.utcnow().isoformat()
            }
            save_signal(signal)
# üìå –ö–æ–º–∞–Ω–¥–∞ /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ chat_id
@bot.message_handler(commands=["id"])
def show_id(message):
    bot.reply_to(message, f"–í–∞—à chat ID: `{message.chat.id}`", parse_mode="Markdown")

# üí∞ –ö–æ–º–∞–Ω–¥–∞ /set_budget ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
@bot.message_handler(commands=["set_budget"])
def set_budget(message):
    try:
        parts = message.text.strip().split()
        if len(parts) == 2:
            amount = float(parts[1])
            budget["USDT"] = amount
            with open("budget.json", "w") as f:
                json.dump(budget, f)
            bot.reply_to(message, f"‚úÖ –ë—é–¥–∂–µ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: {amount} USDT")
        else:
            bot.reply_to(message, "‚ùóÔ∏è –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/set_budget 100`", parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# üìã –ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
@bot.message_handler(commands=["menu"])
def show_menu(message):
    kb = get_main_keyboard()
    bot.send_message(message.chat.id, "üìç –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:", reply_markup=kb)
# ‚úÖ –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫—É–ø—ñ–≤–ª—ñ/–ø—Ä–æ–¥–∞–∂—É
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirmbuy_") or call.data.startswith("confirmsell_"))
def callback_inline(call):
    if call.data.startswith("confirmbuy_"):
        pair = call.data.split("_")[1]
        bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∫—É–ø—ñ–≤–ª—é {pair}")
        signal["last_action"] = {
            "type": "buy",
            "pair": pair,
            "time": datetime.utcnow().isoformat()
        }
        save_signal(signal)

    elif call.data.startswith("confirmsell_"):
        pair = call.data.split("_")[1]
        bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–æ–¥–∞–∂ {pair}")
        signal["last_action"] = {
            "type": "sell",
            "pair": pair,
            "time": datetime.utcnow().isoformat()
        }
        save_signal(signal)

# ‚úÖ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@bot.message_handler(func=lambda message: True)
def fallback(message):
    bot.reply_to(message, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à—ñ—Ç—å /help –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.")

# ‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–≤—ñ—Ç—É (GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞)
@bot.message_handler(commands=["report", "–∑–≤—ñ—Ç"])
def send_report(message):
    try:
        gpt_report = run_daily_analysis()
        bot.send_message(message.chat.id, gpt_report, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É:\n{e}")
# ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª –∑ —Ñ–∞–π–ª—É
def load_signal():
    try:
        with open("signal.json", "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# ‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ —Å–∏–≥–Ω–∞–ª —É —Ñ–∞–π–ª
def save_signal(signal):
    with open("signal.json", "w") as f:
        json.dump(signal, f)
# Binance client
client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)

# ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–∏–≥–Ω–∞–ª
signal = load_signal()
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data.startswith("confirmbuy_"):
        pair = call.data.split("_")[1]
        bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∫—É–ø—ñ–≤–ª—é {pair}")
        signal["last_action"] = {
            "type": "buy",
            "pair": pair,
            "time": datetime.utcnow().isoformat()
        }
        save_signal(signal)

    elif call.data.startswith("confirmsell_"):
        pair = call.data.split("_")[1]
        bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–æ–¥–∞–∂ {pair}")
        signal["last_action"] = {
            "type": "sell",
            "pair": pair,
            "time": datetime.utcnow().isoformat()
        }
        save_signal(signal)

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    bot.polling(none_stop=True)

