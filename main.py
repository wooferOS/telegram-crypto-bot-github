# üì¶ main.py ‚Äî Telegram GPT-–±–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ Binance

import os
import json
import logging
from datetime import datetime
from dotenv import load_dotenv
from telebot import TeleBot, types
from binance.client import Client
from daily_analysis import run_daily_analysis

# üîê –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
load_dotenv(dotenv_path)

# üîë –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# ü§ñ Telegram —Ç–∞ Binance –∫–ª—ñ—î–Ω—Ç–∏
bot = TeleBot(TELEGRAM_TOKEN)
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)

# üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±—é–¥–∂–µ—Ç
budget = {"USDT": 100}

# ‚úÖ –°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –º–æ–Ω–µ—Ç
WHITELIST = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT", "ADAUSDT",
    "DOGEUSDT", "AVAXUSDT", "DOTUSDT", "TRXUSDT", "LINKUSDT", "MATICUSDT",
    "LTCUSDT", "BCHUSDT", "ATOMUSDT", "NEARUSDT", "FILUSDT", "ICPUSDT",
    "ETCUSDT", "HBARUSDT", "VETUSDT", "RUNEUSDT", "INJUSDT", "OPUSDT",
    "ARBUSDT", "SUIUSDT", "STXUSDT", "TIAUSDT", "SEIUSDT", "1000PEPEUSDT"
]

# üß† –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É
def load_signal():
    try:
        with open("signal.json", "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_signal(signal):
    with open("signal.json", "w") as f:
        json.dump(signal, f)

signal = load_signal()
# ‚å®Ô∏è –û—Å–Ω–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
def get_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìä –ë–∞–ª–∞–Ω—Å", "üìà –ó–≤—ñ—Ç")
    kb.row("üïò –Ü—Å—Ç–æ—Ä—ñ—è", "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é")
    kb.row("‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂", "üîÑ –û–Ω–æ–≤–∏—Ç–∏")
    kb.row("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏")
    return kb

# üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=["start", "menu"])
def send_welcome(message):
    text = (
        "üëã –í—ñ—Ç–∞—é! –Ø *GPT-–∫—Ä–∏–ø—Ç–æ–±–æ—Ç* –¥–ª—è Binance.\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É:\n"
        "`/balance`, `/report`, `/confirm_buy`, `/confirm_sell`"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=get_main_keyboard())

# üìã –ö–æ–º–∞–Ω–¥–∞ /menu
@bot.message_handler(commands=["menu"])
def show_menu(message):
    bot.send_message(message.chat.id, "üìç –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:", reply_markup=get_main_keyboard())

# üìå –ö–æ–º–∞–Ω–¥–∞ /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ chat_id
@bot.message_handler(commands=["id"])
def show_id(message):
    bot.reply_to(message, f"–í–∞—à chat ID: `{message.chat.id}`", parse_mode="Markdown")
# üéØ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.message_handler(func=lambda m: True)
def handle_buttons(message):
    text = message.text
    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        send_balance(message)
    elif text == "üìà –ó–≤—ñ—Ç":
        send_report(message)
    elif text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é":
        bot.send_message(message.chat.id, "‚úã –û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ...")
    elif text == "‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂":
        bot.send_message(message.chat.id, "‚úã –û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É...")
    elif text == "üîÑ –û–Ω–æ–≤–∏—Ç–∏":
        send_report(message)
    elif text == "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(message.chat.id, "‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à—ñ—Ç—å /help –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.")

# üìä –ë–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç—É
def send_balance(message):
    try:
        balances = client.get_account()["balances"]
        response = "üìä *–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:*\n\n"
        total_usdt = 0

        for asset in balances:
            amount = float(asset["free"])
            if amount < 0.01:
                continue
            symbol = asset["asset"]
            try:
                price = float(client.get_symbol_ticker(symbol=f"{symbol}USDT")["price"])
            except:
                continue
            value = amount * price
            total_usdt += value
            response += f"‚ñ´Ô∏è {symbol}: {amount:.4f} ‚âà {value:.2f} USDT\n"

        response += f"\nüí∞ *–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* {total_usdt:.2f} USDT"
        bot.send_message(message.chat.id, response, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# üìà GPT-–∑–≤—ñ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
def send_report(message):
    try:
        bot.send_message(message.chat.id, "‚è≥ –§–æ—Ä–º—É—î—Ç—å—Å—è GPT-–∑–≤—ñ—Ç, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
        report = run_daily_analysis()
        if report:
            bot.send_message(message.chat.id, report, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤—ñ—Ç—É:\n{e}")
# ‚úÖ Inline-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂—É
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.data.startswith("confirmbuy_"):
            pair = call.data.split("_")[1]
            bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∫—É–ø—ñ–≤–ª—é {pair}")
            signal["last_action"] = {
                "type": "buy",
                "pair": pair,
                "time": datetime.utcnow().isoformat()
            }
            save_signal(signal)

        elif call.data.startswith("confirmsell_"):
            pair = call.data.split("_")[1]
            bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–æ–¥–∞–∂ {pair}")
            signal["last_action"] = {
                "type": "sell",
                "pair": pair,
                "time": datetime.utcnow().isoformat()
            }
            save_signal(signal)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# üí∞ /set_budget ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
@bot.message_handler(commands=["set_budget"])
def set_budget(message):
    try:
        parts = message.text.strip().split()
        if len(parts) == 2:
            amount = float(parts[1])
            budget["USDT"] = amount
            with open("budget.json", "w") as f:
                json.dump(budget, f)
            bot.reply_to(message, f"‚úÖ –ë—é–¥–∂–µ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: {amount} USDT")
        else:
            bot.reply_to(message, "‚ùóÔ∏è –ü—Ä–∏–∫–ª–∞–¥: `/set_budget 150`", parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
# üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    bot.polling(none_stop=True)
