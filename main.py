# üì¶ main.py ‚Äî Telegram –±–æ—Ç –¥–ª—è GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ Binance

import os
import json
import logging
from datetime import datetime
from dotenv import load_dotenv
from telebot import TeleBot
from telebot.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from binance.client import Client
from flask import Flask
from threading import Thread
from daily_analysis import run_daily_analysis

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
load_dotenv(dotenv_path)
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
bot = TeleBot(TELEGRAM_TOKEN)
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
# üì± –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(
    KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å"),
    KeyboardButton("üìà –ó–≤—ñ—Ç"),
    KeyboardButton("üìú –Ü—Å—Ç–æ—Ä—ñ—è"),
)
main_keyboard.add(
    KeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é"),
    KeyboardButton("‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂")
)
main_keyboard.add(
    KeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏"),
    KeyboardButton("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏")
)
# üü¢ –ö–æ–º–∞–Ω–¥–∏ —Å—Ç–∞—Ä—Ç—É
@bot.message_handler(commands=["start", "menu", "help"])
def start_handler(message):
    bot.send_message(
        message.chat.id,
        "üëã –í—ñ—Ç–∞—é! –Ø GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫ –∫—Ä–∏–ø—Ç–æ—Ä–∏–Ω–∫—É Binance.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=main_keyboard
    )
# üìä –ë–∞–ª–∞–Ω—Å
@bot.message_handler(func=lambda m: m.text == "üìä –ë–∞–ª–∞–Ω—Å")
def handle_balance(message):
    balances = client.get_account().get("balances", [])
    text = "üìä <b>–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å Binance:</b>\n\n"
    total_usdt = 0.0

    for asset in balances:
        free = float(asset["free"])
        locked = float(asset["locked"])
        total = free + locked
        if total > 0 and asset["asset"] != "USDT":
            symbol = f'{asset["asset"]}USDT'
            try:
                price = float(client.get_symbol_ticker(symbol=symbol)["price"])
                value = round(total * price, 2)
                total_usdt += value
                text += f'‚ñ´Ô∏è <b>{asset["asset"]}</b>: {round(total, 4)} ‚âà {value} USDT\n'
            except:
                continue
        elif asset["asset"] == "USDT":
            total_usdt += total
            text += f'‚ñ´Ô∏è <b>USDT</b>: {round(total, 2)} USDT\n'

    text += f"\n<b>–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:</b> {round(total_usdt, 2)} USDT"
    bot.send_message(message.chat.id, text, parse_mode="HTML")
# üìà –ó–≤—ñ—Ç
@bot.message_handler(func=lambda m: m.text == "üìà –ó–≤—ñ—Ç")
def handle_report(message):
    msg = bot.send_message(message.chat.id, "üì° –ó–∞—á–µ–∫–∞–π, —Ñ–æ—Ä–º—É—é GPT-–∑–≤—ñ—Ç...")
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(generate_daily_report())
        bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text=result, parse_mode=ParseMode.HTML)
    except Exception as e:
        error_text = f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É: {str(e)}"
        bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text=error_text)
        logging.error(error_text)
# üìä –ë–∞–ª–∞–Ω—Å
@bot.message_handler(func=lambda m: m.text == "üìä –ë–∞–ª–∞–Ω—Å")
def handle_balance(message):
    try:
        balances = client.get_account()["balances"]
        text = "<b>üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b>\n\n"
        for asset in balances:
            free = float(asset["free"])
            locked = float(asset["locked"])
            total = free + locked
            if total > 0:
                text += f"{asset['asset']}: {total:.4f}\n"
        bot.send_message(message.chat.id, text, parse_mode=ParseMode.HTML)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {str(e)}")
        logging.error(f"BALANCE ERROR: {str(e)}")
# üìà –ó–≤—ñ—Ç
@bot.message_handler(func=lambda m: m.text == "üìà –ó–≤—ñ—Ç")
def handle_report(message):
    try:
        bot.send_message(message.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç...")
        asyncio.run(generate_daily_report())
        bot.send_message(message.chat.id, "‚úÖ –ó–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: {str(e)}")
        logging.error(f"REPORT ERROR: {str(e)}")
# üü¢ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é
@bot.message_handler(func=lambda m: m.text == "üü¢ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é")
def handle_confirm_buy(message):
    bot.send_message(message.chat.id, "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫—É–ø—ñ–≤–ª—ñ –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –æ–∫—Ä–µ–º–æ—é –ª–æ–≥—ñ–∫–æ—é.")

# üî¥ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂
@bot.message_handler(func=lambda m: m.text == "üî¥ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂")
def handle_confirm_sell(message):
    bot.send_message(message.chat.id, "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –æ–∫—Ä–µ–º–æ—é –ª–æ–≥—ñ–∫–æ—é.")

# ‚ôªÔ∏è –û–Ω–æ–≤–∏—Ç–∏
@bot.message_handler(func=lambda m: m.text == "‚ôªÔ∏è –û–Ω–æ–≤–∏—Ç–∏")
def handle_refresh(message):
    bot.send_message(message.chat.id, "üîÑ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è...")
    asyncio.run(generate_daily_report())

# ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏
@bot.message_handler(func=lambda m: m.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
def handle_cancel(message):
    bot.send_message(message.chat.id, "‚ùé –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
# –û–±—Ä–æ–±–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ (—è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à inline-–∫–Ω–æ–ø–∫–∏)
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call: CallbackQuery):
    try:
        if call.data.startswith("confirmbuy_"):
            pair = call.data.split("_")[1]
            bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∫—É–ø—ñ–≤–ª—é {pair}")
            # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∫—É–ø—ñ–≤–ª—ñ —á–µ—Ä–µ–∑ Binance API

        elif call.data.startswith("confirmsell_"):
            pair = call.data.split("_")[1]
            bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–æ–¥–∞–∂ {pair}")
            # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –ø—Ä–æ–¥–∞–∂—É —á–µ—Ä–µ–∑ Binance API

        else:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
    except Exception as e:
        logging.error(f"‚ùå Callback –ø–æ–º–∏–ª–∫–∞: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥—ñ—ó.")
# Flask app –¥–ª—è healthcheck
app = Flask(__name__)

@app.route("/health", methods=["GET", "HEAD"])
def health_check():
    return "OK", 200

def run_flask():
    app.run(host="0.0.0.0", port=10000)

def run_bot():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    bot.infinity_polling()
if __name__ == "__main__":
    flask_thread = Thread(target=run_flask)
    flask_thread.start()

    run_bot()
