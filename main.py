# üì¶ main.py ‚Äî Telegram –±–æ—Ç –¥–ª—è GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ Binance

import logging
import os
import json
from dotenv import load_dotenv
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from binance.client import Client
from telebot.types import CallbackQuery
from datetime import datetime
from flask import Flask
from threading import Thread
from daily_analysis import generate_daily_report
import asyncio


# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

bot = TeleBot(TELEGRAM_TOKEN)
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)

# üì± –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
def get_main_keyboard():
    return ReplyKeyboardMarkup([
    ["üí∞ –ë–∞–ª–∞–Ω—Å", "üìä –ó–≤—ñ—Ç", "üìò –Ü—Å—Ç–æ—Ä—ñ—è"],
    ["‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é", "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂"],
    ["üîÑ –û–Ω–æ–≤–∏—Ç–∏", "üõë –°–∫–∞—Å—É–≤–∞—Ç–∏"]
], resize_keyboard=True)

    
# üîò –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ/–ø—Ä–æ–¥–∞–∂—É
def build_trade_markup(to_buy, to_sell):
    markup = InlineKeyboardMarkup()
    for symbol in to_buy:
        markup.add(InlineKeyboardButton(f"üü¢ –ö—É–ø–∏—Ç–∏ {symbol}", callback_data=f"confirmbuy_{symbol}"))
    for symbol in to_sell:
        markup.add(InlineKeyboardButton(f"üî¥ –ü—Ä–æ–¥–∞—Ç–∏ {symbol}", callback_data=f"confirmsell_{symbol}"))
    return markup

# üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—é–¥–∂–µ—Ç—É –ø–µ—Ä–µ–¥ –∫—É–ø—ñ–≤–ª–µ—é
def check_budget(amount):
    try:
        with open("budget.json", "r") as f:
            b = json.load(f)
        return (b["used"] + amount) <= b["budget"]
    except:
        return False
# üü¢ /start —ñ /help
@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    logging.info(f"DEBUG: /start –∞–±–æ /help –≤—ñ–¥ {message.chat.username}")
    text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø GPT-–∞—Å–∏—Å—Ç–µ–Ω—Ç Binance.\n\n"
        "üî∏ –©–æ–¥–Ω—è –æ 09:00 —Ç–∞ 20:00 —è –Ω–∞–¥—Å–∏–ª–∞—é –∞–Ω–∞–ª—ñ—Ç–∏–∫—É.\n"
        "üî∏ –¢–∏ –º–æ–∂–µ—à –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥—ñ—ó:\n"
        "   - /confirm_sell ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂\n"
        "   - /confirm_buy ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é\n"
        "   - /report ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ GPT\n"
        "   - /history ‚Äî —ñ—Å—Ç–æ—Ä—ñ—è —Ç–≤–æ—ó—Ö —É–≥–æ–¥\n"
        "   - /set_budget 100 ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±—é–¥–∂–µ—Ç\n"
        "   - /buy BTC 0.01 ‚Äî –∫—É–ø–∏—Ç–∏ –≤—Ä—É—á–Ω—É\n"
        "   - /sell ETH 0.5 ‚Äî –ø—Ä–æ–¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É\n"
        "   - /status ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—é–¥–∂–µ—Ç\n\n"
        "üí∞ –Ø –∑–±–µ—Ä—ñ–≥–∞—é –≤—Å—ñ —Ç–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!"
    )
    bot.reply_to(message, text, reply_markup=get_main_keyboard())

# üîò –ö–Ω–æ–ø–∫–∞: –ë–∞–ª–∞–Ω—Å
@bot.message_handler(func=lambda m: m.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def handle_balance(message):
    try:
        account_info = client.get_account()
        balances = [b for b in account_info["balances"] if float(b["free"]) > 0 or float(b["locked"]) > 0]
        text = "üíº *–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å:*\n"
        for b in balances:
            total = float(b["free"]) + float(b["locked"])
            text += f"- {b['asset']}: {total}\n"
        bot.send_message(message.chat.id, text, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É: {str(e)}")
        
# üìä –ö–Ω–æ–ø–∫–∞: –ó–≤—ñ—Ç
@bot.message_handler(func=lambda m: m.text == "üìä –ó–≤—ñ—Ç")
def report_btn(message):
    handle_report(message)

# üìà –ö–æ–º–∞–Ω–¥–∞ /report ‚Äî GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
@bot.message_handler(commands=["report"])
def handle_report(message):
    bot.send_message(message.chat.id, "üìä –§–æ—Ä–º—É—é GPT-–∑–≤—ñ—Ç, –∑–∞—á–µ–∫–∞–π—Ç–µ...")

    async def process_report():
        try:
            result = await generate_daily_report()
            if result is None:
                bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ GPT-–∑–≤—ñ—Ç—É.")
                return

            report_text, to_buy, to_sell = result
            markup = build_trade_markup(to_buy, to_sell)
            bot.send_message(message.chat.id, report_text, parse_mode="Markdown", reply_markup=markup)

        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É: {str(e)}")

    asyncio.run(process_report())


# üìò –ö–Ω–æ–ø–∫–∞: –Ü—Å—Ç–æ—Ä—ñ—è
@bot.message_handler(func=lambda m: m.text == "üìò –Ü—Å—Ç–æ—Ä—ñ—è")
def history_btn(message):
    handle_history(message)

# üìò –ö–æ–º–∞–Ω–¥–∞ /history ‚Äî —ñ—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥
@bot.message_handler(commands=["history"])
def handle_history(message):
    history_file = "trade_history.json"
    if not os.path.exists(history_file):
        bot.send_message(message.chat.id, "üì≠ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
        return
    with open(history_file, "r") as f:
        history = json.load(f)
    if not history:
        bot.send_message(message.chat.id, "üì≠ –Ü—Å—Ç–æ—Ä—ñ—è —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.")
        return
    text = "üìò *–Ü–°–¢–û–†–Ü–Ø –£–ì–û–î*:\n"
    grouped = {}
    for item in history:
        date = item["date"].split(" ")[0]
        grouped.setdefault(date, []).append(item)
    for date, entries in grouped.items():
        text += f"\nüìÜ {date}:\n"
        for e in entries:
            emoji = "‚úÖ" if e["action"] == "buy" else "‚ùå"
            text += f"- {emoji} {e['action'].upper()} {e['asset']} ‚Äî {e['amount']}\n"
    bot.send_message(message.chat.id, text, parse_mode="Markdown")
# ‚úÖ –ö–Ω–æ–ø–∫–∞: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é
@bot.message_handler(func=lambda m: m.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é")
def confirm_buy_button(message):
    bot.send_message(message.chat.id, "üõí –í–∏–∫–ª–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫—É–ø—ñ–≤–ª—ñ —á–µ—Ä–µ–∑ /confirm_buy")

# ‚úÖ –ö–Ω–æ–ø–∫–∞: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂
@bot.message_handler(func=lambda m: m.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂")
def confirm_sell_button(message):
    bot.send_message(message.chat.id, "üí∏ –í–∏–∫–ª–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É —á–µ—Ä–µ–∑ /confirm_sell")

# üõë –ö–Ω–æ–ø–∫–∞: –°–∫–∞—Å—É–≤–∞—Ç–∏
@bot.message_handler(func=lambda m: m.text == "üõë –°–∫–∞—Å—É–≤–∞—Ç–∏")
def cancel(message):
    bot.send_message(message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")

# üîÑ –ö–Ω–æ–ø–∫–∞: –û–Ω–æ–≤–∏—Ç–∏
@bot.message_handler(func=lambda m: m.text == "üîÑ –û–Ω–æ–≤–∏—Ç–∏")
def refresh(message):
    bot.send_message(message.chat.id, "üîÑ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ (—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–∏–≤–∞—î)")
# ‚úÖ /confirm_sell ‚Äî –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø—Ä–æ–¥–∞–∂
@bot.message_handler(commands=["confirm_sell"])
def confirm_sell(message):
    assets = [
        {"asset": "AMB", "amount": 0.73},
        {"asset": "GFT", "amount": 74},
    ]
    try:
        for asset in assets:
            symbol = f"{asset['asset']}USDT"
            client.create_order(symbol=symbol, side="SELL", type="MARKET", quantity=asset["amount"])
        save_trade_history(assets, action="sell")
        bot.reply_to(message, "‚úÖ –ü—Ä–æ–¥–∞–∂ –≤–∏–∫–æ–Ω–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó.")
    except Exception as e:
        msg = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª–∞–Ω—Å—É." if "INSUFFICIENT_BALANCE" in str(e) else f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"
        bot.reply_to(message, msg)

# ‚úÖ /confirm_buy_inline ‚Äî –∫–Ω–æ–ø–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫—É–ø—ñ–≤–ª—ñ
@bot.message_handler(commands=["confirm_buy_inline"])
def confirm_buy_inline(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é", callback_data="buy_now"))
    bot.send_message(message.chat.id, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏ –∫—É–ø—ñ–≤–ª—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "buy_now")
def execute_buy(call):
    assets = [
        {"asset": "XRP", "amount": 10},
    ]
    total = sum([a["amount"] for a in assets])
    if not check_budget(total):
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –±—é–¥–∂–µ—Ç.")
        return
    try:
        for asset in assets:
            symbol = f"{asset['asset']}USDT"
            client.create_order(symbol=symbol, side="BUY", type="MARKET", quantity=asset["amount"])
        save_trade_history(assets, action="buy")
        with open("budget.json", "r") as f:
            b = json.load(f)
        b["used"] += total
        with open("budget.json", "w") as f:
            json.dump(b, f)
        bot.edit_message_text(call.message.chat.id, call.message.message_id, "‚úÖ –ö—É–ø—ñ–≤–ª—è –≤–∏–∫–æ–Ω–∞–Ω–∞.")
    except Exception as e:
        msg = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª–∞–Ω—Å—É." if "INSUFFICIENT_BALANCE" in str(e) else f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"
        bot.send_message(call.message.chat.id, msg)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirmbuy_"))
def handle_confirm_buy(call):
    coin = call.data.split("_")[1]
    bot.answer_callback_query(call.id)

    try:
        # üßÆ –û—Ç—Ä–∏–º—É—î–º–æ USDT –±–∞–ª–∞–Ω—Å
        balance = client.get_asset_balance(asset="USDT")
        usdt_balance = float(balance["free"])

        if usdt_balance < 5:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ USDT –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ.")
            return

        # üìà –¶—ñ–Ω–∞ –º–æ–Ω–µ—Ç–∏
        price = float(client.get_symbol_ticker(symbol=f"{coin}USDT")["price"])

        # üì¶ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        quantity = round(usdt_balance / price, 6)

        # üõí –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
        order = client.create_order(
            symbol=f"{coin}USDT",
            side="BUY",
            type="MARKET",
            quantity=quantity
        )

        # ‚úÖ –ó–≤—ñ—Ç
        bot.send_message(call.message.chat.id, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {quantity} {coin}.")

        # üìù –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        save_trade_history([{
            "symbol": coin,
            "action": "BUY",
            "quantity": quantity,
            "usdt_spent": round(usdt_balance, 2),
            "price": price,
            "time": datetime.now().isoformat()
        }], action="BUY")

    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫—É–ø—ñ–≤–ª—ñ {coin}: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirmsell_"))
def handle_confirm_sell(call):
    coin = call.data.split("_")[1]
    bot.answer_callback_query(call.id)

    try:
        balance = client.get_asset_balance(asset=coin)
        quantity = round(float(balance["free"]), 6)

        if quantity == 0:
            bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ {coin} –¥–ª—è –ø—Ä–æ–¥–∞–∂—É.")
            return

        order = client.create_order(
            symbol=f"{coin}USDT",
            side="SELL",
            type="MARKET",
            quantity=quantity
        )
        
# üéØ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Stop-Loss —ñ Take-Profit —á–µ—Ä–µ–∑ OCO
try:
    stop_price = round(price * 0.97, 4)     # 3% –Ω–∏–∂—á–µ
    limit_price = round(price * 1.05, 4)    # 5% –≤–∏—â–µ

    client.create_order(
        symbol=f"{coin}USDT",
        side="SELL",
        type="OCO",
        quantity=round(quantity, 6),
        price=str(limit_price),
        stopPrice=str(stop_price),
        stopLimitPrice=str(stop_price),
        stopLimitTimeInForce='GTC'
    )
    bot.send_message(call.message.chat.id, f"üõ° Stop-loss: {stop_price} | Take-profit: {limit_price} –¥–ª—è {coin} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
except Exception as e:
    bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ–ø/—Ç–µ–π–∫: {e}")


        # ‚úÖ –ó–≤—ñ—Ç
        bot.send_message(call.message.chat.id, f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {quantity} {coin}.")

        # ‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è
        save_trade_history([{
            "symbol": coin,
            "action": "SELL",
            "quantity": quantity,
            "time": datetime.now().isoformat()
        }], action="SELL")

    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂—É {coin}: {e}")



# üí∏ –†—É—á–Ω–∞ –∫—É–ø—ñ–≤–ª—è /buy BTC 0.01
@bot.message_handler(commands=["buy"])
def manual_buy(message):
    try:
        parts = message.text.strip().split()
        if len(parts) != 3:
            bot.reply_to(message, "‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: /buy BTC 0.01")
            return
        asset, amount = parts[1].upper(), float(parts[2])
        if not check_budget(amount):
            bot.reply_to(message, "‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –±—é–¥–∂–µ—Ç.")
            return
        symbol = f"{asset}USDT"
        client.create_order(symbol=symbol, side="BUY", type="MARKET", quantity=amount)
        save_trade_history([{"asset": asset, "amount": amount}], action="buy")
        with open("budget.json", "r") as f:
            b = json.load(f)
        b["used"] += amount
        with open("budget.json", "w") as f:
            json.dump(b, f)
        bot.reply_to(message, f"‚úÖ –ö—É–ø—ñ–≤–ª—è {amount} {asset} –≤–∏–∫–æ–Ω–∞–Ω–∞.")
    except Exception as e:
        msg = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª–∞–Ω—Å—É." if "INSUFFICIENT_BALANCE" in str(e) else f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"
        bot.reply_to(message, msg)

# üí∞ –†—É—á–Ω–∏–π –ø—Ä–æ–¥–∞–∂ /sell ETH 0.5
@bot.message_handler(commands=["sell"])
def manual_sell(message):
    try:
        parts = message.text.strip().split()
        if len(parts) != 3:
            bot.reply_to(message, "‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: /sell ETH 0.5")
            return
        asset, amount = parts[1].upper(), float(parts[2])
        symbol = f"{asset}USDT"
        client.create_order(symbol=symbol, side="SELL", type="MARKET", quantity=amount)
        save_trade_history([{"asset": asset, "amount": amount}], action="sell")
        bot.reply_to(message, f"‚úÖ –ü—Ä–æ–¥–∞–∂ {amount} {asset} –≤–∏–∫–æ–Ω–∞–Ω–æ.")
    except Exception as e:
        msg = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞–∫—Ç–∏–≤—É." if "INSUFFICIENT_BALANCE" in str(e) else f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"
        bot.reply_to(message, msg)

# üìä /status ‚Äî –ø–µ—Ä–µ–≥–ª—è–¥ –±—é–¥–∂–µ—Ç—É
@bot.message_handler(commands=["status"])
def status(message):
    try:
        with open("budget.json", "r") as f:
            b = json.load(f)
        used = b["used"]
        budget = b["budget"]
        percent = round((used / budget) * 100, 2) if budget else 0
        bot.reply_to(message, f"üìä *–ë—é–¥–∂–µ—Ç*: {used} / {budget} USDT (*{percent}% –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ*)", parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# /set_budget 100
@bot.message_handler(commands=["set_budget"])
def set_budget(message):
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            bot.reply_to(message, "‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: /set_budget 100")
            return
        new_budget = float(parts[1])
        with open("budget.json", "r") as f:
            b = json.load(f)
        b["budget"] = new_budget
        with open("budget.json", "w") as f:
            json.dump(b, f)
        bot.reply_to(message, f"‚úÖ –ù–æ–≤–∏–π –±—é–¥–∂–µ—Ç: *{new_budget}* USDT", parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
@bot.message_handler(commands=["menu"])
def show_menu(message):
    bot.send_message(message.chat.id, "üìã –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=get_main_keyboard())
# üóÉÔ∏è –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —É–≥–æ–¥
def save_trade_history(entries, action):
    today = datetime.now().strftime("%Y-%m-%d %H:%M")
    for entry in entries:
        entry["action"] = action
        entry["date"] = today
    try:
        history_file = "trade_history.json"
        if os.path.exists(history_file):
            with open(history_file, "r") as f:
                history = json.load(f)
        else:
            history = []
        history.extend(entries)
        with open(history_file, "w") as f:
            json.dump(history, f, indent=2)
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:", e)

# Healthcheck Flask app
health_app = Flask(__name__)

@health_app.route("/health")
def health():
    return "OK", 200

def run_flask():
    health_app.run(host="0.0.0.0", port=10000)

# –ó–∞–ø—É—Å–∫ Flask —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
flask_thread = Thread(target=run_flask)
flask_thread.start()


# ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    bot.polling(none_stop=True)



