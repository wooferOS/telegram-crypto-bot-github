import os
import logging
import telebot
import openai
import schedule
import time
import matplotlib.pyplot as plt
from datetime import datetime
from binance.client import Client
import requests

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    filename='daily_analysis.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY
binance_client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)

# --- Telegram –∫–æ–º–∞–Ω–¥–∏ ---
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø CryptoBot. –ù–∞–ø–∏—à–∏ /menu –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")

@bot.message_handler(commands=['menu'])
def menu(message):
    menu_text = (
        "üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äî –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n"
        "/status ‚Äî –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å Binance\n"
        "/report ‚Äî GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞\n"
        "/buy ‚Äî –ö—É–ø–∏—Ç–∏ BTCUSDT\n"
        "/sell ‚Äî –ü—Ä–æ–¥–∞—Ç–∏ BTCUSDT\n"
        "/help ‚Äî –ü—ñ–¥–∫–∞–∑–∫–∞"
    )
    bot.send_message(message.chat.id, menu_text)

@bot.message_handler(commands=['status'])
def status_handler(message):
    try:
        account = binance_client.get_account()
        assets = [f"{a['asset']}: {a['free']}" for a in account['balances'] if float(a['free']) > 0.0]
        text = "üíº –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å Binance:\n" + "\n".join(assets)
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['report'])
def report_handler(message):
    try:
        btc = binance_client.get_symbol_ticker(symbol="BTCUSDT")
        eth = binance_client.get_symbol_ticker(symbol="ETHUSDT")
        prompt = f"BTC: {btc['price']}, ETH: {eth['price']}. –©–æ –∫—É–ø–∏—Ç–∏ –∞–±–æ –ø—Ä–æ–¥–∞—Ç–∏?"

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        reply = response.choices[0].message.content.strip()
        bot.send_message(message.chat.id, f"ü§ñ GPT –∫–∞–∂–µ:\n{reply}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå GPT-–∑–≤—ñ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")

@bot.message_handler(commands=['buy'])
def buy_handler(message):
    try:
        order = binance_client.create_order(
            symbol='BTCUSDT',
            side='BUY',
            type='MARKET',
            quantity=0.0002
        )
        bot.send_message(message.chat.id, f"‚úÖ –ö—É–ø—ñ–≤–ª—è –≤–∏–∫–æ–Ω–∞–Ω–∞: {order['fills'][0]['qty']} BTC")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫—É–ø—ñ–≤–ª—ñ: {e}")

@bot.message_handler(commands=['sell'])
def sell_handler(message):
    try:
        order = binance_client.create_order(
            symbol='BTCUSDT',
            side='SELL',
            type='MARKET',
            quantity=0.0002
        )
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–¥–∞–∂ –≤–∏–∫–æ–Ω–∞–Ω–æ: {order['fills'][0]['qty']} BTC")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–¥–∞–∂—É: {e}")

@bot.message_handler(commands=['help'])
def help_handler(message):
    bot.send_message(message.chat.id, "üÜò –ù–∞–ø–∏—à–∏ /menu —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏")

@bot.message_handler(func=lambda m: True)
def fallback(message):
    bot.send_message(message.chat.id, "‚ùî –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /menu")

# --- –ì—Ä–∞—Ñ—ñ–∫ —Ç–∞ —â–æ–¥–µ–Ω–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ ---
def run_daily_analysis():
    try:
        prices = binance_client.get_all_tickers()
        top = sorted([(p['symbol'], float(p['price'])) for p in prices if 'USDT' in p['symbol']], key=lambda x: -x[1])[:10]

        # –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
        symbols = [x[0] for x in top]
        values = [x[1] for x in top]
        plt.figure(figsize=(10,5))
        plt.bar(symbols, values, color='skyblue')
        plt.title("–¢–æ–ø 10 –º–æ–Ω–µ—Ç –ø–æ —Ü—ñ–Ω—ñ")
        plt.xticks(rotation=45)
        plt.tight_layout()
        filename = f"top10_{datetime.now().strftime('%Y%m%d')}.png"
        plt.savefig(filename)

        summary = "üìà –¢–æ–ø 10 –º–æ–Ω–µ—Ç Binance:\n" + "\n".join([f"{s}: {v:.2f}" for s,v in top])
        with open(filename, 'rb') as photo:
            bot.send_photo(ADMIN_CHAT_ID, photo=photo, caption=summary)

        logging.info("‚úÖ –ó–≤—ñ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logging.error(f"‚ùå –ó–≤—ñ—Ç –Ω–µ –≤–¥–∞–ª–æ—Å—å –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏: {e}")

# --- –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ 09:00 ---
schedule.every().day.at("09:00").do(run_daily_analysis)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    bot.send_message(ADMIN_CHAT_ID, f"üöÄ Crypto Bot –∑–∞–ø—É—â–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    while True:
        schedule.run_pending()
        time.sleep(60)
        bot.polling(none_stop=True)
