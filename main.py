# üì¶ main.py ‚Äî Telegram –±–æ—Ç –¥–ª—è GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ Binance

import logging
import os
import json
from dotenv import load_dotenv
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from binance.client import Client
from datetime import datetime
from flask import Flask
from threading import Thread
from daily_analysis import generate_daily_report
import asyncio

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

bot = TeleBot(TELEGRAM_TOKEN)
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)
# üì≤ –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å"),
        KeyboardButton("üìà –ó–≤—ñ—Ç"),
        KeyboardButton("üìú –Ü—Å—Ç–æ—Ä—ñ—è"),
        KeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é"),
        KeyboardButton("‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂"),
        KeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏"),
        KeyboardButton("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏")
    )
    return keyboard

# üéâ –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@bot.message_handler(commands=["start"])
def send_welcome(message):
    text = "ü§ñ *–í—ñ—Ç–∞—é —É Telegram Crypto Bot!* –û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∑ –º–µ–Ω—é."
    bot.reply_to(message, text, parse_mode="Markdown", reply_markup=get_main_keyboard())
# üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å Binance
def get_binance_balance():
    try:
        account_info = client.get_account()
        balances = account_info["balances"]
        filtered = [b for b in balances if float(b["free"]) > 0 or float(b["locked"]) > 0]
        result = []
        for b in filtered:
            asset = b["asset"]
            free = float(b["free"])
            locked = float(b["locked"])
            total = free + locked
            result.append(f"{asset}: {total:.4f}")
        return "\n".join(result)
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}"

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ üìä –ë–∞–ª–∞–Ω—Å
@bot.message_handler(func=lambda msg: msg.text == "üìä –ë–∞–ª–∞–Ω—Å")
def handle_balance(msg):
    bot.send_message(msg.chat.id, "üìä –í–∞—à –±–∞–ª–∞–Ω—Å:\n" + get_binance_balance())
# üìã –ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
def get_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìä –ë–∞–ª–∞–Ω—Å", "üìà –ó–≤—ñ—Ç")
    kb.row("üïò –Ü—Å—Ç–æ—Ä—ñ—è", "‚ôªÔ∏è –û–Ω–æ–≤–∏—Ç–∏")
    kb.row("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é", "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂")
    kb.row("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
    return kb

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /menu –∞–±–æ –∫–Ω–æ–ø–∫–∏ "üìã –ú–µ–Ω—é"
@bot.message_handler(commands=["menu"])
def show_menu(message):
    bot.send_message(message.chat.id, "üìã –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=get_main_keyboard())
# üßæ –ö–æ–º–∞–Ω–¥–∞ /balance –∞–±–æ –∫–Ω–æ–ø–∫–∞ "üìä –ë–∞–ª–∞–Ω—Å"
@bot.message_handler(commands=["balance"])
@bot.message_handler(func=lambda message: message.text == "üìä –ë–∞–ª–∞–Ω—Å")
def send_balance(message):
    try:
        account_info = client.get_account()
        balances = account_info["balances"]
        text = "*üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç–∞ Binance:*\n\n"
        total = 0.0
        for b in balances:
            asset = b["asset"]
            free = float(b["free"])
            if free > 0:
                if asset == "USDT":
                    total += free
                text += f"‚Ä¢ {asset}: `{free}`\n"
        text += f"\n*–ó–∞–≥–∞–ª–æ–º (USDT –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç):* `{round(total, 2)} USDT`"
        bot.send_message(message.chat.id, text, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")

# üìà –ö–æ–º–∞–Ω–¥–∞ /report –∞–±–æ –∫–Ω–æ–ø–∫–∞ "üìà –ó–≤—ñ—Ç"
@bot.message_handler(commands=["report"])
@bot.message_handler(func=lambda message: message.text == "üìà –ó–≤—ñ—Ç")
def send_report(message):
    try:
        bot.send_message(message.chat.id, "üì° –§–æ—Ä–º—É—é –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –∑–≤—ñ—Ç...")

        result = run_daily_analysis()
        bot.send_message(message.chat.id, result, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç: {e}")
# ‚úÖ –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫—É–ø—ñ–≤–ª—ñ
@bot.message_handler(commands=["confirmbuy"])
@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é")
def confirm_buy(message):
    try:
        data = load_signal("buy")
        if not data:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—É –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ.")
            return
        coin = data["symbol"]
        quantity = float(data["quantity"])
        price = float(data["price"])

        order = client.order_market_buy(symbol=f"{coin}USDT", quantity=round(quantity, 6))
        bot.send_message(message.chat.id, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {quantity} {coin} –∑–∞ —Ä–∏–Ω–∫–æ–≤–æ—é —Ü—ñ–Ω–æ—é.")

        save_trade_history([{
            "symbol": coin,
            "action": "BUY",
            "quantity": quantity,
            "time": datetime.now().isoformat()
        }], action="BUY")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫—É–ø—ñ–≤–ª—ñ: {e}")

# ‚úÖ –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É
@bot.message_handler(commands=["confirmsell"])
@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂")
def confirm_sell(message):
    try:
        data = load_signal("sell")
        if not data:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É.")
            return
        coin = data["symbol"]
        quantity = float(data["quantity"])
        price = float(data["price"])

        stop_price = round(price * 0.97, 4)
        limit_price = round(price * 1.05, 4)

        client.create_order(
            symbol=f"{coin}USDT",
            side="SELL",
            type="OCO",
            quantity=round(quantity, 6),
            price=str(limit_price),
            stopPrice=str(stop_price),
            stopLimitPrice=str(stop_price),
            stopLimitTimeInForce='GTC'
        )

        bot.send_message(message.chat.id, f"üíöStop-loss: {stop_price} | Take-profit: {limit_price} –¥–ª—è {coin} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        bot.send_message(message.chat.id, f"‚úÖ–ü—Ä–æ–¥–∞–Ω–æ {quantity} {coin}.")

        save_trade_history([{
            "symbol": coin,
            "action": "SELL",
            "quantity": quantity,
            "time": datetime.now().isoformat()
        }], action="SELL")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é: {e}")
# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Ä—É—á–Ω–æ—ó –∫—É–ø—ñ–≤–ª—ñ
@bot.message_handler(commands=["buy"])
def handle_buy(message):
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.send_message(message.chat.id, "‚ùó –§–æ—Ä–º–∞—Ç: /buy BTC 0.01")
            return
        coin = args[1].upper()
        quantity = float(args[2])
        price = float(client.get_symbol_ticker(symbol=f"{coin}USDT")["price"])

        save_signal("buy", {
            "symbol": coin,
            "quantity": quantity,
            "price": price
        })
        bot.send_message(message.chat.id, f"üì• –°–∏–≥–Ω–∞–ª –∫—É–ø—ñ–≤–ª—ñ {quantity} {coin} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–ù–∞—Ç–∏—Å–Ω–∏ *‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é*", parse_mode="Markdown")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–∂—É
@bot.message_handler(commands=["sell"])
def handle_sell(message):
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.send_message(message.chat.id, "‚ùó –§–æ—Ä–º–∞—Ç: /sell BTC 0.01")
            return
        coin = args[1].upper()
        quantity = float(args[2])
        price = float(client.get_symbol_ticker(symbol=f"{coin}USDT")["price"])

        save_signal("sell", {
            "symbol": coin,
            "quantity": quantity,
            "price": price
        })
        bot.send_message(message.chat.id, f"üì§ –°–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂—É {quantity} {coin} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–ù–∞—Ç–∏—Å–Ω–∏ *‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂*", parse_mode="Markdown")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
# ‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫—É–ø—ñ–≤–ª—ñ
@bot.message_handler(commands=["confirmbuy"])
def confirm_buy(message):
    try:
        with open("signals.json", "r") as f:
            data = json.load(f)
        buy = data.get("buy", {})
        coin = buy["symbol"]
        quantity = float(buy["quantity"])
        price = float(client.get_symbol_ticker(symbol=f"{coin}USDT")["price"])

        client.order_market_buy(
            symbol=f"{coin}USDT",
            quantity=quantity
        )
        bot.send_message(message.chat.id, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {quantity} {coin} –∑–∞ —Ü—ñ–Ω–æ—é ~{price}")

        save_trade_history([{
            "symbol": coin,
            "action": "BUY",
            "quantity": quantity,
            "time": datetime.now().isoformat()
        }], action="BUY")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫—É–ø—ñ–≤–ª—ñ: {e}")

# ‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É –∑ Stop-Loss / Take-Profit
@bot.message_handler(commands=["confirmsell"])
def confirm_sell(message):
    try:
        with open("signals.json", "r") as f:
            data = json.load(f)
        sell = data.get("sell", {})
        coin = sell["symbol"]
        quantity = float(sell["quantity"])
        price = float(client.get_symbol_ticker(symbol=f"{coin}USDT")["price"])

        stop_price = round(price * 0.97, 4)      # -3%
        limit_price = round(price * 1.05, 4)     # +5%

        client.create_order(
            symbol=f"{coin}USDT",
            side="SELL",
            type="OCO",
            quantity=round(quantity, 6),
            price=str(limit_price),
            stopPrice=str(stop_price),
            stopLimitPrice=str(stop_price),
            stopLimitTimeInForce='GTC'
        )

        bot.send_message(message.chat.id, f"üíöStop-loss: {stop_price} | Take-profit: {limit_price} –¥–ª—è {coin} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        bot.send_message(message.chat.id, f"‚úÖ–ü—Ä–æ–¥–∞–Ω–æ {quantity} {coin}.")

        save_trade_history([{
            "symbol": coin,
            "action": "SELL",
            "quantity": quantity,
            "time": datetime.now().isoformat()
        }], action="SELL")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é: {e}")
# üí∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç—É
@bot.message_handler(commands=["set_budget"])
def set_budget(message):
    msg = bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏ –±—é–¥–∂–µ—Ç —É USDT:")
    bot.register_next_step_handler(msg, save_budget)

def save_budget(message):
    try:
        new_budget = float(message.text)
        with open("budget.json", "w") as f:
            json.dump({"budget": new_budget}, f)
        bot.reply_to(message, f"‚úÖ –ù–æ–≤–∏–π –±—é–¥–∂–µ—Ç: *{new_budget}* USDT", parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
@bot.message_handler(commands=["menu"])
def show_menu(message):
    bot.send_message(message.chat.id, "üìã –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=get_main_keyboard())

# üóÉÔ∏è –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —É–≥–æ–¥
def save_trade_history(entries, action):
    today = datetime.now().strftime("%Y-%m-%d %H:%M")
    for entry in entries:
        entry["action"] = action
        entry["date"] = today
    try:
        history_file = "trade_history.json"
        if os.path.exists(history_file):
            with open(history_file, "r") as f:
                history = json.load(f)
        else:
            history = []
        history.extend(entries)
        with open(history_file, "w") as f:
            json.dump(history, f, indent=2)
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:", e)
# Healthcheck Flask app
health_app = Flask(__name__)

@health_app.route("/health")
def health():
    return "OK", 200

def run_flask():
    health_app.run(host="0.0.0.0", port=10000)

# –ó–∞–ø—É—Å–∫ Flask —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
flask_thread = Thread(target=run_flask)
flask_thread.start()

# ‚úÖ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    bot.polling(none_stop=True)
