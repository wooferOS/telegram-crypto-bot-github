import telebot
import datetime
import os
from dotenv import load_dotenv
from binance.client import Client
from openai import OpenAI
import logging

# ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .env")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .env")
if not BINANCE_API_KEY or not BINANCE_SECRET_KEY:
    raise ValueError("‚ùå Binance API –∫–ª—é—á—ñ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ .env")

# ü§ñ Telegram-–±–æ—Ç
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# üìà Binance API
binance_client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)

# üß† GPT
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# üìù –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


# üìã –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
def main_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("/status", "/report")
    markup.row("/buy BTCUSDT 50", "/sell BTCUSDT 0.001")
    markup.row("/set_budget", "/set_pair")
    markup.row("/history", "/help")
    return markup


# üü¢ /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, "üëã –í—ñ—Ç–∞—é! –Ø –ö—Ä–∏–ø—Ç–æ–±–æ—Ç. –í–≤–µ–¥–∏ /menu –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥.")


# üìã /menu
@bot.message_handler(commands=['menu'])
def handle_menu(message):
    bot.send_message(message.chat.id, "üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:", reply_markup=main_keyboard())


# üìä /report ‚Äî –∑–≤—ñ—Ç –∑ Binance + GPT
@bot.message_handler(commands=['report'])
def handle_report(message):
    user_id = message.chat.id
    now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

    try:
        balances = binance_client.get_asset_balance(asset='USDT')
        balance = round(float(balances['free']), 2)

        gpt_prompt = f"""
        –¢–∏ —î –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª—ñ—Ç–∏–∫–æ–º. –ù–∞ {now} —Å—Ñ–æ—Ä–º—É–π –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç:
        1. –©–æ –∫—Ä–∞—â–µ –ø—Ä–æ–¥–∞—Ç–∏ –∑ –ø–∞—Ä–∏ BTC/ETH/BNB?
        2. –©–æ –∫—Ä–∞—â–µ –∫—É–ø–∏—Ç–∏ —Å–µ—Ä–µ–¥ —Ç–æ–ø-10 –º–æ–Ω–µ—Ç?
        3. –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π Stop Loss, Take Profit —ñ –æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å.
        """

        chat = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª—ñ—Ç–∏–∫, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ –π —Ç–µ—Ö–Ω—ñ—á–Ω–æ."},
                {"role": "user", "content": gpt_prompt}
            ],
            temperature=0.4
        )

        gpt_reply = chat.choices[0].message.content.strip()

        report = f"""üìä –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç ({now})

üí∞ –ë–∞–ª–∞–Ω—Å: {balance} USDT

üìà GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:
{gpt_reply}

üëâ –î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ–π:
/confirm_buy –∞–±–æ /confirm_sell
"""
        bot.send_message(user_id, report)

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ—Ç—É: {e}")
        bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")


# ‚úÖ /confirm_buy
@bot.message_handler(commands=['confirm_buy'])
def handle_confirm_buy(message):
    bot.send_message(message.chat.id, "üü¢ –ö—É–ø—ñ–≤–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞. –û—Ä–¥–µ—Ä –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")


# ‚ùå /confirm_sell
@bot.message_handler(commands=['confirm_sell'])
def handle_confirm_sell(message):
    bot.send_message(message.chat.id, "üî¥ –ü—Ä–æ–¥–∞–∂ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –û—Ä–¥–µ—Ä –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")


# üì• /buy <symbol> <amount>
@bot.message_handler(commands=['buy'])
def handle_buy(message):
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.send_message(message.chat.id, "‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: /buy BTCUSDT 50")
            return
        symbol = args[1].upper()
        usdt_amount = float(args[2])

        price = float(binance_client.get_symbol_ticker(symbol=symbol)['price'])
        quantity = round(usdt_amount / price, 6)

        order = binance_client.create_order(
            symbol=symbol,
            side='BUY',
            type='MARKET',
            quantity=quantity
        )

        bot.send_message(message.chat.id, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {quantity} {symbol} –Ω–∞ {usdt_amount} USDT")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫—É–ø—ñ–≤–ª—ñ. –ü–µ—Ä–µ–≤—ñ—Ä —Å–∏–º–≤–æ–ª –∞–±–æ –±–∞–ª–∞–Ω—Å.")


# üì§ /sell <symbol> <amount>
@bot.message_handler(commands=['sell'])
def handle_sell(message):
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.send_message(message.chat.id, "‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: /sell BTCUSDT 0.001")
            return
        symbol = args[1].upper()
        quantity = float(args[2])

        order = binance_client.create_order(
            symbol=symbol,
            side='SELL',
            type='MARKET',
            quantity=quantity
        )

        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {quantity} {symbol}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–¥–∞–∂—É: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂—É. –ü–µ—Ä–µ–≤—ñ—Ä —Å–∏–º–≤–æ–ª –∞–±–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å.")


# ‚ÑπÔ∏è /status
@bot.message_handler(commands=['status'])
def handle_status(message):
    bot.send_message(message.chat.id, "üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ.")


# ‚ùì /help
@bot.message_handler(commands=['help'])
def handle_help(message):
    bot.send_message(message.chat.id, "üõü –î–æ–ø–æ–º–æ–≥–∞:\n/menu ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/report ‚Äî GPT-–∑–≤—ñ—Ç\n/buy <symbol> <usdt>\n/sell <symbol> <amount>\n/confirm_buy ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é\n/confirm_sell ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂")

# üîÑ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("ü§ñ Telegram –±–æ—Ç —Å—Ç–∞—Ä—Ç—É—î...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
