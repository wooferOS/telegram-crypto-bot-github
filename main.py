import os
from dotenv import load_dotenv

dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
load_dotenv(dotenv_path)

import json
import logging
from datetime import datetime
from binance.client import Client
from binance.exceptions import BinanceAPIException
from openai import OpenAI
import requests
from telegram import Bot
from telegram.constants import ParseMode
import traceback
import asyncio

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
LOG_FILE = "daily.log"
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format="%(asctime)s %(levelname)s:%(message)s")
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ .env
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)
openai_client = OpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=TELEGRAM_TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
WHITELIST_PATH = "whitelist.json"
UAH_RATE = 43.0  # –∫—É—Ä—Å –≥—Ä–∏–≤–Ω—ñ
# –û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –∑ Binance
def get_binance_balance():
    balances = client.get_account()["balances"]
    result = {}
    for asset in balances:
        free = float(asset["free"])
        if free > 0:
            symbol = asset["asset"]
            if symbol.endswith("UP") or symbol.endswith("DOWN"):
                continue
            result[symbol] = free
    return result

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ whitelist
def load_whitelist():
    if os.path.exists(WHITELIST_PATH):
        with open(WHITELIST_PATH, "r") as f:
            return json.load(f)
    return []

# –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –º–æ–Ω–µ—Ç–∏ –≤ USDT
def get_price(symbol):
    try:
        if symbol == "USDT":
            return 1.0
        return float(client.get_symbol_ticker(symbol=f"{symbol}USDT")["price"])
    except Exception:
        return None
# –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —á–∏—Å–ª–æ –∑ 2 –∑–Ω–∞–∫–∞–º–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏
def fmt(x):
    return f"{x:.2f}"

# GPT-–∑–∞–ø–∏—Ç –Ω–∞ –±–∞–∑—ñ –æ–ø–∏—Å—É —Ä–∏–Ω–∫—É
async def ask_gpt(prompt):
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª—ñ—Ç–∏–∫. –î–∞–≤–∞–π —á—ñ—Ç–∫—ñ —Ç–æ—Ä–≥–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞ 24-–≥–æ–¥–∏–Ω–Ω–æ—é –¥–∏–Ω–∞–º—ñ–∫–æ—é. –ù–µ –¥–æ–¥–∞–≤–∞–π —Ñ—Ä–∞–∑ —Ç–∏–ø—É '—è –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π —Ä–∞–¥–Ω–∏–∫'."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.4,
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"‚ùå GPT-–ø–æ–º–∏–ª–∫–∞: {e}")
        return "GPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ whitelist –º–æ–Ω–µ—Ç
def load_whitelist():
    try:
        with open(WHITELIST_PATH, "r") as f:
            return json.load(f)
    except:
        return []

# –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å —É Binance
def get_current_holdings():
    holdings = {}
    prices = client.get_all_tickers()
    ticker_price = {item["symbol"]: float(item["price"]) for item in prices}

    account = client.get_account()
    for balance in account["balances"]:
        asset = balance["asset"]
        free = float(balance["free"])
        if free > 0:
            symbol = asset + "USDT"
            price = ticker_price.get(symbol, 0)
            holdings[asset] = {
                "amount": free,
                "price": price,
                "value_usdt": free * price
            }
    return holdings
# PNL –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–Ω–µ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ü—ñ–Ω
def load_previous_snapshot():
    try:
        with open("prev_snapshot.json", "r") as f:
            return json.load(f)
    except:
        return {}

def save_current_snapshot(data):
    with open("prev_snapshot.json", "w") as f:
        json.dump(data, f)

def calculate_daily_pnl(current, previous):
    pnl = {}
    for asset, info in current.items():
        prev_info = previous.get(asset)
        if prev_info:
            change = ((info["price"] - prev_info["price"]) / prev_info["price"]) * 100
            pnl[asset] = round(change, 2)
        else:
            pnl[asset] = 0.0
    return pnl

def convert_to_uah(usdt_amount):
    return round(usdt_amount * UAH_RATE, 2)
def format_portfolio_report(balance_info, pnl_data, recommendations, total_expected_profit):
    lines = ["üìä *–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é*",
             f"üïí –°—Ç–∞–Ω–æ–º –Ω–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ""]

    lines.append("*üíº –ë–∞–ª–∞–Ω—Å:*")
    for asset, data in balance_info.items():
        usdt_val = round(data["usdt_value"], 2)
        avg_price = data.get("avg_price", "‚Äî")
        pnl = pnl_data.get(asset, 0)
        uah_val = convert_to_uah(usdt_val)
        lines.append(f"‚Ä¢ {asset}: {data['amount']} (~{usdt_val} USDT | {uah_val} UAH) | –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: {avg_price} | PNL: {pnl}%")
    lines.append("")

    lines.append("*üìâ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –ø—Ä–æ–¥–∞—Ç–∏:*")
    if recommendations["sell"]:
        for item in recommendations["sell"]:
            lines.append(f"‚Ä¢ {item['symbol']}: –ø—Ä–æ–≥–Ω–æ–∑ —Å–ª–∞–±–∫–∏–π, –ø—Ä–æ–¥–∞—á–∞ –≤–∏–≥—ñ–¥–Ω–∞")
    else:
        lines.append("‚Ä¢ –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏.")
    lines.append("")

    lines.append("*üìà –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –∫—É–ø–∏—Ç–∏:*")
    if recommendations["buy"]:
        for item in recommendations["buy"]:
            sl = item.get("stop_loss")
            tp = item.get("take_profit")
            lines.append(f"‚Ä¢ {item['symbol']}: –≤–∏–≥—ñ–¥–Ω–∞ –¥–∏–Ω–∞–º—ñ–∫–∞ | –û—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {item['expected_profit']}% | SL: {sl} | TP: {tp}")
    else:
        lines.append("‚Ä¢ –ù–µ–º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –¥–æ–±—É.")
    lines.append("")

    lines.append(f"üí∞ *–°—É–º–∞—Ä–Ω–∏–π –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∑–∞ –¥–æ–±—É:* ~{total_expected_profit}%")

    return "\n".join(lines)
async def generate_daily_report():
    try:
        balance_info = get_portfolio_balance()
        prices = get_whitelist_prices()
        pnl_data = calculate_pnl(balance_info)
        recommendations = analyze_market(prices, balance_info)
        total_expected_profit = round(sum(item["expected_profit"] for item in recommendations["buy"]), 2)

        report = format_portfolio_report(balance_info, pnl_data, recommendations, total_expected_profit)
        logging.info("‚úÖ GPT-–∑–≤—ñ—Ç —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ")

        bot.send_message(chat_id=ADMIN_CHAT_ID, text=report, parse_mode=ParseMode.MARKDOWN)
        logging.info("üì§ –ó–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram")

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É: {e}")
        traceback.print_exc()
        bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É:\n{e}")
def run_daily_analysis():
    asyncio.run(generate_daily_report())


if __name__ == "__main__":
    run_daily_analysis()
    
# üìò –ö—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É daily_analysis.py
# üîÅ –¶–µ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —â–æ–¥–Ω—è —á–µ—Ä–µ–∑ GitHub Actions –∞–±–æ –≤—Ä—É—á–Ω—É
# üöÄ –°—Ç–≤–æ—Ä—é—î –∑–≤—ñ—Ç, –Ω–∞–¥—Å–∏–ª–∞—î –≤ Telegram, –ø—Ä–æ–≥–Ω–æ–∑—É—î —É–≥–æ–¥–∏
