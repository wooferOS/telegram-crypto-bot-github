# ‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∏–π main.py –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –±—é–¥–∂–µ—Ç—ñ–≤, –ø–∞—Ä, —ñ—Å—Ç–æ—Ä—ñ—ó, –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏, –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —Ç–∞ Binance

import os
from dotenv import load_dotenv
load_dotenv()
import json
import logging
import matplotlib.pyplot as plt
from datetime import datetime
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import CommandHandler, MessageHandler, filters, ApplicationBuilder, ContextTypes
from binance.client import Client
import openai

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ó–º—ñ–Ω–Ω—ñ ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DATA_PATH = "settings.json"

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
bot = Bot(token=TELEGRAM_TOKEN)
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
openai.api_key = OPENAI_API_KEY
binance_client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å ---
def load_settings():
    if os.path.exists(DATA_PATH):
        with open(DATA_PATH, "r") as f:
            return json.load(f)
    return {"budget": 100.0, "pair": "BTCUSDT", "history": []}

def save_settings(settings):
    with open(DATA_PATH, "w") as f:
        json.dump(settings, f, indent=2)

settings = load_settings()

# --- –ö–æ–º–∞–Ω–¥–∏ ---
async def –ø–æ—á–∞—Ç–æ–∫(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("/–ø–æ—á–∞—Ç–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ")
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –Ø –ö—Ä–∏–ø—Ç–æ–ë–æ—Ç. –í–≤–µ–¥–∏ /–º–µ–Ω—é –¥–ª—è –∫–æ–º–∞–Ω–¥")

async def –º–µ–Ω—é(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("/–º–µ–Ω—é –æ—Ç—Ä–∏–º–∞–Ω–æ")
    keyboard = [["/–±–∞–ª–∞–Ω—Å", "/–∑–≤—ñ—Ç"], ["/–∫—É–ø–∏—Ç–∏", "/–ø—Ä–æ–¥–∞—Ç–∏"], ["/–±—é–¥–∂–µ—Ç", "/–ø–∞—Ä–∞"], ["/—ñ—Å—Ç–æ—Ä—ñ—è", "/–¥–æ–ø–æ–º–æ–≥–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:", reply_markup=reply_markup)

async def –±—é–¥–∂–µ—Ç(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("/–±—é–¥–∂–µ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ")
    try:
        amount = float(context.args[0])
        settings["budget"] = amount
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –ë—é–¥–∂–µ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: ${amount}")
    except:
        await update.message.reply_text("‚ùó –ü—Ä–∏–∫–ª–∞–¥: /–±—é–¥–∂–µ—Ç 150.0")

async def –ø–∞—Ä–∞(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("/–ø–∞—Ä–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ")
    try:
        pair = context.args[0].upper()
        settings["pair"] = pair
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –ü–∞—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞: {pair}")
    except:
        await update.message.reply_text("‚ùó –ü—Ä–∏–∫–ª–∞–¥: /–ø–∞—Ä–∞ BTCUSDT")

async def —ñ—Å—Ç–æ—Ä—ñ—è(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("/—ñ—Å—Ç–æ—Ä—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–æ")
    hist = settings.get("history", [])
    if not hist:
        await update.message.reply_text("üì≠ –£–≥–æ–¥ —â–µ –Ω–µ –±—É–ª–æ")
    else:
        text = "\n".join([f"{i+1}. {item}" for i, item in enumerate(hist[-5:])])
        await update.message.reply_text(f"üìò –Ü—Å—Ç–æ—Ä—ñ—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —É–≥–æ–¥:\n{text}")

async def –±–∞–ª–∞–Ω—Å(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("/–±–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏–º–∞–Ω–æ")
    try:
        account = binance_client.get_account()
        assets = [f"{a['asset']}: {a['free']}" for a in account['balances'] if float(a['free']) > 0.0]
        text = "üíº –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å Binance:\n" + "\n".join(assets)
        await update.message.reply_text(text)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def –∑–≤—ñ—Ç(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("/–∑–≤—ñ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ")
    try:
        btc = binance_client.get_symbol_ticker(symbol="BTCUSDT")
        eth = binance_client.get_symbol_ticker(symbol="ETHUSDT")
        prompt = f"BTC: {btc['price']}, ETH: {eth['price']}. –©–æ –∫—É–ø–∏—Ç–∏ –∞–±–æ –ø—Ä–æ–¥–∞—Ç–∏?"

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        reply = response.choices[0].message.content.strip()
        await update.message.reply_text(f"ü§ñ GPT –∫–∞–∂–µ:\n{reply}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå GPT-–∑–≤—ñ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")

async def –∫—É–ø–∏—Ç–∏(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("/–∫—É–ø–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ")
    try:
        order = binance_client.create_order(
            symbol=settings["pair"],
            side='BUY',
            type='MARKET',
            quantity=0.0002
        )
        settings["history"].append(f"–ö—É–ø–ª–µ–Ω–æ {order['symbol']} - {order['fills'][0]['qty']}")
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –ö—É–ø—ñ–≤–ª—è –≤–∏–∫–æ–Ω–∞–Ω–∞: {order['fills'][0]['qty']} {order['symbol']}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫—É–ø—ñ–≤–ª—ñ: {e}")

async def –ø—Ä–æ–¥–∞—Ç–∏(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("/–ø—Ä–æ–¥–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ")
    try:
        order = binance_client.create_order(
            symbol=settings["pair"],
            side='SELL',
            type='MARKET',
            quantity=0.0002
        )
        settings["history"].append(f"–ü—Ä–æ–¥–∞–Ω–æ {order['symbol']} - {order['fills'][0]['qty']}")
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –ü—Ä–æ–¥–∞–∂ –≤–∏–∫–æ–Ω–∞–Ω–æ: {order['fills'][0]['qty']} {order['symbol']}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–¥–∞–∂—É: {e}")

async def –¥–æ–ø–æ–º–æ–≥–∞(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üÜò –ù–∞–ø–∏—à–∏ /–º–µ–Ω—é —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏")

async def –Ω–µ–≤—ñ–¥–æ–º–∞(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –Ø –≤–∞—Å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤. –í–≤–µ–¥–∏ /–º–µ–Ω—é –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥")

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ ---
app.add_handler(CommandHandler("–ø–æ—á–∞—Ç–æ–∫", –ø–æ—á–∞—Ç–æ–∫))
app.add_handler(CommandHandler("–º–µ–Ω—é", –º–µ–Ω—é))
app.add_handler(CommandHandler("–±—é–¥–∂–µ—Ç", –±—é–¥–∂–µ—Ç))
app.add_handler(CommandHandler("–ø–∞—Ä–∞", –ø–∞—Ä–∞))
app.add_handler(CommandHandler("—ñ—Å—Ç–æ—Ä—ñ—è", —ñ—Å—Ç–æ—Ä—ñ—è))
app.add_handler(CommandHandler("–±–∞–ª–∞–Ω—Å", –±–∞–ª–∞–Ω—Å))
app.add_handler(CommandHandler("–∑–≤—ñ—Ç", –∑–≤—ñ—Ç))
app.add_handler(CommandHandler("–∫—É–ø–∏—Ç–∏", –∫—É–ø–∏—Ç–∏))
app.add_handler(CommandHandler("–ø—Ä–æ–¥–∞—Ç–∏", –ø—Ä–æ–¥–∞—Ç–∏))
app.add_handler(CommandHandler("–¥–æ–ø–æ–º–æ–≥–∞", –¥–æ–ø–æ–º–æ–≥–∞))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), –Ω–µ–≤—ñ–¥–æ–º–∞))

# --- –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ---
async def run_bot():
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text="‚úÖ –ö—Ä–∏–ø—Ç–æ–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –ø–æ–≤–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    import nest_asyncio
    print("‚úÖ –í–ï–†–°–Ü–Ø: GPT+Binance Telegram Bot –∑–∞–ø—É—â–µ–Ω–æ")

    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.create_task(run_bot())
    loop.run_forever()
