# üì¶ main.py ‚Äî Telegram GPT-–∫—Ä–∏–ø—Ç–æ–±–æ—Ç —ñ–∑ Flask, APScheduler —Ç–∞ GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é

import os
import json
import logging
import threading
from datetime import datetime
from dotenv import load_dotenv
from flask import Flask, request, jsonify
from telebot import TeleBot, types
from binance.client import Client
from apscheduler.schedulers.background import BackgroundScheduler
from daily_analysis import run_daily_analysis, get_usdt_to_uah_rate
from binance_api import get_current_portfolio
from daily_analysis import get_historical_data

# üîê –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv(".env")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
print(f"üß™ TELEGRAM_TOKEN loaded: {TELEGRAM_TOKEN[:10]}")  # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# ü§ñ Telegram-–±–æ—Ç —ñ Binance API
bot = TeleBot(TELEGRAM_TOKEN)
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)
# üåê Flask-—Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route("/health")
def health():
    return "‚úÖ OK", 200


# üí∞ –ë—é–¥–∂–µ—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
budget = {"USDT": 100}

# üìã –ë–∞–∑–æ–≤–∏–π whitelist –∞–∫—Ç–∏–≤—ñ–≤
WHITELIST = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT", "ADAUSDT",
    "DOGEUSDT", "AVAXUSDT", "DOTUSDT", "TRXUSDT", "LINKUSDT", "MATICUSDT",
    "LTCUSDT", "BCHUSDT", "ATOMUSDT", "NEARUSDT", "FILUSDT", "ICPUSDT",
    "ETCUSDT", "HBARUSDT", "VETUSDT", "RUNEUSDT", "INJUSDT", "OPUSDT",
    "ARBUSDT", "SUIUSDT", "STXUSDT", "TIAUSDT", "SEIUSDT", "1000PEPEUSDT"
]
# üß† –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤
def load_signal():
    try:
        with open("signal.json", "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_signal(signal):
    with open("signal.json", "w") as f:
        json.dump(signal, f)

signal = load_signal()

# ‚å®Ô∏è –û—Å–Ω–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
def get_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìä –ë–∞–ª–∞–Ω—Å", "üìà –ó–≤—ñ—Ç")
    kb.row("üïò –Ü—Å—Ç–æ—Ä—ñ—è", "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é")
    kb.row("‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂", "üîÑ –û–Ω–æ–≤–∏—Ç–∏")
    kb.row("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏")
    return kb

# üì¨ –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É
def send_daily_forecast():
    try:
        current = get_current_portfolio()
        historical = get_historical_data()
        analysis, total_pnl = run_daily_analysis(current, historical)

        if not analysis:
            bot.send_message(ADMIN_CHAT_ID, "‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            return

        usdt_to_uah = get_usdt_to_uah_rate()
        message_text = format_analysis_report(analysis, total_pnl, usdt_to_uah)
        bot.send_message(ADMIN_CHAT_ID, message_text, parse_mode="Markdown")
        print("‚úÖ –©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(ADMIN_CHAT_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:\n{e}")

# üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
@bot.message_handler(commands=["start", "menu"])
def send_welcome(message):
    text = (
        "üëã –í—ñ—Ç–∞—é! –Ø *GPT-–∫—Ä–∏–ø—Ç–æ–±–æ—Ç* –¥–ª—è Binance.\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏:\n"
        "`/balance`, `/report`, `/confirm_buy`, `/confirm_sell`, `/set_budget`, `/zarobyty`, `/stats`"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=get_main_keyboard())

@bot.message_handler(commands=["id"])
def show_id(message):
    bot.reply_to(message, f"–í–∞—à chat ID: `{message.chat.id}`", parse_mode="Markdown")

# üí∞ /set_budget ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
@bot.message_handler(commands=["set_budget"])
def set_budget(message):
    try:
        parts = message.text.strip().split()
        if len(parts) == 2:
            amount = float(parts[1])
            budget["USDT"] = amount
            with open("budget.json", "w") as f:
                json.dump(budget, f)
            bot.reply_to(message, f"‚úÖ –ë—é–¥–∂–µ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: {amount} USDT")
        else:
            bot.reply_to(message, "‚ùóÔ∏è –ü—Ä–∏–∫–ª–∞–¥: `/set_budget 150`", parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# üìä –ë–∞–ª–∞–Ω—Å Binance
def send_balance(message):
    try:
        balances = client.get_account()["balances"]
        response = "üìä *–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:*\n\n"
        total_usdt = 0
        for asset in balances:
            amount = float(asset["free"])
            if amount < 0.01:
                continue
            symbol = asset["asset"]
            try:
                price = float(client.get_symbol_ticker(symbol=f"{symbol}USDT")["price"])
            except:
                continue
            value = amount * price
            total_usdt += value
            response += f"‚ñ´Ô∏è {symbol}: {amount:.4f} ‚âà {value:.2f} USDT\n"
        response += f"\nüí∞ *–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* {total_usdt:.2f} USDT"
        bot.send_message(message.chat.id, response, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# üìà GPT-–∑–≤—ñ—Ç
def send_report(message):
    try:
        bot.send_message(message.chat.id, "‚è≥ –§–æ—Ä–º—É—î—Ç—å—Å—è GPT-–∑–≤—ñ—Ç, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
        current = get_current_portfolio()
        historical = get_historical_data()
        analysis, total_pnl = run_daily_analysis(current, historical)
        usdt_to_uah = get_usdt_to_uah_rate()
        report = format_analysis_report(analysis, total_pnl, usdt_to_uah)
        bot.send_message(message.chat.id, report, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤—ñ—Ç—É:\n{e}")

# ‚úÖ Inline-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂—É + —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.data.startswith("confirmbuy_") or call.data.startswith("confirmsell_"):
            parts = call.data.split("_", 1)
            if len(parts) != 2:
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.")
                return

            action, symbol = parts[0], parts[1]
            action_type = "buy" if action == "confirmbuy" else "sell"
            verb = "–∫—É–ø—ñ–≤–ª—é" if action_type == "buy" else "–ø—Ä–æ–¥–∞–∂"

            bot.send_message(call.message.chat.id, f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ {verb} {symbol}")

            # üß† –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
            timestamp = datetime.utcnow().isoformat()
            signal["last_action"] = {
                "type": action_type,
                "pair": symbol,
                "time": timestamp
            }
            history = signal.get("history", [])
            history.append({
                "type": action_type,
                "pair": symbol,
                "time": timestamp
            })
            signal["history"] = history
            save_signal(signal)

            # üõ° –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–ø—ñ–≤
            success = place_safety_orders(symbol, action_type)
            if success:
                bot.send_message(call.message.chat.id, f"üõ° –°—Ç–æ–ø-–ª–æ—Å/—Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {symbol}.")
            else:
                bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ–ø–∏ –¥–ª—è {symbol}.")
        else:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏: {str(e)}")

def place_safety_orders(symbol: str, action_type: str):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–∏–Ω–∫–æ–≤—É —Ü—ñ–Ω—É
        price_data = client.get_symbol_ticker(symbol=f"{symbol}USDT")
        current_price = float(price_data["price"])

        quantity = 10 / current_price  # üîÅ –¢–∏–º—á–∞—Å–æ–≤–æ ‚Äî $10 –Ω–∞ –æ–¥–Ω—É —É–≥–æ–¥—É

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–ª–µ–π
        if action_type == "buy":
            tp_price = round(current_price * 1.06, 4)
            sl_price = round(current_price * 0.97, 4)
            side = "SELL"
        else:
            tp_price = round(current_price * 0.94, 4)
            sl_price = round(current_price * 1.03, 4)
            side = "BUY"

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è OCO –æ—Ä–¥–µ—Ä–∞
        client.create_oco_order(
            symbol=f"{symbol}USDT",
            side=side,
            quantity=round(quantity, 3),
            price=str(tp_price),
            stopPrice=str(sl_price),
            stopLimitPrice=str(sl_price),
            stopLimitTimeInForce='GTC'
        )

        print(f"‚úÖ –°—Ç–æ–ø–∏ –¥–ª—è {symbol} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ.")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–ø—ñ–≤ –¥–ª—è {symbol}: {e}")
        return False
        
@bot.message_handler(commands=["zarobyty"])
def handle_zarobyty(message):
    print("üî• /zarobyty –æ—Ç—Ä–∏–º–∞–Ω–æ")

    try:
        current = get_current_portfolio()
        historical = get_historical_data()
        analysis, total_pnl = run_daily_analysis(current, historical)

        if not analysis:
            bot.send_message(
                message.chat.id,
                "üìâ –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–º—ñ–Ω –ø–æ–Ω–∞–¥ ¬±1%."
            )
            return

        usdt_to_uah = get_usdt_to_uah_rate()
        message_text = format_analysis_report(analysis, total_pnl, usdt_to_uah)

        bot.send_message(
            message.chat.id,
            message_text,
            parse_mode="Markdown"
        )

    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó /zarobyty:\n{str(e)}"
        )


@bot.message_handler(commands=["stats"])
def handle_stats(message):
    try:
        history = signal.get("history", [])
        if not history:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è. –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è.")
            return

        stats = {"buy": {}, "sell": {}}
        for action in history:
            symbol = action.get("pair")
            action_type = action.get("type")
            time_str = action.get("time")
            if not symbol or not time_str:
                continue
            stats[action_type].setdefault(symbol, 0)
            stats[action_type][symbol] += 1

        text = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—ñ–π:*\n\n"
        if stats["buy"]:
            text += "üü¢ *–ö—É–ø–ª–µ–Ω–æ:*\n"
            for sym, count in stats["buy"].items():
                text += f"‚Ä¢ {sym}: `{count}` —Ä–∞–∑—ñ–≤\n"
        if stats["sell"]:
            text += "\nüîª *–ü—Ä–æ–¥–∞–Ω–æ:*\n"
            for sym, count in stats["sell"].items():
                text += f"‚Ä¢ {sym}: `{count}` —Ä–∞–∑—ñ–≤\n"

        total = sum(stats["buy"].values()) + sum(stats["sell"].values())
        text += f"\nüìà *–ó–∞–≥–∞–ª–æ–º –æ–ø–µ—Ä–∞—Ü—ñ–π:* `{total}`"

        bot.send_message(message.chat.id, text, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É /stats: {e}")
# üéØ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
@bot.message_handler(func=lambda m: True)
def handle_buttons(message):
    text = message.text
    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        send_balance(message)
    elif text == "üìà –ó–≤—ñ—Ç":
        send_report(message)
    elif text == "üïò –Ü—Å—Ç–æ—Ä—ñ—è":
        handle_stats(message)
    elif text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é":
        bot.send_message(message.chat.id, "‚úã –û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ...")
    elif text == "‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂":
        bot.send_message(message.chat.id, "‚úã –û–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É...")
    elif text == "üîÑ –û–Ω–æ–≤–∏—Ç–∏":
        send_report(message)
    elif text == "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(message.chat.id, "‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à—ñ—Ç—å /help –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.")


# üöÄ –ó–∞–ø—É—Å–∫ Telegram polling
def run_polling():
    print("ü§ñ Telegram polling –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.polling(none_stop=True)

# üåê –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
def run_flask():
    print("üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è /health –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 10100")
    app.run(host="0.0.0.0", port=10100)

# üõ† –†—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É (debug endpoint)
@app.route("/run_analysis")
def trigger_daily_analysis():
    try:
        current = get_current_portfolio()
        historical = get_historical_data()

        print("üü° BEFORE run_daily_analysis")

        result = run_daily_analysis(current, historical)

        print(f"üü¢ AFTER run_daily_analysis: {result}")

        analysis, total_pnl = result
        usdt_to_uah = get_usdt_to_uah_rate()
        message_text = format_analysis_report(analysis, total_pnl, usdt_to_uah)
        return jsonify({"status": "ok", "message": message_text}), 200

    except Exception as e:
        print(f"‚ùå EXCEPTION in /run_analysis: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500



        
if __name__ == "__main__":
    scheduler = BackgroundScheduler()
    scheduler.add_job(send_daily_forecast, trigger="cron", hour=9, minute=0)
    scheduler.start()
    print("‚è∞ APScheduler –∑–∞–ø—É—â–µ–Ω–æ ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—å —â–æ–¥–Ω—è –æ 09:00")

    threading.Thread(target=run_polling).start()
    run_flask()

    
# üß™ –û–±—Ä–æ–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ—ó inline-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "test_callback")
def handle_test_callback(call):
    bot.answer_callback_query(call.id, "‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞!")
    bot.send_message(call.message.chat.id, "üß™ –í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –∫–Ω–æ–ø–∫—É.")

# ‚úÖ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
print("üì¶ –ë–æ—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")

# üî¢ –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—ñ–≤ –¥–æ 3 –∑–Ω–∞–∫—ñ–≤
def round_quantity(amount: float) -> float:
    return round(amount, 3)

# üß† –ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)
def append_to_history(entry: dict):
    history = signal.get("history", [])
    history.append(entry)
    signal["history"] = history
    save_signal(signal)

# üîÑ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É USDT ‚Üí UAH (–º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —É /balance –∞–±–æ –º–∞–π–±—É—Ç–Ω—ñ—Ö –∑–≤—ñ—Ç–∞—Ö)
# –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –∑ daily_analysis: get_usdt_to_uah_rate()

# üìÇ JSON-—Ñ–∞–π–ª–∏, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è:
# - signal.json ‚Üí —ñ—Å—Ç–æ—Ä—ñ—è –¥—ñ–π —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—è –¥—ñ—è
# - budget.json ‚Üí –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –±—é–¥–∂–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
# - balance_snapshot.json ‚Üí –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
# üßπ –ó–∞–º—ñ–Ω–∞ legacy:
# –£—Å—è –ª–æ–≥—ñ–∫–∞ –∑ `main_polling_flask.py` –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –¥–æ —Ü—å–æ–≥–æ `main.py`.
# –¢–µ–ø–µ—Ä —Ü–µ–π —Ñ–∞–π–ª –ø—ñ–¥—Ç—Ä–∏–º—É—î:
# - Telegram polling
# - Flask healthcheck
# - /zarobyty + /stats
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É —á–µ—Ä–µ–∑ APScheduler
# - OCO —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–∞
# - –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—ó

# ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ legacy-—Ñ–∞–π–ª:
# ‚û§ `main_polling_flask.py`

# –í–∏–∫–æ–Ω–∞—Ç–∏ —É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ:
# rm main_polling_flask.py
# ‚úÖ –ü—ñ–¥—Å—É–º–æ–∫:
# –¶–µ–π `main.py` —Ç–µ–ø–µ—Ä —î–¥–∏–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è Telegram-–∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞.
# –í—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å:
# - Telegram-–±–æ—Ç —ñ–∑ —É—Å—ñ–º–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏
# - Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è healthcheck —Ç–∞ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª—ñ–∑—É
# - APScheduler –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
# - –ü–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Binance + GPT

# üöÄ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ systemd:
# –§–∞–π–ª: /etc/systemd/system/crypto-bot.service

# [Unit]
# Description=Telegram GPT Crypto Bot
# After=network.target

# [Service]
# WorkingDirectory=/root/telegram-crypto-bot-github
# ExecStart=/usr/bin/python3 main.py
# Restart=always
# EnvironmentFile=/root/telegram-crypto-bot-github/.env

# [Install]
# WantedBy=multi-user.target

# –ü–æ—Ç—ñ–º:
# sudo systemctl daemon-reload
# sudo systemctl restart crypto-bot
# sudo systemctl status crypto-bot
