# main.py ‚Äî Telegram –∫—Ä–∏–ø—Ç–æ–±–æ—Ç –∑ GPT —ñ Binance

import os
import json
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)
from binance.client import Client
from openai import OpenAI

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DATA_PATH = "settings.json"
NOTIFY_FILE = ".notified"

# --- –ö–ª—ñ—î–Ω—Ç–∏ ---
client = OpenAI(api_key=OPENAI_API_KEY)
binance_client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
def load_settings():
    if os.path.exists(DATA_PATH):
        with open(DATA_PATH, "r") as f:
            return json.load(f)
    return {"budget": 100.0, "pair": "BTCUSDT", "history": [], "autotrade": False, "stop_loss": 5.0}

def save_settings(settings):
    with open(DATA_PATH, "w") as f:
        json.dump(settings, f, indent=2)

settings = load_settings()

# --- –ö–æ–º–∞–Ω–¥–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –Ø –ö—Ä–∏–ø—Ç–æ–±–æ—Ç. –í–≤–µ–¥–∏ /menu –¥–ª—è –∫–æ–º–∞–Ω–¥")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["/status", "/report"], ["/buy", "/sell"], ["/set_budget", "/set_pair"], ["/history", "/help"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:", reply_markup=markup)

async def set_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(context.args[0])
        settings["budget"] = amount
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –ë—é–¥–∂–µ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: ${amount}")
    except Exception:
        await update.message.reply_text("‚ùó –ü—Ä–∏–∫–ª–∞–¥: /set_budget 150.0")

async def set_pair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        pair = context.args[0].upper()
        settings["pair"] = pair
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –ü–∞—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞: {pair}")
    except:
        await update.message.reply_text("‚ùó –ü—Ä–∏–∫–ª–∞–¥: /set_pair BTCUSDT")

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    hist = settings.get("history", [])
    if not hist:
        await update.message.reply_text("üìç –£–≥–æ–¥ —â–µ –Ω–µ –±—É–ª–æ")
    else:
        text = "\n".join([f"{i+1}. {item}" for i, item in enumerate(hist[-5:])])
        await update.message.reply_text(f"üìò –Ü—Å—Ç–æ—Ä—ñ—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —É–≥–æ–¥:\n{text}")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        account = binance_client.get_account()
        assets = [f"{a['asset']}: {a['free']}" for a in account['balances'] if float(a['free']) > 0.0]
        await update.message.reply_text("üíº –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å Binance:\n" + "\n".join(assets))
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        btc = binance_client.get_symbol_ticker(symbol="BTCUSDT")
        eth = binance_client.get_symbol_ticker(symbol="ETHUSDT")
        prompt = f"BTC: {btc['price']}, ETH: {eth['price']}. –©–æ –∫—É–ø–∏—Ç–∏ –∞–±–æ –ø—Ä–æ–¥–∞—Ç–∏?"
        chat_response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        reply = chat_response.choices[0].message.content.strip()
        await update.message.reply_text(f"üßê GPT –∫–∞–∂–µ:\n{reply}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå GPT-–∑–≤—ñ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        order = binance_client.create_order(
            symbol=settings["pair"],
            side='BUY',
            type='MARKET',
            quantity=0.0002
        )
        settings["history"].append(f"Buy {order['symbol']} - {order['fills'][0]['qty']}")
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –ö—É–ø—ñ–≤–ª—è –≤–∏–∫–æ–Ω–∞–Ω–∞: {order['fills'][0]['qty']} {order['symbol']}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫—É–ø—ñ–≤–ª—ñ: {e}")

async def sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        order = binance_client.create_order(
            symbol=settings["pair"],
            side='SELL',
            type='MARKET',
            quantity=0.0002
        )
        settings["history"].append(f"Sell {order['symbol']} - {order['fills'][0]['qty']}")
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –ü—Ä–æ–¥–∞–∂ –≤–∏–∫–æ–Ω–∞–Ω–æ: {order['fills'][0]['qty']} {order['symbol']}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–¥–∞–∂—É: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
<b>üìò –î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>
/start ‚Äì –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/menu ‚Äì –∫–Ω–æ–ø–∫–æ–≤–µ –º–µ–Ω—é
/set_pair BTCUSDT ‚Äì –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É
/set_budget 100 ‚Äì –±—é–¥–∂–µ—Ç –Ω–∞ –∫—É–ø—ñ–≤–ª—é
/status ‚Äì –±–∞–ª–∞–Ω—Å Binance
/report ‚Äì GPT —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
/buy ‚Äì –∫—É–ø–∏—Ç–∏
/sell ‚Äì –ø—Ä–æ–¥–∞—Ç–∏
/history ‚Äì –æ—Å—Ç–∞–Ω–Ω—ñ —É–≥–æ–¥–∏
/help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
"""
    await update.message.reply_text(help_text, parse_mode="HTML")

async def notify_once_async(app):
    if not os.path.exists(NOTIFY_FILE):
        await app.bot.send_message(chat_id=ADMIN_CHAT_ID, text="‚úÖ Crypto Bot –∑–∞–ø—É—â–µ–Ω–æ –∑ polling")
        with open(NOTIFY_FILE, "w") as f:
            f.write(str(datetime.now()))

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("set_budget", set_budget))
    app.add_handler(CommandHandler("set_pair", set_pair))
    app.add_handler(CommandHandler("history", show_history))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("buy", buy))
    app.add_handler(CommandHandler("sell", sell))
    app.add_handler(CommandHandler("help", help_command))

    try:
        await notify_once_async(app)
    except Exception as e:
        logging.error(f"‚ùå Notify error: {e}")

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ polling")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.get_event_loop().run_until_complete(main())



