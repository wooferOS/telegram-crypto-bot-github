# üì¶ main.py ‚Äî Telegram –±–æ—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ–∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º–∏ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é

import os
import telebot
import json
from telegram import ReplyKeyboardMarkup
from binance.client import Client
from dotenv import load_dotenv
from daily_analysis import save_trade_history, generate_daily_report

# üß™ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)

# üìä /report ‚Äî GPT-–∑–≤—ñ—Ç —ñ–∑ Binance + –∞–Ω–∞–ª—ñ–∑
@bot.message_handler(commands=["report"])
def report_handler(message):
    try:
        report_text, report_file = generate_daily_report()
        bot.send_message(chat_id=message.chat.id, text=report_text, parse_mode="Markdown")
        with open(report_file, "rb") as f:
            bot.send_document(chat_id=message.chat.id, document=f)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É: {str(e)}")

# ‚úÖ /confirm_sell ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É
@bot.message_handler(commands=["confirm_sell"])
def confirm_sell(message):
    assets_to_sell = [
        {"asset": "TRX", "amount": 24},
        {"asset": "XRP", "amount": 9.99},
        {"asset": "GFT", "amount": 74},
        {"asset": "TRUMP", "amount": 1.5}
    ]
    try:
        for asset in assets_to_sell:
            symbol = f"{asset['asset']}USDT"
            client.create_order(
                symbol=symbol,
                side="SELL",
                type="MARKET",
                quantity=asset["amount"]
            )
        save_trade_history(assets_to_sell, action="sell")
        bot.reply_to(message, "‚úÖ –ü—Ä–æ–¥–∞–∂ –≤–∏–∫–æ–Ω–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—Ä–æ–¥–∞–∂—É: {str(e)}")

# ‚úÖ /confirm_buy ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫—É–ø—ñ–≤–ª—ñ
@bot.message_handler(commands=["confirm_buy"])
def confirm_buy(message):
    assets_to_buy = [
        {"asset": "ADA", "amount": 15},
        {"asset": "HBAR", "amount": 80},
        {"asset": "NOT", "amount": 90}
    ]
    try:
        for asset in assets_to_buy:
            symbol = f"{asset['asset']}USDT"
            client.create_order(
                symbol=symbol,
                side="BUY",
                type="MARKET",
                quantity=asset["amount"]
            )
        save_trade_history(assets_to_buy, action="buy")
        bot.reply_to(message, "‚úÖ –ö—É–ø—ñ–≤–ª—è –≤–∏–∫–æ–Ω–∞–Ω–∞ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∫—É–ø—ñ–≤–ª—ñ: {str(e)}")

# üìò /history ‚Äî –ø–µ—Ä–µ–≥–ª—è–¥ —ñ—Å—Ç–æ—Ä—ñ—ó —É–≥–æ–¥
@bot.message_handler(commands=["history"])
def history(message):
    history_file = "trade_history.json"
    if not os.path.exists(history_file):
        bot.reply_to(message, "‚õîÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è –ø—É—Å—Ç–∞.")
        return

    with open(history_file, "r") as f:
        data = json.load(f)

    if not data:
        bot.reply_to(message, "‚õîÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è —â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞.")
        return

    history_lines = []
    for entry in data[-10:]:  # –æ—Å—Ç–∞–Ω–Ω—ñ 10
        line = f"{entry['date']}: {entry['action'].upper()} {entry['amount']} {entry['asset']}"
        history_lines.append(line)

    response = "üìö –û—Å—Ç–∞–Ω–Ω—ñ —É–≥–æ–¥–∏:\n" + "\n".join(history_lines)
    bot.reply_to(message, response)

# üü¢ /start —ñ /help
@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø GPT-–∞—Å–∏—Å—Ç–µ–Ω—Ç Binance.\n\n"
        "üî∏ –©–æ–¥–Ω—è –æ 09:00 —Ç–∞ 20:00 —è –Ω–∞–¥—Å–∏–ª–∞—é –∞–Ω–∞–ª—ñ—Ç–∏–∫—É.\n"
        "üî∏ –¢–∏ –º–æ–∂–µ—à –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥—ñ—ó:\n"
        "   - /confirm_sell ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂\n"
        "   - /confirm_buy ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é\n"
        "   - /report ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ GPT\n"
        "   - /history ‚Äî —ñ—Å—Ç–æ—Ä—ñ—è —Ç–≤–æ—ó—Ö —É–≥–æ–¥\n\n"
        "üí∞ –Ø –∑–±–µ—Ä—ñ–≥–∞—é –≤—Å—ñ —Ç–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!"
    )
    bot.reply_to(message, text, reply_markup=main_menu)

# üì± –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        ["üí∞ –ë–∞–ª–∞–Ω—Å", "üìä –ó–≤—ñ—Ç", "üìò –Ü—Å—Ç–æ—Ä—ñ—è"],
        ["‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é", "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂"],
        ["üîÑ –û–Ω–æ–≤–∏—Ç–∏", "üõë –°–∫–∞—Å—É–≤–∞—Ç–∏"]
    ],
    resize_keyboard=True
)

@bot.message_handler(commands=["history"])
def handle_history(message):
    history_file = "trade_history.json"
    if not os.path.exists(history_file):
        bot.send_message(chat_id=message.chat.id, text="–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è üï∞Ô∏è")
        return

    with open(history_file, "r") as f:
        history = json.load(f)

    if not history:
        bot.send_message(chat_id=message.chat.id, text="–Ü—Å—Ç–æ—Ä—ñ—è —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.")
        return

    text = "üìò *–Ü–°–¢–û–†–Ü–Ø –£–ì–û–î*:\n"
    grouped = {}

    for item in history:
        date = item["date"].split(" ")[0]
        grouped.setdefault(date, []).append(item)

    for date, entries in grouped.items():
        text += f"\nüìÜ {date}:\n"
        for e in entries:
            emoji = "‚úÖ" if e["action"] == "buy" else "‚ùå"
            text += f"- {emoji} {e['action'].upper()} {e['asset']} ‚Äî {e['amount']}\n"

    bot.send_message(chat_id=message.chat.id, text=text, parse_mode="Markdown")


# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
