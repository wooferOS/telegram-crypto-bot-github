# binance_api.py

import os
from binance.client import Client
from binance.exceptions import BinanceAPIException
from typing import Optional

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤ —ñ–∑ –æ—Ç–æ—á–µ–Ω–Ω—è
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Binance
client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
def ping_binance():
    try:
        client.ping()
        return True
    except Exception as e:
        print(f"‚ùå Binance ping failed: {e}")
        return False
# –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç—É
def get_account_balances():
    try:
        balances = client.get_account()['balances']
        return {b['asset']: float(b['free']) + float(b['locked']) for b in balances if float(b['free']) + float(b['locked']) > 0}
    except BinanceAPIException as e:
        print(f"‚ùå BinanceAPIException: {e}")
        return {}
    except Exception as e:
        print(f"‚ùå Error getting account balances: {e}")
        return {}

# –û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –ª–∏—à–µ –≤ USDT
def get_usdt_balance():
    balances = get_account_balances()
    return balances.get('USDT', 0.0)
# –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ —Ü—ñ–Ω–∏ –≤—Å—ñ—Ö –ø–∞—Ä
def get_all_prices():
    try:
        prices = client.get_all_tickers()
        return {p['symbol']: float(p['price']) for p in prices}
    except BinanceAPIException as e:
        print(f"‚ùå BinanceAPIException: {e}")
        return {}
    except Exception as e:
        print(f"‚ùå Error getting prices: {e}")
        return {}

# –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å —É USDT
def get_current_portfolio() -> Dict[str, float]:
    balances = get_account_balances()
    prices = get_all_prices()
    portfolio = {}

    for asset, amount in balances.items():
        if asset == 'USDT':
            portfolio['USDT'] = amount
        else:
            symbol = f"{asset}USDT"
            price = prices.get(symbol)
            if price:
                value_usdt = amount * price
                portfolio[asset] = value_usdt

    return portfolio

# –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —É–≥–æ–¥ –ø–æ —Å–∏–º–≤–æ–ª—É
def get_trade_history(symbol: str):
    try:
        trades = client.get_my_trades(symbol=symbol)
        return trades
    except BinanceAPIException as e:
        print(f"‚ùå BinanceAPIException (trades): {e}")
        return []
    except Exception as e:
        print(f"‚ùå Error getting trade history: {e}")
        return []

# –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É/–∑–±–∏—Ç–∫—É –ø–æ —Å–∏–º–≤–æ–ª—É
def calculate_pnl(symbol: str):
    trades = get_trade_history(symbol)
    total_qty = 0.0
    total_cost = 0.0
    total_income = 0.0

    for trade in trades:
        qty = float(trade['qty'])
        price = float(trade['price'])
        commission = float(trade['commission'])

        if trade['isBuyer']:
            total_qty += qty
            total_cost += qty * price + commission
        else:
            total_qty -= qty
            total_income += qty * price - commission

    realized_pnl = total_income - total_cost
    return round(realized_pnl, 2)
# –ö—É–ø–∏—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∑–∞ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä–æ–º
def market_buy(symbol: str, quote_quantity: float):
    try:
        order = client.order_market_buy(
            symbol=symbol,
            quoteOrderQty=round(quote_quantity, 2)
        )
        print(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {symbol} –Ω–∞ {quote_quantity} USDT")
        return order
    except BinanceAPIException as e:
        print(f"‚ùå BinanceAPIException (buy): {e}")
        return None
    except Exception as e:
        print(f"‚ùå Error placing buy order: {e}")
        return None
# –ü—Ä–æ–¥–∞—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∑–∞ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä–æ–º
def market_sell(symbol: str, quantity: float):
    try:
        order = client.order_market_sell(
            symbol=symbol,
            quantity=round(quantity, 6)  # –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–æ—á–Ω–æ—Å—Ç—ñ
        )
        print(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {symbol} —É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ {quantity}")
        return order
    except BinanceAPIException as e:
        print(f"‚ùå BinanceAPIException (sell): {e}")
        return None
    except Exception as e:
        print(f"‚ùå Error placing sell order: {e}")
        return None
# –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª—É
def get_order_history(symbol: str, limit: int = 10):
    try:
        orders = client.get_all_orders(symbol=symbol, limit=limit)
        print(f"üìú –Ü—Å—Ç–æ—Ä—ñ—è –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è {symbol} –æ—Ç—Ä–∏–º–∞–Ω–∞")
        return orders
    except BinanceAPIException as e:
        print(f"‚ùå BinanceAPIException (order history): {e}")
        return []
    except Exception as e:
        print(f"‚ùå Error getting order history: {e}")
        return []
# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –æ—Ä–¥–µ—Ä–∏
def get_open_orders(symbol: str = None):
    try:
        if symbol:
            orders = client.get_open_orders(symbol=symbol)
        else:
            orders = client.get_open_orders()
        print(f"üìÇ –í—ñ–¥–∫—Ä–∏—Ç—ñ –æ—Ä–¥–µ—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ")
        return orders
    except BinanceAPIException as e:
        print(f"‚ùå BinanceAPIException (open orders): {e}")
        return []
    except Exception as e:
        print(f"‚ùå Error getting open orders: {e}")
        return []

# –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Ä–¥–µ—Ä –∑–∞ ID
def cancel_order(symbol: str, order_id: int):
    try:
        result = client.cancel_order(symbol=symbol, orderId=order_id)
        print(f"üõë –û—Ä–¥–µ—Ä {order_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        return result
    except BinanceAPIException as e:
        print(f"‚ùå BinanceAPIException (cancel): {e}")
        return None
    except Exception as e:
        print(f"‚ùå Error cancelling order: {e}")
        return None
# –û—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –∫—Ä–æ–∫–∏ –¥–ª—è —Å–∏–º–≤–æ–ª—É (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ —Ü—ñ–Ω–∞)
def get_symbol_filters(symbol: str):
    try:
        info = client.get_symbol_info(symbol)
        filters = {f['filterType']: f for f in info['filters']}
        lot_size = float(filters['LOT_SIZE']['stepSize'])
        price_tick = float(filters['PRICE_FILTER']['tickSize'])
        return lot_size, price_tick
    except Exception as e:
        print(f"‚ùå Error getting symbol filters: {e}")
        return 0.001, 0.01  # safe defaults

# –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ Binance
def round_quantity(symbol: str, quantity: float) -> float:
    lot_size, _ = get_symbol_filters(symbol)
    rounded = math.floor(quantity / lot_size) * lot_size
    return round(rounded, 8)

# –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ Binance
def round_price(symbol: str, price: float) -> float:
    _, price_tick = get_symbol_filters(symbol)
    rounded = round(math.floor(price / price_tick) * price_tick, 8)
    return rounded
# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—É
def set_stop_loss(symbol: str, quantity: float, stop_price: float) -> Optional[str]:
    try:
        stop_price = round_price(symbol, stop_price)
        quantity = round_quantity(symbol, quantity)

        order = client.create_order(
            symbol=symbol,
            side=SIDE_SELL,
            type=ORDER_TYPE_STOP_LOSS_LIMIT,
            quantity=quantity,
            stopPrice=stop_price,
            price=stop_price * 0.99,  # —Ç—Ä–æ—Ö–∏ –Ω–∏–∂—á–µ
            timeInForce=TIME_IN_FORCE_GTC
        )
        print(f"‚úÖ Stop-loss set for {symbol}: {order}")
        return order['orderId']
    except Exception as e:
        print(f"‚ùå Error setting stop-loss: {e}")
        return None

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç—É
def set_take_profit(symbol: str, quantity: float, target_price: float) -> Optional[str]:
    try:
        target_price = round_price(symbol, target_price)
        quantity = round_quantity(symbol, quantity)

        order = client.create_order(
            symbol=symbol,
            side=SIDE_SELL,
            type=ORDER_TYPE_LIMIT,
            quantity=quantity,
            price=target_price,
            timeInForce=TIME_IN_FORCE_GTC
        )
        print(f"‚úÖ Take-profit set for {symbol}: {order}")
        return order['orderId']
    except Exception as e:
        print(f"‚ùå Error setting take-profit: {e}")
        return None
