import os
import time
import hmac
import hashlib
import requests
import decimal
from typing import Dict, List, Optional

from dotenv import load_dotenv
from binance.client import Client

# üîê –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
BINANCE_BASE_URL = "https://api.binance.com"

# üß© –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Binance
client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)
# üïí –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ timestamp –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –∑–∞–ø–∏—Ç—ñ–≤
def get_timestamp() -> int:
    return int(time.time() * 1000)

# üîè –ü—ñ–¥–ø–∏—Å –∑–∞–ø–∏—Ç—É –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö endpoint'—ñ–≤ Binance
def sign_request(params: Dict[str, str]) -> Dict[str, str]:
    query_string = "&".join([f"{k}={v}" for k, v in params.items()])
    signature = hmac.new(
        BINANCE_SECRET_KEY.encode("utf-8"),
        query_string.encode("utf-8"),
        hashlib.sha256
    ).hexdigest()
    params["signature"] = signature
    return params

# üì¨ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API-–∑–∞–ø–∏—Ç—ñ–≤
def get_headers() -> Dict[str, str]:
    return {
        "X-MBX-APIKEY": BINANCE_API_KEY
    }
# üë§ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–∫–∞—É–Ω—Ç
def get_account_info() -> Optional[Dict]:
    url = f"{BINANCE_BASE_URL}/api/v3/account"
    params = {"timestamp": get_timestamp()}
    signed_params = sign_request(params)
    try:
        response = requests.get(url, headers=get_headers(), params=signed_params)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"[Binance] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞: {e}")
        return None
# üí∞ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_balances() -> Dict[str, float]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ {asset: amount}, —Ñ—ñ–ª—å—Ç—Ä—É—é—á–∏ –ª–∏—à–µ –∞–∫—Ç–∏–≤–∏ –∑ –Ω–µ–Ω—É–ª—å–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º.
    """
    try:
        account = client.get_account()
        balances = {}
        for balance in account.get("balances", []):
            asset = balance.get("asset")
            free = float(balance.get("free", 0))
            locked = float(balance.get("locked", 0))
            total = free + locked
            if total > 0:
                balances[asset] = total
        return balances
    except Exception as e:
        print(f"[Binance] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É: {e}")
        return {}
# üíπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω —É—Å—ñ—Ö –º–æ–Ω–µ—Ç –¥–æ USDT
def get_prices() -> Dict[str, float]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ {asset: price_in_usdt} –¥–ª—è –≤—Å—ñ—Ö –ø–∞—Ä, —â–æ –∑–∞–≤–µ—Ä—à—É—é—Ç—å—Å—è –Ω–∞ USDT.
    """
    try:
        tickers = client.get_all_tickers()
        prices = {}
        for ticker in tickers:
            symbol = ticker.get("symbol", "")
            if symbol.endswith("USDT"):
                asset = symbol.replace("USDT", "")
                price = float(ticker.get("price", 0))
                prices[asset] = price
        return prices
    except Exception as e:
        print(f"[Binance] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω: {e}")
        return {}
# üßæ –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ USDT
def get_current_portfolio() -> Dict[str, float]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ {symbol: value_in_usdt} –ª–∏—à–µ –¥–ª—è –º–æ–Ω–µ—Ç –∑ –Ω–µ–Ω—É–ª—å–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º.
    """
    balances = get_balances()
    prices = get_prices()
    portfolio = {}

    for asset, amount in balances.items():
        if asset == "USDT":
            portfolio[asset] = round(amount, 4)
        elif asset in prices:
            portfolio[asset] = round(amount * prices[asset], 4)
        else:
            print(f"[Binance] ‚ö†Ô∏è –ù–µ–º–∞—î —Ü—ñ–Ω–∏ –¥–ª—è {asset}, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")

    return portfolio
# üìà –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –∞–∫—Ç–∏–≤—É
def get_coin_price(symbol: str) -> Optional[float]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –º–æ–Ω–µ—Ç–∏ –≤ USDT, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: get_coin_price("BTC") ‚Üí 68300.0
    """
    try:
        url = f"{BINANCE_BASE_URL}/api/v3/ticker/price"
        response = requests.get(url, params={"symbol": f"{symbol}USDT"})
        response.raise_for_status()
        return float(response.json()["price"])
    except Exception as e:
        print(f"[Binance] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω–∏ {symbol}USDT: {e}")
        return None
# üî¢ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—á–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—É
def get_symbol_precision(symbol: str) -> int:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤ (precision) –¥–ª—è —Å–∏–º–≤–æ–ª—É.
    –ù–∞–ø—Ä–∏–∫–ª–∞–¥: BTCUSDT ‚Üí 6
    """
    try:
        url = f"{BINANCE_BASE_URL}/api/v3/exchangeInfo"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        for s in data.get("symbols", []):
            if s["symbol"] == symbol:
                for f in s["filters"]:
                    if f["filterType"] == "LOT_SIZE":
                        step_size = float(f["stepSize"])
                        return abs(decimal.Decimal(str(step_size)).as_tuple().exponent)
    except Exception as e:
        print(f"[Binance] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ—á–Ω–æ—Å—Ç—ñ –¥–ª—è {symbol}: {e}")
    
    return 2  # üîÅ –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
# üìâ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ü—ñ–Ω–∏ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–∏–π endpoint
def get_last_price(symbol: str) -> float:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—é –≤—ñ–¥–æ–º—É —Ü—ñ–Ω—É —Å–∏–º–≤–æ–ª—É —Ç–∏–ø—É BTCUSDT.
    """
    try:
        url = f"{BINANCE_BASE_URL}/api/v3/ticker/price?symbol={symbol}"
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        return float(data["price"])
    except Exception as e:
        print(f"[Binance] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ü—ñ–Ω–∏ {symbol}: {e}")
        return 0.0
# üìã –ü—Ä–∏–∫–ª–∞–¥ —Ñ—É–Ω–∫—Ü—ñ—ó: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∞–∫—Ç–∏–≤ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –±–æ—Ç–æ–º
def is_asset_supported(symbol: str, whitelist: Optional[List[str]] = None) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å–∏–º–≤–æ–ª –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –∑–≥—ñ–¥–Ω–æ –∑ whitelist.
    """
    if whitelist is None:
        whitelist = [
            "BTC", "ETH", "BNB", "SOL", "XRP", "ADA", "DOGE", "AVAX", "DOT",
            "TRX", "LINK", "MATIC", "LTC", "BCH", "ATOM", "NEAR", "FIL",
            "ICP", "ETC", "HBAR", "VET", "RUNE", "INJ", "OP", "ARB", "SUI",
            "STX", "TIA", "SEI", "1000PEPE"
        ]
    return symbol.upper() in whitelist
# üß™ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    print("üîß Binance API –º–æ–¥—É–ª—å –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É.")
    print("‚û°Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:")
    portfolio = get_current_portfolio()
    for asset, value in portfolio.items():
        print(f"‚Ä¢ {asset}: ${value:.2f}")
