import os
import time
import hmac
import hashlib
import logging
import requests
import decimal
from typing import Dict, List, Optional
import asyncio

from dotenv import load_dotenv
from binance.client import Client
from binance.enums import SIDE_BUY, SIDE_SELL, ORDER_TYPE_MARKET


def safe_close_client(client: Client) -> None:
    """Safely close Binance client HTTP session."""
    try:
        if hasattr(client, "session") and client.session:
            client.session.close()
    except Exception:
        pass


class SafeBinanceClient(Client):
    """Binance Client with safe session cleanup on deletion."""

    def __del__(self) -> None:
        safe_close_client(self)

# üîê –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv(dotenv_path=os.path.expanduser("~/.env"))

TELEGRAM_LOG_PREFIX = "\ud83d\udce1 [BINANCE]"
logger = logging.getLogger(__name__)

BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
if not BINANCE_API_KEY or not BINANCE_SECRET_KEY:
    logger.warning("‚ö†Ô∏è Binance API credentials are missing.")
BINANCE_BASE_URL = "https://api.binance.com"

# üß© –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Binance –±–µ–∑ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ–≥–æ ping
try:
    client = SafeBinanceClient(
        api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY, ping=False
    )
except TypeError:
    client = SafeBinanceClient(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)
# üïí –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ timestamp –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –∑–∞–ø–∏—Ç—ñ–≤
def get_timestamp() -> int:
    return int(time.time() * 1000)

# üîè –ü—ñ–¥–ø–∏—Å –∑–∞–ø–∏—Ç—É –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö endpoint'—ñ–≤ Binance
def sign_request(params: Dict[str, str]) -> Dict[str, str]:
    query_string = "&".join([f"{k}={v}" for k, v in params.items()])
    signature = hmac.new(
        BINANCE_SECRET_KEY.encode("utf-8"),
        query_string.encode("utf-8"),
        hashlib.sha256
    ).hexdigest()
    params["signature"] = signature
    return params

# üì¨ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API-–∑–∞–ø–∏—Ç—ñ–≤
def get_headers() -> Dict[str, str]:
    return {
        "X-MBX-APIKEY": BINANCE_API_KEY
    }
# üë§ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–∫–∞—É–Ω—Ç
def get_account_info() -> Optional[Dict]:
    url = f"{BINANCE_BASE_URL}/api/v3/account"
    params = {"timestamp": get_timestamp()}
    signed_params = sign_request(params)
    try:
        response = requests.get(url, headers=get_headers(), params=signed_params)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logger.error(f"{TELEGRAM_LOG_PREFIX} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞: {e}")
        return None
# üí∞ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_balances() -> Dict[str, float]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ {asset: amount}, —Ñ—ñ–ª—å—Ç—Ä—É—é—á–∏ –ª–∏—à–µ –∞–∫—Ç–∏–≤–∏ –∑ –Ω–µ–Ω—É–ª—å–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º.
    """
    try:
        account = client.get_account()
        balances = {}
        for balance in account.get("balances", []):
            asset = balance.get("asset")
            free = float(balance.get("free", 0))
            locked = float(balance.get("locked", 0))
            total = free + locked
            if total > 0:
                balances[asset] = total
        return balances
    except Exception as e:
        logger.error(f"{TELEGRAM_LOG_PREFIX} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É: {e}")
        return {}


async def get_binance_balances() -> Dict[str, Dict[str, float]]:
    api_key = os.getenv("BINANCE_API_KEY")
    api_secret = os.getenv("BINANCE_SECRET_KEY")
    client = Client(api_key, api_secret)

    try:
        account = client.get_account()
        prices = client.get_all_tickers()
        price_map = {p["symbol"]: float(p["price"]) for p in prices}

        balances = {}
        for b in account["balances"]:
            asset = b["asset"]
            free = float(b["free"])
            if free > 0:
                symbol = asset + "USDT"
                usdt_value = free * price_map.get(symbol, 0)
                balances[asset] = {"free": free, "usdtValue": round(usdt_value, 2)}
        return balances
    finally:
        try:
            if hasattr(client, "session") and client.session:
                client.session.close()
        except Exception:
            pass
# üíπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω —É—Å—ñ—Ö –º–æ–Ω–µ—Ç –¥–æ USDT
def get_prices() -> Dict[str, float]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ {asset: price_in_usdt} –¥–ª—è –≤—Å—ñ—Ö –ø–∞—Ä, —â–æ –∑–∞–≤–µ—Ä—à—É—é—Ç—å—Å—è –Ω–∞ USDT.
    """
    try:
        tickers = client.get_all_tickers()
        prices = {}
        for ticker in tickers:
            symbol = ticker.get("symbol", "")
            if symbol.endswith("USDT"):
                asset = symbol.replace("USDT", "")
                price = float(ticker.get("price", 0))
                prices[asset] = price
        return prices
    except Exception as e:
        logger.error(f"{TELEGRAM_LOG_PREFIX} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω: {e}")
        return {}
# üßæ –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ USDT
def get_current_portfolio() -> Dict[str, float]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ {symbol: value_in_usdt} –ª–∏—à–µ –¥–ª—è –º–æ–Ω–µ—Ç –∑ –Ω–µ–Ω—É–ª—å–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º.
    """
    balances = get_balances()
    prices = get_prices()
    portfolio = {}

    for asset, amount in balances.items():
        if asset == "USDT":
            portfolio[asset] = round(amount, 4)
        elif asset in prices:
            portfolio[asset] = round(amount * prices[asset], 4)
        else:
            logger.warning(f"{TELEGRAM_LOG_PREFIX} –ù–µ–º–∞—î —Ü—ñ–Ω–∏ –¥–ª—è {asset}, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")

    return portfolio

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø—Ä–æ—Å—Ç—ñ—à–æ—ó —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Telegram-–±–æ—Ç–æ–º ---

def get_usdt_balance() -> float:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å USDT."""
    try:
        balances = client.get_asset_balance(asset="USDT")
        return float(balances.get("free", 0.0))
    except Exception as e:
        logger.error(f"{TELEGRAM_LOG_PREFIX} –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É USDT: {e}")
        return 0.0


def get_token_balance(symbol: str) -> float:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –±–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    try:
        balances = client.get_asset_balance(asset=symbol.upper())
        return float(balances.get("free", 0.0))
    except Exception as e:
        logger.error(f"{TELEGRAM_LOG_PREFIX} –ë–∞–ª–∞–Ω—Å {symbol.upper()} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        return 0.0


def get_symbol_price(symbol: str) -> float:
    """–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ –¥–æ USDT."""
    try:
        ticker = client.get_symbol_ticker(symbol=f"{symbol.upper()}USDT")
        return float(ticker.get("price", 0.0))
    except Exception as e:
        logger.error(f"{TELEGRAM_LOG_PREFIX} –ü–æ–º–∏–ª–∫–∞ —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
        return 0.0


def place_market_order(symbol: str, side: str, quantity: float):
    """–í–∏–∫–æ–Ω—É—î –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä –∫—É–ø—ñ–≤–ª—ñ –∞–±–æ –ø—Ä–æ–¥–∞–∂—É."""
    try:
        order = client.create_order(
            symbol=f"{symbol.upper()}USDT",
            side=SIDE_BUY if side == "BUY" else SIDE_SELL,
            type=ORDER_TYPE_MARKET,
            quantity=quantity,
        )
        logger.info(f"{TELEGRAM_LOG_PREFIX} –û—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ: {order}")
        return order
    except Exception as e:
        logger.error(f"{TELEGRAM_LOG_PREFIX} –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: {e}")
        return None


def get_usdt_to_uah_rate() -> float:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—É—Ä—Å USDT –¥–æ –≥—Ä–∏–≤–Ω—ñ."""
    try:
        ticker = client.get_symbol_ticker(symbol="USDTUAH")
        return float(ticker.get("price", 39.2))
    except Exception as e:
        logger.warning(f"{TELEGRAM_LOG_PREFIX} –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É UAH: {e}")
        return 39.2


def get_token_value_in_uah(symbol: str) -> float:
    """–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —É –≥—Ä–∏–≤–Ω—è—Ö."""
    price_usdt = get_symbol_price(symbol)
    uah_rate = get_usdt_to_uah_rate()
    return round(price_usdt * uah_rate, 2)


def notify_telegram(message: str) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É —É Telegram, —è–∫—â–æ —Ç–æ–∫–µ–Ω —Ç–∞ chat_id –≤–∫–∞–∑–∞–Ω—ñ."""
    token = os.getenv("TELEGRAM_TOKEN")
    chat_id = os.getenv("ADMIN_CHAT_ID", os.getenv("CHAT_ID", ""))
    if not token or not chat_id:
        logger.debug(f"{TELEGRAM_LOG_PREFIX} Telegram credentials not set")
        return
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    try:
        requests.post(url, json={"chat_id": chat_id, "text": message}, timeout=5)
    except Exception as e:
        logger.warning(f"{TELEGRAM_LOG_PREFIX} –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram: {e}")
# üìà –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –∞–∫—Ç–∏–≤—É
def get_coin_price(symbol: str) -> Optional[float]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –º–æ–Ω–µ—Ç–∏ –≤ USDT, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: get_coin_price("BTC") ‚Üí 68300.0
    """
    try:
        url = f"{BINANCE_BASE_URL}/api/v3/ticker/price"
        response = requests.get(url, params={"symbol": f"{symbol}USDT"})
        response.raise_for_status()
        return float(response.json()["price"])
    except Exception as e:
        logger.error(f"{TELEGRAM_LOG_PREFIX} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω–∏ {symbol}USDT: {e}")
        return None
# üî¢ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—á–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—É
def get_symbol_precision(symbol: str) -> int:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤ (precision) –¥–ª—è —Å–∏–º–≤–æ–ª—É.
    –ù–∞–ø—Ä–∏–∫–ª–∞–¥: BTCUSDT ‚Üí 6
    """
    try:
        url = f"{BINANCE_BASE_URL}/api/v3/exchangeInfo"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        for s in data.get("symbols", []):
            if s["symbol"] == symbol:
                for f in s["filters"]:
                    if f["filterType"] == "LOT_SIZE":
                        step_size = float(f["stepSize"])
                        return abs(decimal.Decimal(str(step_size)).as_tuple().exponent)
    except Exception as e:
        logger.warning(f"{TELEGRAM_LOG_PREFIX} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ—á–Ω–æ—Å—Ç—ñ –¥–ª—è {symbol}: {e}")
    
    return 2  # üîÅ –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

def get_full_asset_info():
    # ‚ö†Ô∏è –ó–∞–º—ñ–Ω–∏ –Ω–∏–∂—á–µ –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –∫–æ–¥
    return {
        "balances": [
            {"symbol": "ADA", "amount": 15.3, "usdt_value": 10.25, "uah_value": 415.77},
            {"symbol": "XRP", "amount": 9.99, "usdt_value": 21.35, "uah_value": 865.32},
        ],
        "pnl": [
            {"symbol": "ADA", "prev_amount": 15.3, "current_amount": 15.3, "diff": 0.0, "percent": 0.0},
            {"symbol": "XRP", "prev_amount": 10.0, "current_amount": 9.99, "diff": -0.01, "percent": -0.1},
        ],
        "recommend_sell": [
            {"symbol": "ADA", "change_percent": -5.32},
            {"symbol": "PEPE", "change_percent": -10.1}
        ],
        "recommend_buy": [
            {"symbol": "LPTUSDT", "volume": 123456.0, "change_percent": 12.3},
            {"symbol": "TRBUSDT", "volume": 98765.0, "change_percent": 18.4}
        ],
        "expected_profit": 14.77,
        "expected_profit_block": "- –ü—Ä–æ–¥–∞–∂ ADA: + 7.2\n- –ö—É–ø—ñ–≤–ª—è TRX: + 2.3\n= –†–∞–∑–æ–º: + 9.5 (‚âà +15%)",
        "gpt_forecast": "ADA –≤–∏–≥–ª—è–¥–∞—î —Å–∏–ª—å–Ω–æ, PEPE –≤—Ç—Ä–∞—á–∞—î –ø–æ–∑–∏—Ü—ñ—ó.",
    }

# üìâ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ü—ñ–Ω–∏ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–∏–π endpoint
def get_last_price(symbol: str) -> float:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—é –≤—ñ–¥–æ–º—É —Ü—ñ–Ω—É —Å–∏–º–≤–æ–ª—É —Ç–∏–ø—É BTCUSDT.
    """
    try:
        url = f"{BINANCE_BASE_URL}/api/v3/ticker/price?symbol={symbol}"
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        return float(data["price"])
    except Exception as e:
        logger.warning(f"{TELEGRAM_LOG_PREFIX} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ü—ñ–Ω–∏ {symbol}: {e}")
        return 0.0

# üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
def get_price_history_24h(symbol: str) -> Optional[List[float]]:
    """Return list of hourly close prices for the last 24 hours."""
    try:
        url = f"{BINANCE_BASE_URL}/api/v3/klines"
        params = {"symbol": f"{symbol.upper()}USDT", "interval": "1h", "limit": 24}
        response = requests.get(url, params=params, timeout=5)
        response.raise_for_status()
        data = response.json()
        return [float(item[4]) for item in data]
    except Exception as e:
        logger.warning(
            f"{TELEGRAM_LOG_PREFIX} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ü—ñ–Ω {symbol}: {e}"
        )
        return None


def get_recent_trades(symbol: str = "BTCUSDT", limit: int = 5) -> List[Dict]:
    """Return recent trades from Binance."""
    try:
        return client.get_my_trades(symbol=symbol, limit=limit)
    except Exception as e:
        logger.warning(
            f"{TELEGRAM_LOG_PREFIX} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —É–≥–æ–¥: {e}"
        )
        return []


def get_portfolio_stats() -> Dict[str, float]:
    """Return total portfolio value in USDT and UAH."""
    portfolio = get_current_portfolio()
    total_usdt = sum(portfolio.values())
    total_uah = round(total_usdt * get_usdt_to_uah_rate(), 2)
    return {"total_usdt": round(total_usdt, 4), "total_uah": total_uah}
# üìã –ü—Ä–∏–∫–ª–∞–¥ —Ñ—É–Ω–∫—Ü—ñ—ó: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∞–∫—Ç–∏–≤ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –±–æ—Ç–æ–º
def is_asset_supported(symbol: str, whitelist: Optional[List[str]] = None) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å–∏–º–≤–æ–ª –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –∑–≥—ñ–¥–Ω–æ –∑ whitelist.
    """
    if whitelist is None:
        whitelist = [
            "BTC", "ETH", "BNB", "SOL", "XRP", "ADA", "DOGE", "AVAX", "DOT",
            "TRX", "LINK", "MATIC", "LTC", "BCH", "ATOM", "NEAR", "FIL",
            "ICP", "ETC", "HBAR", "VET", "RUNE", "INJ", "OP", "ARB", "SUI",
            "STX", "TIA", "SEI", "1000PEPE"
        ]
    return symbol.upper() in whitelist
# üß™ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    logger.info("üîß Binance API –º–æ–¥—É–ª—å –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É.")
    logger.info("‚û°Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:")
    portfolio = get_current_portfolio()
    for asset, value in portfolio.items():
        logger.info(f"‚Ä¢ {asset}: ${value:.2f}")
